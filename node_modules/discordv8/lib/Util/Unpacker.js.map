{"version":3,"sources":["../../src/Util/Unpacker.js"],"names":["erlpack","require","console","log","error","ZlibSuffix","Unpacker","constructor","useErlpack","useZlib","onPacket","chunks","inflate","Inflate","chunkSize","flush","Z_SYNC_FLUSH","to","onData","chunk","push","onEnd","length","data","Buffer","concat","join","unpacked","unpack","err","inflateSync","toString","JSON","parse","ArrayBuffer","from","Uint8Array","onMessage","buffer","end","view","DataView","byteLength","getUint32","readUInt32BE"],"mappings":"AAAA;;;;;;AACA;;;;AACA;;;;;;AACA,IAAIA,UAAU,KAAd;AACA,IAAI;AACFA,YAAUC,QAAQ,SAAR,CAAV;AACAC,UAAQC,GAAR,CAAY,eAAZ;AACD,CAHD,CAGE,OAAMC,KAAN,EAAa;AACbF,UAAQC,GAAR,CAAY,0GAAZ;AACA;AACD;AACD,MAAME,aAAa,MAAnB;;AAEe,MAAMC,QAAN,CAAe;AAC5BC,cAAYC,UAAZ,EAAwBC,OAAxB,EAAiCC,QAAjC,EAA2C;AACzC,SAAKF,UAAL,GAAkBA,UAAlB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgBA,QAAhB;;AAEA,QAAI,KAAKD,OAAT,EAAkB;AAChB,YAAME,SAAS,EAAf;;AAEA,WAAKC,OAAL,GAAe,IAAI,eAAKC,OAAT,CAAiB;AAC9BC,mBAAW,KADmB;AAE9BC,eAAO,eAAKC,YAFkB;AAG9BC,YAAI,KAAKT,UAAL,GAAkB,EAAlB,GAAuB;AAHG,OAAjB,CAAf;;AAMA,WAAKI,OAAL,CAAaM,MAAb,GAAsBC,SAASR,OAAOS,IAAP,CAAYD,KAAZ,CAA/B;AACA,WAAKP,OAAL,CAAaS,KAAb,GAAqB,MAAM;AACzB,YAAIV,OAAOW,MAAP,KAAkB,CAAtB,EAAyB;AACzB,cAAMC,OAAOZ,OAAOW,MAAP,KAAkB,CAAlB,GAAsBX,OAAO,CAAP,CAAtB,GACX,KAAKH,UAAL,GAAkBgB,OAAOC,MAAP,CAAcd,MAAd,CAAlB,GAA0CA,OAAOe,IAAP,CAAY,EAAZ,CAD5C;AAEAf,eAAOW,MAAP,GAAgB,CAAhB;AACA,YAAIK,QAAJ;AACA,YAAI;AACFA,qBAAW,KAAKC,MAAL,CAAYL,IAAZ,CAAX;AACD,SAFD,CAEE,OAAOM,GAAP,EAAY;AACZ;AACD;AACDnB,iBAASiB,QAAT;AACD,OAZD;AAaD;AAEF;;AAEDC,SAAOL,IAAP,EAAa;AACX,QAAK,CAAC,KAAKf,UAAP,IAAsBe,gBAAgBC,MAA1C,EAAkD;AAChDD,aAAO,eAAKO,WAAL,CAAiBP,IAAjB,EAAuBQ,QAAvB,EAAP;AACD;AACD,QAAI,CAAC,KAAKvB,UAAN,IAAoBe,KAAK,CAAL,MAAY,GAApC,EAAyC,OAAOS,KAAKC,KAAL,CAAWV,IAAX,CAAP;AACzC,QAAIA,gBAAgBW,WAApB,EAAiCX,OAAOC,OAAOW,IAAP,CAAY,IAAIC,UAAJ,CAAeb,IAAf,CAAZ,CAAP;AACjC,WAAOvB,QAAQ4B,MAAR,CAAeL,IAAf,CAAP;AACD;;AAEDc,YAAUC,MAAV,EAAkB;AAChB,QAAI,KAAK7B,OAAT,EAAkB;AAChB,UAAI8B,GAAJ;AACA,UAAID,kBAAkBJ,WAAtB,EAAmC;AACjC,cAAMM,OAAO,IAAIC,QAAJ,CAAaH,MAAb,CAAb;AACAC,cAAMC,KAAKE,UAAL,IAAmB,CAAnB,IAAwBF,KAAKG,SAAL,CAAeH,KAAKE,UAAL,GAAkB,CAAjC,MAAwCrC,UAAtE;AACD,OAHD,MAGO;AACLkC,cAAMD,OAAOhB,MAAP,IAAiB,CAAjB,IAAsBgB,OAAOM,YAAP,CAAoBN,OAAOhB,MAAP,GAAgB,CAApC,MAA2CjB,UAAvE;AACD;AACD,WAAKO,OAAL,CAAaQ,IAAb,CAAkBkB,MAAlB,EAA0BC,OAAO,eAAKvB,YAAtC;AACD,KATD,MASO;AACL,WAAKN,QAAL,CAAc,KAAKkB,MAAL,CAAYU,MAAZ,CAAd;AACD;AACF;AAvD2B;kBAAThC,Q","file":"Unpacker.js","sourcesContent":["\"use strict\";\r\nimport pako from \"pako\";\r\nimport zlib from \"zlib\";\r\nlet erlpack = false;\r\ntry {\r\n  erlpack = require(\"erlpack\");\r\n  console.log(\"using erlpack\");\r\n} catch(error) {\r\n  console.log(\"erlpack failed to load, falling back to json, for performance reasons please consider installing erlpack\");\r\n  // no erlpack\r\n}\r\nconst ZlibSuffix = 0xFFFF;\r\n\r\nexport default class Unpacker {\r\n  constructor(useErlpack, useZlib, onPacket) {\r\n    this.useErlpack = useErlpack;\r\n    this.useZlib = useZlib;\r\n    this.onPacket = onPacket;\r\n\r\n    if (this.useZlib) {\r\n      const chunks = [];\r\n\r\n      this.inflate = new pako.Inflate({\r\n        chunkSize: 65535,\r\n        flush: pako.Z_SYNC_FLUSH,\r\n        to: this.useErlpack ? '' : 'string',\r\n      });\r\n\r\n      this.inflate.onData = chunk => chunks.push(chunk);\r\n      this.inflate.onEnd = () => {\r\n        if (chunks.length === 0) return;\r\n        const data = chunks.length === 1 ? chunks[0] :\r\n          this.useErlpack ? Buffer.concat(chunks) : chunks.join('');\r\n        chunks.length = 0;\r\n        let unpacked;\r\n        try {\r\n          unpacked = this.unpack(data);\r\n        } catch (err) {\r\n          return;\r\n        }\r\n        onPacket(unpacked);\r\n      };\r\n    }\r\n\r\n  }\r\n\r\n  unpack(data) {\r\n    if ((!this.useErlpack) && data instanceof Buffer) {\r\n      data = zlib.inflateSync(data).toString();\r\n    }\r\n    if (!this.useErlpack || data[0] === '{') return JSON.parse(data);\r\n    if (data instanceof ArrayBuffer) data = Buffer.from(new Uint8Array(data));\r\n    return erlpack.unpack(data);\r\n  }\r\n\r\n  onMessage(buffer) {\r\n    if (this.useZlib) {\r\n      let end;\r\n      if (buffer instanceof ArrayBuffer) {\r\n        const view = new DataView(buffer);\r\n        end = view.byteLength >= 4 && view.getUint32(view.byteLength - 4) === ZlibSuffix;\r\n      } else {\r\n        end = buffer.length >= 4 && buffer.readUInt32BE(buffer.length - 4) === ZlibSuffix;\r\n      }\r\n      this.inflate.push(buffer, end && pako.Z_SYNC_FLUSH);\r\n    } else {\r\n      this.onPacket(this.unpack(buffer));\r\n    }\r\n  }\r\n}"]}