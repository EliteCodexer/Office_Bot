{"version":3,"sources":["../../src/Voice/VolumeTransformer.js"],"names":["Transform","require","Volume","volume","set","value","Math","pow","db","undefined","buffer","encoding","callback","out","Buffer","length","i","uint","floor","multiplier","readInt16LE","min","max","writeInt16LE","push","_volume","module","exports"],"mappings":";;;;;;;;;;AAAA,IAAMA,YAAYC,QAAQ,QAAR,EAAkBD,SAApC;;AAEA;;;;IAGME,M;;;AACL,iBAAYC,MAAZ,EAAoB;AAAA;;AAAA;;AAEnB,QAAKC,GAAL,CAASD,MAAT;AAFmB;AAGnB;;;;;;AAUD;AACA;uCACqBE,K,EAAO;AAC3B,QAAKF,MAAL,GAAcG,KAAKC,GAAL,CAASF,KAAT,EAAgB,QAAhB,CAAd;AACA;;AAED;;;;oCACkBG,E,EAAI;AACrB,QAAKL,MAAL,GAAcG,KAAKC,GAAL,CAAS,EAAT,EAAaC,KAAK,EAAlB,CAAd;AACA;;;wBAMK;AACL,UAAO,KAAKL,MAAZ;AACA;;;sBAEGA,M,EAAQ;AACX,QAAKA,MAAL,GAAcA,WAAWM,SAAX,GAAuB,CAAvB,GAA2BN,MAAzC;AACA;;;6BAEUO,M,EAAQC,Q,EAAUC,Q,EAAU;AACtC,OAAIC,MAAM,IAAIC,MAAJ,CAAWJ,OAAOK,MAAlB,CAAV;;AAEA,QAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIN,OAAOK,MAA3B,EAAmCC,KAAK,CAAxC,EAA2C;AAC1C;AACA;AACA;AACA,QAAIA,KAAKN,OAAOK,MAAP,GAAgB,CAAzB,EAA4B;AAC3B;AACA;;AAED;AACA;AACA,QAAIE,OAAOX,KAAKY,KAAL,CAAW,KAAKC,UAAL,GAAkBT,OAAOU,WAAP,CAAmBJ,CAAnB,CAA7B,CAAX;;AAEA;AACAC,WAAOX,KAAKe,GAAL,CAAS,KAAT,EAAgBJ,IAAhB,CAAP;AACAA,WAAOX,KAAKgB,GAAL,CAAS,CAAC,KAAV,EAAiBL,IAAjB,CAAP;;AAEA;AACAJ,QAAIU,YAAJ,CAAiBN,IAAjB,EAAuBD,CAAvB;AACA;;AAED,QAAKQ,IAAL,CAAUX,GAAV;AACAD;AACA;;;sBAxDY;AACZ,UAAO,KAAKa,OAAL,KAAiBhB,SAAjB,GAA6B,CAA7B,GAAiC,KAAKgB,OAA7C;AACA,G;oBAEUpB,K,EAAO;AACjB,QAAKoB,OAAL,GAAepB,KAAf;AACA;;;sBAagB;AAChB,UAAO,KAAKF,MAAZ;AACA;;;;EA3BmBH,S;;AAiErB0B,OAAOC,OAAP,GAAiBzB,MAAjB","file":"VolumeTransformer.js","sourcesContent":["const Transform = require('stream').Transform;\n\n/**\n * @see https://github.com/reneraab/pcm-volume/blob/master/index.js Inspired by this script\n */\nclass Volume extends Transform {\n\tconstructor(volume) {\n\t\tsuper();\n\t\tthis.set(volume);\n\t}\n\n\tget volume() {\n\t\treturn this._volume === undefined ? 1 : this._volume;\n\t}\n\n\tset volume(value) {\n\t\tthis._volume = value;\n\t}\n\n\t// Set the volume so that a value of 0.5 is half the perceived volume and\n\t// 2.0 is double the perceived volume.\n\tsetVolumeLogarithmic(value) {\n\t\tthis.volume = Math.pow(value, 1.660964);\n\t}\n\n\t// Set the volume to a value specified as decibels.\n\tsetVolumeDecibels(db) {\n\t\tthis.volume = Math.pow(10, db / 20);\n\t}\n\n\tget multiplier() {\n\t\treturn this.volume;\n\t}\n\n\tget() {\n\t\treturn this.volume;\n\t}\n\n\tset(volume) {\n\t\tthis.volume = volume === undefined ? 1 : volume;\n\t}\n\n\t_transform(buffer, encoding, callback) {\n\t\tlet out = new Buffer(buffer.length);\n\n\t\tfor (let i = 0; i < buffer.length; i += 2) {\n\t\t\t// Check whether the index is actually in range - sometimes it's possible\n\t\t\t// that it skips ahead too far before the end condition of the for can\n\t\t\t// kick in.\n\t\t\tif (i >= buffer.length - 1) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Read Int16, multiple with multiplier and round down\n\t\t\t//console.log(this.volume, this.multiplier, buffer.readInt16LE(i));\n\t\t\tlet uint = Math.floor(this.multiplier * buffer.readInt16LE(i));\n\n\t\t\t// Ensure value stays within 16bit\n\t\t\tuint = Math.min(32767, uint);\n\t\t\tuint = Math.max(-32767, uint);\n\n\t\t\t// Write 2 new bytes into other buffer;\n\t\t\tout.writeInt16LE(uint, i);\n\t\t}\n\n\t\tthis.push(out);\n\t\tcallback();\n\t}\n}\n\nmodule.exports = Volume;\n"]}