{"version":3,"sources":["../../src/Client/InternalClient.js"],"names":["erlpack","require","console","log","error","zlib","GATEWAY_VERSION","waitFor","condition","value","interval","Promise","int","setInterval","isDone","resolve","clearInterval","delay","ms","setTimeout","InternalClient","discordClient","setupCalled","setup","method","url","useAuth","data","file","reject","promise","res","rej","buckets","match","channels","get","private_channels","server","id","user","bot","username","self","actualCall","startTime","Date","now","ret","set","token","attach","name","i","hasOwnProperty","undefined","field","send","userAgentInfo","full","end","status","client","emit","options","shard","body","done","bucket","queue","state","IDLE","websocket","userAgent","version","users","friends","blocked_users","outgoing_friend_requests","incoming_friend_requests","servers","unavailableServers","autoReconnectInterval","unsyncedGuilds","guildSyncQueue","guildSyncQueueLength","intervals","typing","kai","misc","voiceConnections","resolver","readyTime","messageAwaits","tokenCacher","init","concat","autoReconnect","cleanIntervals","forEach","leaveVoiceChannel","vc","Math","min","random","email","loginWithToken","password","catch","disconnected","chann","leave","connection","destroy","resolveChannel","then","channel","Error","type","msg","resolveMessage","awaitID","author","push","joinSendWS","sendWS","op","d","joinVoice","session","sessionID","endpoint","timeout","check","t","guild_id","chan","add","on","clearTimeout","removeListener","existingServerConn","length","serverID","chunkCount","forceFetchCount","forceFetchLength","requestGuildMembers","forceFetchQueue","query","limit","guildID","key","guildCreateTimeout","checkReady","region","resolveString","apiRequest","SERVERS","invite","resolveInviteID","INVITE","guild","resolveServer","newOptions","icon","resolveToBase64","splash","owner","resolveUser","owner_id","verificationLevel","verification_level","afkChannel","afk_channel_id","afkTimeout","afk_timeout","SERVER","srv","ME_SERVER","LOGGED_IN","getGateway","startsWith","createWS","login","tk","getToken","DISCONNECTED","LOGGING_IN","LOGIN","setToken","disconnect","close","LOGOUT","resUser","ME_CHANNELS","recipient_id","gatewayURL","GATEWAY","where","_content","String","basename","path","content","disableEveryone","replace","params","tts","nonce","embed","resolveFile","CHANNEL_MESSAGES","destination","messages","_file","_message","message","chain","wait","CHANNEL_MESSAGE","remove","_messages","Array","deleteMessage","map","m","update","_channel","qsObject","before","after","around","stringify","messageID","CHANNEL_PIN","pinned","CHANNEL_PINS","SERVER_BANS","ban","SERVER_CHANNELS","CHANNEL","resolvedUser","SERVER_MEMBERS","channel_id","voiceChannel","mute","deaf","nick","note","ME_NOTES","SERVER_ROLES","role","roles","updateRole","resolveRole","newData","color","hoist","position","permissions","mentionable","perm","member","isArray","r","some","memberMap","roleIDs","indexOf","roledata","rolesOf","item","splice","chanServ","validate","max_age","maxAge","max_uses","maxUses","temporary","xkcdpass","xkcd","CHANNEL_INVITES","has","res2","SERVER_INVITES","updated","allow","deny","previousOverwrite","permissionOverwrites","CHANNEL_PERMISSIONS","idleStatus","game","packet","idle_since","sendTyping","avatar","new_password","newPassword","ME","updateDetails","topic","updateChannel","userLimit","kbitrate","bitrate","user_limit","ceil","_bitrate","discriminator","FRIENDS","SERVER_WEBHOOKS","webhook","webhooks","CHANNEL_WEBHOOKS","resolveWebhook","WEBHOOK","slack","WEBHOOK_MESSAGE","appID","OAUTH2_APPLICATION","object","pack","JSON","endsWith","_inflate","receiveDecompressedPacket","bind","onopen","onclose","event","code","err","sequence","onerror","e","onmessage","onMessage","s","processPacket","heartbeatAcked","heartbeat","identify","resume","heartbeat_interval","RESUMED","READY","session_id","guilds","unavailable","syncGuild","forceFetchUsers","members","memberCount","getGuildMembers","pm","relationships","friend","notes","newUser","restartServerCreateTimeout","MESSAGE_CREATE","lastMessageID","fn","MESSAGE_DELETE","MESSAGE_DELETE_BULK","ids","MESSAGE_UPDATE","attachments","embeds","timestamp","mention_everyone","everyoneMentioned","mentions","nmsg","SERVER_CREATE","large","SERVER_DELETE","found","SERVER_UPDATE","newserver","equalsStrict","CHANNEL_CREATE","is_private","CHANNEL_DELETE","CHANNEL_UPDATE","SERVER_ROLE_CREATE","SERVER_ROLE_DELETE","role_id","SERVER_ROLE_UPDATE","newRole","SERVER_MEMBER_ADD","selfMute","selfDeaf","joinedAt","parse","joined_at","SERVER_MEMBER_REMOVE","SERVER_MEMBER_UPDATE","oldMember","self_mute","self_deaf","PRESENCE_UPDATE","presenceUser","USER_UPDATE","TYPING","user_id","since","SERVER_BAN_ADD","SERVER_BAN_REMOVE","USER_NOTE_UPDATE","oldNote","updatedUser","VOICE_STATE_UPDATE","eventVoiceStateUpdate","eventVoiceLeave","SERVER_MEMBERS_CHUNK","testtime","FRIEND_ADD","inUser","outUser","FRIEND_REMOVE","rejectedUser","incomingCancel","SERVER_SYNC","dataUser","internal","presences","presence","pendingVoiceStates","voiceState","eventVoiceJoin","seq","v","compress","large_threshold","largeThreshold","properties","process","platform","info"],"mappings":"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","file":"InternalClient.js","sourcesContent":["\"use strict\";\n\nimport request from \"superagent\";\nimport WebSocket from \"ws\";\nimport ConnectionState from \"./ConnectionState\";\nimport qs from \"querystring\";\n\nimport {Endpoints, PacketType, Permissions} from \"../Constants\";\n\nimport Bucket from \"../Util/Bucket\";\nimport Cache from \"../Util/Cache\";\nimport Resolver from \"./Resolver/Resolver\";\n\nimport User from \"../Structures/User\";\nimport Channel from \"../Structures/Channel\";\nimport ServerChannel from \"../Structures/ServerChannel\";\nimport TextChannel from \"../Structures/TextChannel\";\nimport VoiceChannel from \"../Structures/VoiceChannel\";\nimport PMChannel from \"../Structures/PMChannel\";\nimport Server from \"../Structures/Server\";\nimport Message from \"../Structures/Message\";\nimport Role from \"../Structures/Role\";\nimport Invite from \"../Structures/Invite\";\nimport Webhook from \"../Structures/Webhook\";\nimport VoiceConnection from \"../Voice/VoiceConnection\";\nimport TokenCacher from \"../Util/TokenCacher\";\nimport Unpacker from \"../Util/Unpacker\";\n\nlet erlpack = false;\ntry {\n  erlpack = require(\"erlpack\");\n  console.log(\"using erlpack\");\n} catch(error) {\n  console.log(\"erlpack failed to load, falling back to json, for performance reasons please consider installing erlpack\");\n  // no erlpack\n}\n\nlet zlib = require(\"zlib\");\n\nlet GATEWAY_VERSION = 6;\n// let libVersion = require('../../package.json').version;\n\nfunction waitFor(condition, value = condition, interval = 20) {\n  return new Promise(resolve => {\n    let int = setInterval(() => {\n      let isDone = condition();\n      if (isDone) {\n        if (condition === value) {\n          resolve(isDone);\n        } else {\n          resolve(value(isDone));\n        }\n        return clearInterval(int);\n      }\n    }, interval);\n  });\n}\n\nfunction delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport default class InternalClient {\n  constructor(discordClient) {\n    this.setupCalled = false;\n    this.setup(discordClient);\n  }\n\n  apiRequest(method, url, useAuth, data, file) {\n    let resolve, reject;\n    let promise = new Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n    let buckets = [];\n    let match = url.match(/\\/channels\\/([0-9]+)\\/messages(\\/[0-9]+)?$/);\n    if (match) {\n      if (method === \"del\" && (match[1] = this.channels.get(\"id\", match[1]) || this.private_channels.get(\"id\", match[1]))) {\n        buckets = [\"dmsg:\" + (match[1].server || {}).id];\n      } else if (this.user.bot) {\n        if (method === \"post\" || method === \"patch\") {\n          if (this.private_channels.get(\"id\", match[1])) {\n            buckets = [\"bot:msg:dm\", \"bot:msg:global\"];\n          } else if ((match[1] = this.channels.get(\"id\", match[1]))) {\n            buckets = [\"bot:msg:guild:\" + match[1].server.id, \"bot:msg:global\"];\n          }\n        }\n      } else {\n        buckets = [\"msg\"];\n      }\n    } else if (method === \"patch\") {\n      if (url === \"/users/@me\" && this.user && data.username && data.username !== this.user.username) {\n        buckets = [\"username\"];\n      } else if ((match = url.match(/\\/guilds\\/([0-9]+)\\/members\\/[0-9]+$/))) {\n        buckets = [\"guild_member:\" + match[1]];\n      } else if ((match = url.match(/\\/guilds\\/([0-9]+)\\/members\\/@me\\/nick$/))) {\n        buckets = [\"guild_member_nick:\" + match[1]];\n      }\n    }\n\n    let self = this;\n\n    let actualCall = function () {\n      let startTime = Date.now();\n      let ret = request[method](url);\n      if (useAuth) {\n        ret.set(\"authorization\", self.token);\n      }\n      if (file) {\n        ret.attach(\"file\", file.file, file.name);\n        if (data) {\n          for (let i in data) {\n            if (data.hasOwnProperty(i)) {\n              if (data[i] !== undefined) {\n                ret.field(i, data[i]);\n              }\n            }\n          }\n        }\n      } else if (data) {\n        ret.send(data);\n      }\n      ret.set('User-Agent', self.userAgentInfo.full);\n      ret.end((error, data) => {\n        if (error) {\n          if (data && data.status === 429) {\n            self.client.emit(\"debug\", \"Encountered 429 at \" + url + \" | \" + self.client.options.shard + \" | Buckets\" + buckets + \" | \" + (Date.now() - startTime) + \"ms latency\");\n          }\n          reject(error);\n        } else {\n          resolve(data.body);\n        }\n      });\n    };\n    let waitFor = 1;\n    let i = 0;\n    let done = function () {\n      if (++i === waitFor) {\n        actualCall();\n      }\n    };\n    for (let bucket of buckets) {\n      ++waitFor;\n      this.buckets[bucket].queue(done);\n    }\n    done();\n    return promise;\n  }\n\n  setup(discordClient) {\n    this.setupCalled = true;\n    discordClient = discordClient || this.client;\n    this.client = discordClient;\n    this.state = ConnectionState.IDLE;\n    this.websocket = null;\n    this.erlpack = discordClient.options.erlpack;\n    this.zlib = discordClient.options.zlib;\n    console.log(\"erlpack:\", this.erlpack, \" zlib:\", this.zlib);\n    this.userAgent = {\n      url: 'https://github.com/hydrabolt/discord.js',\n      version: require('../../package.json').version\n    };\n\n    // creates 4 caches with discriminators based on ID\n    this.users = new Cache();\n    this.friends = new Cache();\n    this.blocked_users = new Cache();\n    this.outgoing_friend_requests = new Cache();\n    this.incoming_friend_requests = new Cache();\n    this.channels = new Cache();\n    this.servers = new Cache();\n    this.unavailableServers = new Cache();\n    this.private_channels = new Cache();\n    this.autoReconnectInterval = 1000;\n    this.unsyncedGuilds = 0;\n    this.guildSyncQueue = [];\n    this.guildSyncQueueLength = 1;\n\n    this.intervals = {\n      typing: [],\n      kai: null,\n      misc: []\n    };\n\n    this.voiceConnections = new Cache();\n    this.resolver = new Resolver(this);\n    this.readyTime = null;\n    this.messageAwaits = {};\n    this.buckets = {\n      \"bot:msg:dm\": new Bucket(5, 5000),\n      \"bot:msg:global\": new Bucket(50, 10000),\n      \"msg\": new Bucket(10, 10000),\n      \"dmsg:undefined\": new Bucket(5, 1000),\n      \"username\": new Bucket(2, 3600000)\n    };\n\n    if (!this.tokenCacher) {\n      this.tokenCacher = new TokenCacher(this.client);\n      this.tokenCacher.init(0);\n    }\n  }\n\n  cleanIntervals() {\n    for (let interval of this.intervals.typing.concat(this.intervals.misc).concat(this.intervals.kai)) {\n      if (interval) {\n        clearInterval(interval);\n      }\n    }\n  }\n\n  disconnected(autoReconnect = false) {\n\n    this.cleanIntervals();\n\n    this.voiceConnections.forEach(vc => {\n      this.leaveVoiceChannel(vc);\n    });\n\n    if (autoReconnect) {\n      this.autoReconnectInterval = Math.min(this.autoReconnectInterval * (Math.random() + 1), 60000);\n      setTimeout(() => {\n        if (!this.email && !this.token) {\n          return;\n        }\n\n        // Check whether the email is set (if not, only a token has been used for login)\n        this.loginWithToken(this.token, this.email, this.password).catch(() => this.disconnected(true));\n      }, this.autoReconnectInterval);\n    }\n\n    this.client.emit(\"disconnected\");\n  }\n\n  get uptime() {\n    return (this.readyTime ? Date.now() - this.readyTime : null);\n  }\n\n  set userAgent(info) {\n    info.full = `DiscordBot (${info.url}, ${info.version})`;\n    this.userAgentInfo = info;\n  }\n\n  get userAgent() {\n    return this.userAgentInfo;\n  }\n\n  //def leaveVoiceChannel\n  leaveVoiceChannel(chann) {\n    if (this.user.bot) {\n      let leave = (connection) => {\n        return new Promise((resolve) => {\n          connection.destroy();\n          resolve();\n        });\n      };\n\n      if (chann instanceof VoiceChannel) {\n        return this.resolver.resolveChannel(chann).then(channel => {\n          if (!channel) {\n            return Promise.reject(new Error(\"voice channel does not exist\"));\n          }\n\n          if (channel.type !== 2) {\n            return Promise.reject(new Error(\"channel is not a voice channel!\"));\n          }\n\n          let connection = this.voiceConnections.get(\"voiceChannel\", channel);\n          if (!connection) {\n            return Promise.reject(new Error(\"not connected to that voice channel\"));\n          }\n          return leave(connection);\n        });\n      } else if (chann instanceof VoiceConnection) {\n        return leave(chann);\n      } else {\n        return Promise.reject(new Error(\"invalid voice channel/connection to leave\"))\n      }\n    } else {\n      // preserve old functionality for non-bots\n      if (this.voiceConnections[0]) {\n        this.voiceConnections[0].destroy();\n      }\n      return Promise.resolve();\n    }\n  }\n\n  //def awaitResponse\n  awaitResponse(msg) {\n    return new Promise((resolve, reject) => {\n\n      msg = this.resolver.resolveMessage(msg);\n\n      if (!msg) {\n        reject(new Error(\"message undefined\"));\n        return;\n      }\n\n      let awaitID = msg.channel.id + msg.author.id;\n\n      if (!this.messageAwaits[awaitID]) {\n        this.messageAwaits[awaitID] = [];\n      }\n\n      this.messageAwaits[awaitID].push(resolve);\n    });\n  }\n\n  //def joinVoiceChannel\n  joinVoiceChannel(chann) {\n    return this.resolver.resolveChannel(chann).then(channel => {\n      if (!channel) {\n        return Promise.reject(new Error(\"voice channel does not exist\"));\n      }\n\n      if (channel.type !== 2) {\n        return Promise.reject(new Error(\"channel is not a voice channel!\"));\n      }\n\n      let joinSendWS = () => {\n        this.sendWS({\n          op: 4,\n          d: {\n            \"guild_id\": channel.server.id,\n            \"channel_id\": channel.id,\n            \"self_mute\": false,\n            \"self_deaf\": false\n          }\n        });\n      };\n\n      let joinVoice = () => {\n        return new Promise((resolve, reject) => {\n          let session = this.sessionID, token, server = channel.server, endpoint;\n\n          let timeout = null;\n\n          let check = data => {\n            if (data.t === \"VOICE_SERVER_UPDATE\") {\n              if (data.d.guild_id !== server.id) return; // ensure it is the right server\n              token = data.d.token;\n              endpoint = data.d.endpoint;\n              if (!token || !endpoint) return;\n              let chan = new VoiceConnection(\n                channel, this.client, session, token, server, endpoint\n              );\n              this.voiceConnections.add(chan);\n\n              chan.on(\"ready\", () => resolve(chan));\n              chan.on(\"error\", reject);\n              chan.on(\"close\", reject);\n\n              if (timeout) {\n                clearTimeout(timeout);\n              }\n              this.client.removeListener(\"raw\", check);\n            }\n          };\n\n          timeout = setTimeout(() => {\n            this.client.removeListener(\"raw\", check);\n            reject(new Error(\"No voice server details within 10 seconds\"));\n          }, 10000);\n\n          this.client.on(\"raw\", check);\n          joinSendWS();\n        });\n      };\n\n      let existingServerConn = this.voiceConnections.get(\"server\", channel.server); // same server connection\n      if (existingServerConn) {\n        joinSendWS(); // Just needs to update by sending via WS, movement in cache will be handled by global handler\n        return Promise.resolve(existingServerConn);\n      }\n\n      if (!this.user.bot && this.voiceConnections.length > 0) { // nonbot, one voiceconn only, just like last time just disconnect\n        return this.leaveVoiceChannel().then(joinVoice);\n      }\n\n      return joinVoice();\n    });\n  }\n\n  // Backwards-compatible utility getter method for the first voice connection\n  // Thanks to #q (@qeled) for suggesting this\n  get voiceConnection() {\n    return this.voiceConnections[0];\n  }\n\n  getGuildMembers(serverID, chunkCount) {\n    this.forceFetchCount[serverID] = chunkCount;\n    if (this.forceFetchLength + 3 + serverID.length > 4000) { // 4096 max, '{\"op\":8,\"d\":{\"guild_id\":[],\"query\":\"\",\"limit\":0}}'.length = 49 plus some leeway\n      this.requestGuildMembers(this.forceFetchQueue);\n      this.forceFetchQueue = [serverID];\n      this.forceFetchLength = 1 + serverID.length + 3;\n    } else {\n      this.forceFetchQueue.push(serverID);\n      this.forceFetchLength += serverID.length + 3;\n    }\n  }\n\n  requestGuildMembers(serverID, query, limit) {\n    this.sendWS({\n      op: 8,\n      d: {\n        guild_id: serverID,\n        query: query || \"\",\n        limit: limit || 0\n      }\n    });\n  }\n\n  syncGuild(guildID) {\n    if (this.guildSyncQueueLength + 3 + guildID.length > 4050) { // 4096 max, '{\"op\":12,\"d\":[]}'.length = 16 plus some leeway\n      this.sendWS({op: 12, d: this.guildSyncQueue});\n      this.guildSyncQueue = [guildID];\n      this.guildSyncQueueLength = 1 + guildID.length + 3;\n    } else {\n      this.guildSyncQueue.push(guildID);\n      this.guildSyncQueueLength += guildID.length + 3;\n    }\n  }\n\n  checkReady() {\n    if (!this.readyTime) {\n      if (this.guildSyncQueue.length > 0) {\n        this.sendWS({op: 12, d: this.guildSyncQueue});\n        this.guildSyncQueue = [];\n        this.guildSyncQueueLength = 1;\n        return;\n      }\n      if (this.unsyncedGuilds > 0) {\n        return;\n      }\n      if (this.forceFetchQueue.length > 0) {\n        this.requestGuildMembers(this.forceFetchQueue);\n        this.forceFetchQueue = [];\n        this.forceFetchLength = 1;\n      } else {\n        for (let key in this.forceFetchCount) {\n          if (this.forceFetchCount.hasOwnProperty(key)) {\n            return;\n          }\n        }\n        this.readyTime = Date.now();\n        this.client.emit(\"ready\");\n      }\n    }\n  }\n\n  restartServerCreateTimeout() {\n    if (this.guildCreateTimeout) {\n      clearTimeout(this.guildCreateTimeout);\n      this.guildCreateTimeout = null;\n    }\n    if (!this.readyTime) {\n      this.guildCreateTimeout = setTimeout(() => {\n        this.checkReady();\n      }, this.client.options.guildCreateTimeout);\n    }\n  }\n\n  // def createServer\n  createServer(name, region = \"london\") {\n    name = this.resolver.resolveString(name);\n\n    return this.apiRequest('post', Endpoints.SERVERS, true, {name, region})\n      .then(res => {\n        // valid server, wait until it is cached\n        return waitFor(() => this.servers.get(\"id\", res.id));\n      });\n  }\n\n  //def joinServer\n  joinServer(invite) {\n    invite = this.resolver.resolveInviteID(invite);\n    if (!invite) {\n      return Promise.reject(new Error(\"Not a valid invite\"));\n    }\n\n    return this.apiRequest(\"post\", Endpoints.INVITE(invite), true)\n      .then(res => {\n        // valid server, wait until it is received via ws and cached\n        return waitFor(() => this.servers.get(\"id\", res.guild.id));\n      });\n  }\n\n  //def updateServer\n  updateServer(server, options) {\n    server = this.resolver.resolveServer(server);\n    if (!server) {\n      return Promise.reject(new Error(\"server did not resolve\"));\n    }\n\n    let newOptions = {\n      name: options.name || server.name,\n      region: options.region || server.region\n    };\n\n    if (options.icon) {\n      newOptions.icon = this.resolver.resolveToBase64(options.icon);\n    }\n    if (options.splash) {\n      newOptions.splash = this.resolver.resolveToBase64(options.splash);\n    }\n    if (options.owner) {\n      let user = this.resolver.resolveUser(options.owner);\n      if (!user) {\n        return Promise.reject(new Error(\"owner could not be resolved\"));\n      }\n      options.owner_id = user.id;\n    }\n    if (options.verificationLevel) {\n      options.verification_level = user.verificationLevel;\n    }\n    if (options.afkChannel) {\n      let channel = this.resolver.resolveUser(options.afkChannel);\n      if (!channel) {\n        return Promise.reject(new Error(\"afkChannel could not be resolved\"));\n      }\n      options.afk_channel_id = channel.id;\n    }\n    if (options.afkTimeout) {\n      options.afk_timeout = options.afkTimeout;\n    }\n\n    return this.apiRequest(\"patch\", Endpoints.SERVER(server.id), true, options)\n      .then(res => {\n        // wait until the name and region are updated\n        return waitFor(() =>\n          (this.servers.get(\"name\", res.name) ? ((this.servers.get(\"name\", res.name).region === res.region) ? this.servers.get(\"id\", res.id) : false) : false));\n      });\n  }\n\n  //def leaveServer\n  leaveServer(srv) {\n    let server = this.resolver.resolveServer(srv);\n    if (!server) {\n      return Promise.reject(new Error(\"server did not resolve\"));\n    }\n\n    return this.apiRequest(\"del\", Endpoints.ME_SERVER(server.id), true);\n  }\n\n  //def deleteServer\n  deleteServer(srv) {\n    let server = this.resolver.resolveServer(srv);\n    if (!server) {\n      return Promise.reject(new Error(\"server did not resolve\"));\n    }\n\n    return this.apiRequest(\"del\", Endpoints.SERVER(server.id), true);\n  }\n\n  // def loginWithToken\n  // email and password are optional\n  loginWithToken(token, email, password) {\n    if (!this.setupCalled) {\n      this.setup();\n    }\n\n    this.state = ConnectionState.LOGGED_IN;\n    this.token = token;\n    this.email = email;\n    this.password = password;\n\n    let self = this;\n    return this.getGateway()\n      .then(url => {\n        self.token = self.client.options.bot && !self.token.startsWith(\"Bot \") ? `Bot ${self.token}` : self.token;\n        self.createWS(url);\n        return self.token;\n      });\n  }\n\n  // def login\n  login(email, password) {\n    let client = this.client;\n\n    if (!this.tokenCacher.done) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.login(email, password).then(resolve).catch(reject);\n        }, 20);\n      });\n    } else {\n      let tk = this.tokenCacher.getToken(email, password);\n      if (tk) {\n        this.client.emit(\"debug\", \"bypassed direct API login, used cached token\");\n        return this.loginWithToken(tk, email, password);\n      }\n    }\n\n    if (this.state !== ConnectionState.DISCONNECTED && this.state !== ConnectionState.IDLE) {\n      return Promise.reject(new Error(\"already logging in/logged in/ready!\"));\n    }\n\n    this.state = ConnectionState.LOGGING_IN;\n\n    return this.apiRequest(\"post\", Endpoints.LOGIN, false, {\n      email,\n      password\n    })\n      .then(res => {\n        this.client.emit(\"debug\", \"direct API login, cached token was unavailable\");\n        let token = res.token;\n        this.tokenCacher.setToken(email, password, token);\n        return this.loginWithToken(token, email, password);\n      }, error => {\n        this.websocket = null;\n        throw error;\n      })\n      .catch(error => {\n        this.websocket = null;\n        this.state = ConnectionState.DISCONNECTED;\n        client.emit(\"disconnected\");\n        throw error;\n      });\n  }\n\n  // def logout\n  logout() {\n    if (this.state === ConnectionState.DISCONNECTED || this.state === ConnectionState.IDLE) {\n      return Promise.reject(new Error(\"Client is not logged in!\"));\n    }\n\n    let disconnect = () => {\n      if (this.websocket) {\n        this.websocket.close(1000);\n        this.websocket = null;\n      }\n      this.token = null;\n      this.email = null;\n      this.password = null;\n      this.state = ConnectionState.DISCONNECTED;\n      return Promise.resolve();\n    };\n\n    if (!this.user.bot) {\n      return this.apiRequest(\"post\", Endpoints.LOGOUT, true)\n        .then(disconnect);\n    } else {\n      return disconnect();\n    }\n  }\n\n  // def startPM\n  startPM(resUser) {\n    let user = this.resolver.resolveUser(resUser);\n    if (!user) {\n      return Promise.reject(new Error(\"Unable to resolve resUser to a User\"));\n    }\n    // start the PM\n    return this.apiRequest(\"post\", Endpoints.ME_CHANNELS, true, {\n      recipient_id: user.id\n    })\n      .then(res => {\n        return this.private_channels.add(new PMChannel(res, this.client));\n      });\n  }\n\n  // def getGateway\n  getGateway() {\n    if (this.gatewayURL) {\n      return Promise.resolve(this.gatewayURL);\n    }\n    return this.apiRequest(\"get\", Endpoints.GATEWAY, true)\n      .then(res => this.gatewayURL = res.url);\n  }\n\n  // def sendMessage\n  sendMessage(where, _content, options = {}) {\n    if (options.file) {\n      if (typeof options.file !== \"object\") {\n        options.file = {\n          file: options.file\n        };\n      }\n      if (!options.file.name) {\n        if (options.file.file instanceof String || typeof options.file.file === \"string\") {\n          options.file.name = require(\"path\").basename(options.file.file);\n        } else if (options.file.file.path) {\n          // fs.createReadStream()'s have .path that give the path. Not sure about other streams though.\n          options.file.name = require(\"path\").basename(options.file.file.path);\n        } else {\n          options.file.name = \"default.png\"; // Just have to go with default filenames.\n        }\n      }\n    }\n\n    return this.resolver.resolveChannel(where)\n      .then(destination => {\n        let content = this.resolver.resolveString(_content);\n\n        if (this.client.options.disableEveryone || options.disableEveryone) {\n          content = content.replace(/(@)(everyone|here)/g, '$1\\u200b$2');\n        }\n\n        let params = {\n          content: content,\n          tts: options.tts,\n          nonce: options.nonce\n        };\n\n        if (options.embed) {\n          params.embed = options.embed;\n        }\n\n        if (options.file) {\n          return this.resolver.resolveFile(options.file.file)\n            .then(file =>\n              this.apiRequest(\"post\", Endpoints.CHANNEL_MESSAGES(destination.id), true, params, {\n                name: options.file.name,\n                file: file\n              }).then(res => destination.messages.add(new Message(res, destination, this.client)))\n            )\n        } else {\n          return this.apiRequest(\"post\", Endpoints.CHANNEL_MESSAGES(destination.id), true, params)\n            .then(res => destination.messages.add(new Message(res, destination, this.client)));\n        }\n      });\n\n  }\n\n  // def sendFile\n  sendFile(where, _file, name, content) {\n    if (!name) {\n      if (_file instanceof String || typeof _file === \"string\") {\n        name = require(\"path\").basename(_file);\n      } else if (_file && _file.path) {\n        // fs.createReadStream()'s have .path that give the path. Not sure about other streams though.\n        name = require(\"path\").basename(_file.path);\n      } else {\n        name = \"default.png\"; // Just have to go with default filenames.\n      }\n    }\n\n    if (content) {\n      content = {\n        content: this.resolver.resolveString(content)\n      };\n      if (this.client.options.disableEveryone) {\n        content.content = content.content.replace(/(@)(everyone|here)/g, '$1\\u200b$2');\n      }\n    }\n\n    return this.resolver.resolveChannel(where)\n      .then(channel =>\n        this.resolver.resolveFile(_file)\n          .then(file =>\n            this.apiRequest(\"post\", Endpoints.CHANNEL_MESSAGES(channel.id), true, content, {\n              name,\n              file\n            }).then(res => channel.messages.add(new Message(res, channel, this.client)))\n          )\n      );\n  }\n\n  // def deleteMessage\n  deleteMessage(_message, options = {}) {\n\n    let message = this.resolver.resolveMessage(_message);\n    if (!message) {\n      return Promise.reject(new Error(\"Supplied message did not resolve to a message!\"));\n    }\n\n    let chain = options.wait ? delay(options.wait) : Promise.resolve();\n    return chain.then(() =>\n      this.apiRequest(\"del\", Endpoints.CHANNEL_MESSAGE(message.channel.id, message.id), true)\n    )\n      .then(() => message.channel.messages.remove(message));\n  }\n\n  // def deleteMessages\n  deleteMessages(_messages) {\n    if (!_messages instanceof Array)\n      return Promise.reject(new Error(\"Messages provided must be in an array\"));\n    if (_messages.length < 1)\n      return Promise.reject(new Error(\"You must provide at least one message to delete\"));\n    else if (_messages.length === 1)\n      return this.deleteMessage(_messages[0]);\n\n\n    let messages = [];\n    let channel;\n    let message;\n    for (let _message of _messages) {\n      message = this.resolver.resolveMessage(_message);\n      if (!message)\n        return Promise.reject(new Error(\"Something other than a message could not be resolved in the array...\"));\n      if (!message.server)\n        return Promise.reject(new Error(\"You can only bulk delete messages on guild channels\"));\n\n      // ensure same channel\n      if (!channel) {\n        channel = message.channel;\n      } else {\n        //noinspection JSUnusedAssignment\n        if (message.channel.id !== channel.id)\n          return Promise.reject(new Error(\"You can only bulk delete messages from the same channel at one time...\"));\n      }\n\n      messages.push(message);\n    }\n\n    return this.apiRequest(\"post\", `${Endpoints.CHANNEL_MESSAGES(channel.id)}/bulk_delete`, true, {\n      messages: messages.map(m => m.id)\n    })\n      .then(() => messages.forEach(m => channel.messages.remove(m)));\n  }\n\n  // def updateMessage\n  updateMessage(msg, _content, options = {}) {\n\n    let message = this.resolver.resolveMessage(msg);\n\n    if (!message) {\n      return Promise.reject(new Error(\"Supplied message did not resolve to a message!\"));\n    }\n\n    let content = this.resolver.resolveString(_content);\n\n    let params = {\n      content: content,\n      tts: options.tts\n    };\n\n    if (options.embed) {\n      params.embed = options.embed;\n    }\n\n    return this.apiRequest(\n      \"patch\",\n      Endpoints.CHANNEL_MESSAGE(message.channel.id, message.id),\n      true,\n      params\n    )\n      .then(res => message.channel.messages.update(\n        message,\n        new Message(res, message.channel, this.client)\n      ));\n  }\n\n  // def getChannelLogs\n  getChannelLogs(_channel, limit = 50, options = {}) {\n    return this.resolver.resolveChannel(_channel)\n      .then(channel => {\n        let qsObject = {limit};\n        if (options.before) {\n          const res = this.resolver.resolveMessage(options.before);\n          if (res) {\n            qsObject.before = res.id;\n          }\n        }\n        if (options.after) {\n          const res = this.resolver.resolveMessage(options.after);\n          if (res) {\n            qsObject.after = res.id;\n          }\n        }\n        if (options.around) {\n          const res = this.resolver.resolveMessage(options.around);\n          if (res) {\n            qsObject.around = res.id\n          }\n        }\n\n        return this.apiRequest(\n          \"get\",\n          `${Endpoints.CHANNEL_MESSAGES(channel.id)}?${qs.stringify(qsObject)}`,\n          true\n        )\n          .then(res => res.map(\n            msg => channel.messages.add(new Message(msg, channel, this.client))\n          ));\n      });\n  }\n\n  // def getMessage\n  getMessage(_channel, messageID) {\n    return this.resolver.resolveChannel(_channel)\n      .then(channel => {\n        if (!this.user.bot) {\n          return Promise.reject(new Error(\"Only OAuth bot accounts can use this function\"));\n        }\n\n        if (!(channel instanceof TextChannel || channel instanceof PMChannel)) {\n          return Promise.reject(new Error(\"Provided channel is not a Text or PMChannel\"));\n        }\n\n        let msg = channel.messages.get(\"id\", messageID);\n        if (msg) {\n          return Promise.resolve(msg);\n        }\n\n        return this.apiRequest(\n          \"get\",\n          `${Endpoints.CHANNEL_MESSAGES(channel.id)}/${messageID}`,\n          true\n        )\n          .then(res => channel.messages.add(\n            new Message(res, channel, this.client)\n          ));\n      });\n  }\n\n  // def pinMessage\n  pinMessage(msg) {\n    let message = this.resolver.resolveMessage(msg);\n\n    if (!message) {\n      return Promise.reject(new Error(\"Supplied message did not resolve to a message\"));\n    }\n\n    return this.apiRequest(\n      \"put\",\n      `${Endpoints.CHANNEL_PIN(msg.channel.id, msg.id)}`,\n      true\n    );\n  }\n\n  // def unpinMessage\n  unpinMessage(msg) {\n    let message = this.resolver.resolveMessage(msg);\n\n    if (!message) {\n      return Promise.reject(new Error(\"Supplied message did not resolve to a message\"));\n    }\n\n    if (!message.pinned) {\n      return Promise.reject(new Error(\"Supplied message is not pinned\"));\n    }\n\n    return this.apiRequest(\n      \"del\",\n      `${Endpoints.CHANNEL_PIN(msg.channel.id, msg.id)}`,\n      true\n    );\n  }\n\n  // def getPinnedMessages\n  getPinnedMessages(_channel) {\n    return this.resolver.resolveChannel(_channel)\n      .then(channel => {\n        return this.apiRequest(\n          \"get\",\n          `${Endpoints.CHANNEL_PINS(channel.id)}`,\n          true\n        )\n          .then(res => res.map(\n            msg => channel.messages.add(new Message(msg, channel, this.client))\n          ));\n      });\n  }\n\n  // def getBans\n  getBans(server) {\n    server = this.resolver.resolveServer(server);\n\n    return this.apiRequest(\"get\", Endpoints.SERVER_BANS(server.id), true)\n      .then(res => res.map(\n        ban => this.users.add(new User(ban.user, this.client))\n      ));\n  }\n\n  // def createChannel\n  createChannel(server, name, type = 0) {\n\n    server = this.resolver.resolveServer(server);\n\n    return this.apiRequest(\"post\", Endpoints.SERVER_CHANNELS(server.id), true, {\n      name,\n      type\n    })\n      .then(res => {\n        let channel;\n        if (res.type === 0) {\n          channel = new TextChannel(res, this.client, server);\n        } else {\n          channel = new VoiceChannel(res, this.client, server);\n        }\n        return server.channels.add(this.channels.add(channel));\n      });\n  }\n\n  // def deleteChannel\n  deleteChannel(_channel) {\n\n    return this.resolver.resolveChannel(_channel)\n      .then(channel =>\n        this.apiRequest(\"del\", Endpoints.CHANNEL(channel.id), true)\n          .then(() => {\n            if (channel.server) {\n              channel.server.channels.remove(channel);\n              this.channels.remove(channel);\n            } else {\n              this.private_channels.remove(channel);\n            }\n          })\n      );\n  }\n\n  // def banMember\n  banMember(user, server, length = 1) {\n    let resolvedUser = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n\n    if (resolvedUser === null && typeof user === \"string\") {\n      user = {id: user};\n    } else {\n      user = resolvedUser;\n    }\n\n    return this.apiRequest(\n      \"put\",\n      `${Endpoints.SERVER_BANS(server.id)}/${user.id}?delete-message-days=${length}`,\n      true\n    );\n  }\n\n  // def unbanMember\n  unbanMember(user, server) {\n\n    server = this.resolver.resolveServer(server);\n    let resolvedUser = this.resolver.resolveUser(user);\n\n    if (resolvedUser === null && typeof user === \"string\") {\n      user = {id: user};\n    } else {\n      user = resolvedUser;\n    }\n\n    return this.apiRequest(\"del\", `${Endpoints.SERVER_BANS(server.id)}/${user.id}`, true)\n  }\n\n  // def kickMember\n  kickMember(user, server) {\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n\n    return this.apiRequest(\"del\", `${Endpoints.SERVER_MEMBERS(server.id) }/${user.id}`, true);\n  }\n\n  // def moveMember\n  moveMember(user, channel) {\n    user = this.resolver.resolveUser(user);\n    return this.resolver.resolveChannel(channel).then(channel => {\n      let server = channel.server;\n\n      // Make sure `channel` is a voice channel\n      if (channel.type !== 2) {\n        throw new Error(\"Can't moveMember into a non-voice channel\");\n      } else {\n        return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, {channel_id: channel.id})\n          .then(res => {\n            user.voiceChannel = channel;\n            return res;\n          });\n      }\n    });\n  }\n\n  // def muteMember\n  muteMember(user, server) {\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, {mute: true});\n  }\n\n  // def unmuteMember\n  unmuteMember(user, server) {\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, {mute: false});\n  }\n\n  // def deafenMember\n  deafenMember(user, server) {\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, {deaf: true});\n  }\n\n  // def undeafenMember\n  undeafenMember(user, server) {\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, {deaf: false});\n  }\n\n  // def setNickname\n  setNickname(server, nick, user) {\n    nick = nick || \"\";\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id === this.user.id ? \"@me/nick\" : user.id}`, true, {nick: nick});\n  }\n\n  //def setNote\n  setNote(user, note) {\n    user = this.resolver.resolveUser(user);\n    note = note || \"\";\n\n    if (!user) {\n      return Promise.reject(new Error(\"Failed to resolve user\"));\n    }\n\n    return this.apiRequest(\"put\", `${Endpoints.ME_NOTES}/${user.id}`, true, {note: note});\n  }\n\n  // def createRole\n  createRole(server, data) {\n    server = this.resolver.resolveServer(server);\n\n    return this.apiRequest(\"post\", Endpoints.SERVER_ROLES(server.id), true)\n      .then(res => {\n        let role = server.roles.add(new Role(res, server, this.client));\n\n        if (data) {\n          return this.updateRole(role, data);\n        }\n        return role;\n      });\n  }\n\n  // def updateRole\n  updateRole(role, data) {\n\n    role = this.resolver.resolveRole(role);\n    let server = this.resolver.resolveServer(role.server);\n\n    let newData = {\n      color: \"color\" in data ? data.color : role.color,\n      hoist: \"hoist\" in data ? data.hoist : role.hoist,\n      name: \"name\" in data ? data.name : role.name,\n      position: \"position\" in data ? data.position : role.position,\n      permissions: \"permissions\" in data ? data.permissions : role.permissions,\n      mentionable: \"mentionable\" in data ? data.mentionable : role.mentionable\n    };\n\n    if (data.permissions) {\n      newData.permissions = 0;\n      for (let perm of data.permissions) {\n        if (perm instanceof String || typeof perm === \"string\") {\n          newData.permissions |= (Permissions[perm] || 0);\n        } else {\n          newData.permissions |= perm;\n        }\n      }\n    }\n\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_ROLES(server.id)}/${role.id}`, true, newData)\n      .then(res => {\n        return server.roles.update(role, new Role(res, server, this.client));\n      });\n  }\n\n  // def deleteRole\n  deleteRole(role) {\n    if (role.server.id === role.id) {\n      return Promise.reject(new Error(\"Stop trying to delete the @everyone role. It is futile\"));\n    } else {\n      return this.apiRequest(\"del\", `${Endpoints.SERVER_ROLES(role.server.id)}/${role.id}`, true);\n    }\n  }\n\n  //def addMemberToRole\n  addMemberToRole(member, roles) {\n    member = this.resolver.resolveUser(member);\n\n    if (!member) {\n      return Promise.reject(new Error(\"user not found\"));\n    }\n\n    if (!Array.isArray(roles) || roles.length === 0) {\n      roles = this.resolver.resolveRole(roles);\n      if (roles) {\n        roles = [roles];\n      } else {\n        return Promise.reject(new Error(\"invalid array of roles\"));\n      }\n    } else {\n      roles = roles.map(r => this.resolver.resolveRole(r));\n    }\n\n    if (roles.some(role => !role.server.memberMap[member.id])) {\n      return Promise.reject(new Error(\"Role does not exist on same server as member\"));\n    }\n\n    let roleIDs = roles[0].server.memberMap[member.id].roles.map(r => (r && r.id) || r);\n\n    for (let i = 0; i < roles.length; i++) {\n      if (!~roleIDs.indexOf(roles[i].id)) {\n        roleIDs.push(roles[i].id);\n      }\n    }\n\n    return this.apiRequest(\n      \"patch\",\n      `${Endpoints.SERVER_MEMBERS(roles[0].server.id)}/${member.id}`,\n      true,\n      {\n        roles: roleIDs\n      }\n    );\n  }\n\n  memberHasRole(member, role) {\n    role = this.resolver.resolveRole(role);\n    member = this.resolver.resolveUser(member);\n\n    if (!role) {\n      throw new Error(\"invalid role\");\n    }\n    if (!member) {\n      throw new Error(\"user not found\");\n    }\n\n    let roledata = role.server.rolesOf(member);\n    if (roledata) {\n      for (let r of roledata) {\n        if (r.id == role.id) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  //def removeMemberFromRole\n  removeMemberFromRole(member, roles) {\n    member = this.resolver.resolveUser(member);\n\n    if (!member) {\n      return Promise.reject(new Error(\"user not found\"));\n    }\n\n    if (!Array.isArray(roles) || roles.length === 0) {\n      roles = this.resolver.resolveRole(roles);\n      if (roles) {\n        roles = [roles];\n      } else {\n        return Promise.reject(new Error(\"invalid array of roles\"));\n      }\n    } else {\n      roles = roles.map(r => this.resolver.resolveRole(r));\n    }\n\n    let roleIDs = roles[0].server.memberMap[member.id].roles.map(r => (r && r.id) || r);\n\n    for (let role of roles) {\n      if (!role.server.memberMap[member.id]) {\n        return Promise.reject(new Error(\"member not in server\"));\n      }\n      for (let item in roleIDs) {\n        if (roleIDs.hasOwnProperty(item)) {\n          if (roleIDs[item] === role.id) {\n            roleIDs.splice(item, 1);\n            break;\n          }\n        }\n      }\n    }\n\n    return this.apiRequest(\n      \"patch\",\n      `${Endpoints.SERVER_MEMBERS(roles[0].server.id)}/${member.id}`,\n      true,\n      {\n        roles: roleIDs\n      }\n    );\n  }\n\n  // def createInvite\n  createInvite(chanServ, options) {\n    return this.resolver.resolveChannel(chanServ)\n      .then(channel => {\n        if (!options) {\n          options = {\n            validate: null\n          };\n        } else {\n          options.max_age = options.maxAge || 0;\n          options.max_uses = options.maxUses || 0;\n          options.temporary = options.temporary || false;\n          options.xkcdpass = options.xkcd || false;\n        }\n\n        return this.apiRequest(\"post\", Endpoints.CHANNEL_INVITES(channel.id), true, options)\n          .then(res => new Invite(res, this.channels.get(\"id\", res.channel.id), this.client));\n      });\n  }\n\n  //def deleteInvite\n  deleteInvite(invite) {\n    invite = this.resolver.resolveInviteID(invite);\n    if (!invite) {\n      throw new Error(\"Not a valid invite\");\n    }\n    return this.apiRequest(\"del\", Endpoints.INVITE(invite), true);\n  }\n\n  //def getInvite\n  getInvite(invite) {\n    invite = this.resolver.resolveInviteID(invite);\n    if (!invite) {\n      return Promise.reject(new Error(\"Not a valid invite\"));\n    }\n\n    return this.apiRequest(\"get\", Endpoints.INVITE(invite), true)\n      .then(res => {\n        if (!this.channels.has(\"id\", res.channel.id)) {\n          return new Invite(res, null, this.client);\n        }\n        return this.apiRequest(\"post\", Endpoints.CHANNEL_INVITES(res.channel.id), true, {validate: invite})\n          .then(res2 => new Invite(res2, this.channels.get(\"id\", res.channel.id), this.client));\n      });\n  }\n\n  //def getInvites\n  getInvites(channel) {\n    if (!(channel instanceof Channel)) {\n      let server = this.resolver.resolveServer(channel);\n      if (server) {\n        return this.apiRequest(\"get\", Endpoints.SERVER_INVITES(server.id), true)\n          .then(res => {\n            return res.map(data => new Invite(data, this.channels.get(\"id\", data.channel.id), this.client));\n          });\n      }\n    }\n    return this.resolver.resolveChannel(channel)\n      .then(channel => {\n        return this.apiRequest(\"get\", Endpoints.CHANNEL_INVITES(channel.id), true)\n          .then(res => {\n            return res.map(data => new Invite(data, this.channels.get(\"id\", data.channel.id), this.client));\n          });\n      });\n  }\n\n  //def overwritePermissions\n  overwritePermissions(channel, role, updated) {\n    return this.resolver.resolveChannel(channel)\n      .then(channel => {\n        if (!channel instanceof ServerChannel) {\n          return Promise.reject(new Error(\"Not a server channel\"));\n        }\n\n        let data = {\n          allow: 0,\n          deny: 0\n        };\n\n        if (role instanceof String || typeof role === \"string\") {\n          role = this.resolver.resolveUser(role) || this.resolver.resolveRole(role);\n        }\n\n        if (role instanceof User) {\n          data.id = role.id;\n          data.type = \"member\";\n        } else if (role instanceof Role) {\n          data.id = role.id;\n          data.type = \"role\";\n        } else {\n          return Promise.reject(new Error(\"Role could not be resolved\"));\n        }\n\n        let previousOverwrite = channel.permissionOverwrites.get(\"id\", data.id);\n\n        if (previousOverwrite) {\n          data.allow |= previousOverwrite.allow;\n          data.deny |= previousOverwrite.deny;\n        }\n\n        for (let perm in updated) {\n          if (updated.hasOwnProperty(perm)) {\n            if (updated[perm] === true) {\n              data.allow |= (Permissions[perm] || 0);\n              data.deny &= ~(Permissions[perm] || 0);\n            } else if (updated[perm] === false) {\n              data.allow &= ~(Permissions[perm] || 0);\n              data.deny |= (Permissions[perm] || 0);\n            } else {\n              data.allow &= ~(Permissions[perm] || 0);\n              data.deny &= ~(Permissions[perm] || 0);\n            }\n          }\n        }\n\n        return this.apiRequest(\n          \"put\",\n          `${Endpoints.CHANNEL_PERMISSIONS(channel.id)}/${data.id}`,\n          true,\n          data\n        );\n      });\n  }\n\n  //def setStatus\n  setStatus(idleStatus, game) {\n\n    if (idleStatus === \"online\" || idleStatus === \"here\" || idleStatus === \"available\") {\n      this.idleStatus = null;\n    }\n    else if (idleStatus === \"idle\" || idleStatus === \"away\") {\n      this.idleStatus = Date.now();\n    }\n    else {\n      this.idleStatus = this.idleStatus || null; //undefined\n    }\n\n    // convert undefined and empty string to null\n    if (typeof game === \"string\" && !game.length) game = null;\n\n    this.game = game === null ? null : !game ? this.game || null : typeof game === \"string\" ? {name: game} : game;\n\n    let packet = {\n      op: 3,\n      d: {\n        idle_since: this.idleStatus,\n        game: this.game\n      }\n    };\n\n    this.sendWS(packet);\n\n    this.user.status = this.idleStatus ? \"idle\" : \"online\";\n    this.user.game = this.game;\n\n    return Promise.resolve();\n\n  }\n\n  //def sendTyping\n  sendTyping(channel) {\n    return this.resolver.resolveChannel(channel).then(channel =>\n      this.apiRequest(\"post\", Endpoints.CHANNEL(channel.id) + \"/typing\", true)\n    );\n  }\n\n  //def startTyping\n  startTyping(channel) {\n    return this.resolver.resolveChannel(channel)\n      .then(channel => {\n\n        if (this.intervals.typing[channel.id]) {\n          // typing interval already exists, leave it alone\n          throw new Error(\"Already typing in that channel\");\n        }\n\n        this.intervals.typing[channel.id] = setInterval(\n          () => this.sendTyping(channel)\n            .catch(error => this.client.emit(\"error\", error)),\n          4000\n        );\n\n        return this.sendTyping(channel);\n      });\n\n  }\n\n  //def stopTyping\n  stopTyping(channel) {\n    return this.resolver.resolveChannel(channel)\n      .then(channel => {\n\n        if (!this.intervals.typing[channel.id]) {\n          // typing interval doesn\"t exist\n          throw new Error(\"Not typing in that channel\");\n        }\n\n        clearInterval(this.intervals.typing[channel.id]);\n        this.intervals.typing[channel.id] = false;\n\n      });\n  }\n\n  //def updateDetails\n  updateDetails(data) {\n    if (!this.user.bot && !(this.email || data.email)) {\n      throw new Error(\"Must provide email since a token was used to login\");\n    }\n\n    let options = {};\n\n    if (data.username) {\n      options.username = data.username;\n    } else {\n      options.username = this.user.username;\n    }\n\n    if (data.avatar) {\n      options.avatar = this.resolver.resolveToBase64(data.avatar);\n    }\n\n    if (this.email || data.email) {\n      options.email = data.email || this.email;\n      options.new_password = data.newPassword || null;\n      options.password = data.password || this.password;\n    }\n\n    return this.apiRequest(\"patch\", Endpoints.ME, true, options);\n  }\n\n  //def setAvatar\n  setAvatar(avatar) {\n    return this.updateDetails({avatar});\n  }\n\n  //def setUsername\n  setUsername(username) {\n    return this.updateDetails({username});\n  }\n\n  //def setChannelTopic\n  setChannelTopic(channel, topic = \"\") {\n    topic = topic || \"\";\n\n    return this.updateChannel(channel, {topic: topic});\n  }\n\n  //def setChannelName\n  setChannelName(channel, name) {\n    name = name || \"unnamed-channel\";\n\n    return this.updateChannel(channel, {name: name});\n  }\n\n  //def setChannelPosition\n  setChannelPosition(channel, position) {\n    position = position || 0;\n\n    return this.updateChannel(channel, {position: position});\n  }\n\n  //def setChannelUserLimit\n  setChannelUserLimit(channel, limit) {\n    limit = limit || 0; // default 0 = no limit\n\n    return this.updateChannel(channel, {userLimit: limit})\n  }\n\n  //def setChannelBitrate\n  setChannelBitrate(channel, kbitrate) {\n    kbitrate = kbitrate || 64; // default 64kbps\n\n    return this.updateChannel(channel, {bitrate: kbitrate});\n  }\n\n  //def updateChannel\n  updateChannel(channel, data) {\n    return this.resolver.resolveChannel(channel).then(channel => {\n      if (!channel) {\n        return Promise.reject(new Error(\"Failed to resolve channel\"));\n      }\n\n      data = {\n        name: data.name || channel.name,\n        topic: data.topic || channel.topic,\n        position: (data.position ? data.position : channel.position),\n        user_limit: (data.userLimit ? data.userLimit : channel.userLimit),\n        bitrate: (data.bitrate ? data.bitrate : channel.bitrate ? channel.bitrate : undefined)\n      };\n\n      if (data.position < 0) {\n        return Promise.reject(new Error(\"Position cannot be less than 0\"));\n      }\n\n      if (data.user_limit < 0 || data.user_limit > 99) {\n        return Promise.reject(new Error(\"User limit must be between 0-99\"));\n      }\n\n      if (data.kbitrate < 8 || data.kbitrate > 96) {\n        return Promise.reject(new Error(\"Bitrate must be between 8-96kbps\"));\n      }\n\n      if (data.bitrate) {\n        data.bitrate *= 1000; // convert to bits before sending\n      }\n\n      return this.apiRequest(\"patch\", Endpoints.CHANNEL(channel.id), true, data)\n        .then(res => {\n          channel.name = data.name;\n          channel.topic = data.topic;\n          channel.position = data.position;\n          channel.userLimit = data.user_limit;\n          channel.bitrate = Math.ceil(data.bitrate / 1000);\n          channel._bitrate = data.bitrate;\n        });\n    });\n  }\n\n  //def addFriend\n  addFriend(user) {\n    if (this.user.bot) return Promise.reject(new Error(\"user is a bot, bot's do not have friends support\"));\n\n    let id;\n    if (user instanceof String || typeof user === \"string\")\n      id = user;\n    else if (user instanceof User) {\n      user = this.resolver.resolveUser(user);\n      id = user.id\n    } else {\n      if (user.username && user.discriminator) // add by username and discriminator (pass in an object)\n        return this.apiRequest(\"put\", Endpoints.FRIENDS, true, user);\n      else\n        return Promise.reject(\"invalid user\")\n    }\n\n    return this.apiRequest(\"put\", `${Endpoints.FRIENDS}/${id}`, true, {});\n  }\n\n  //def removeFriend\n  removeFriend(user) {\n    if (this.user.bot) return Promise.reject(new Error(\"user is a bot, bot's do not have friends support\"));\n\n    user = this.resolver.resolveUser(user);\n\n    return this.apiRequest(\"delete\", `${Endpoints.FRIENDS}/${user.id}`, true);\n  }\n\n  getServerWebhooks(server) {\n    server = this.resolver.resolveServer(server);\n\n    if (!server) {\n      return Promise.reject(new Error(\"Failed to resolve server\"));\n    }\n\n    return this.apiRequest(\"get\", Endpoints.SERVER_WEBHOOKS(server.id), true)\n      .then(res => res.map(\n        webhook => {\n          let channel = this.channels.get(\"id\", webhook.channel_id);\n          return channel.webhooks.add(new Webhook(\n            webhook,\n            server,\n            channel,\n            this.users.get(\"id\", webhook.user.id)\n          ))\n        }\n      ));\n  }\n\n  getChannelWebhooks(channel) {\n    return this.resolver.resolveChannel(channel).then(channel => {\n      if (!channel) {\n        return Promise.reject(new Error(\"Failed to resolve channel\"));\n      }\n\n      return this.apiRequest(\"get\", Endpoints.CHANNEL_WEBHOOKS(channel.id), true)\n        .then(res => res.map(\n          webhook => channel.webhooks.add(new Webhook(\n            webhook,\n            this.servers.get(\"id\", webhook.guild_id),\n            channel,\n            this.users.get(\"id\", webhook.user.id)\n          ))\n        ));\n    })\n  }\n\n  editWebhook(webhook, options = {}) {\n    return this.resolver.resolveWebhook(webhook).then(webhook => {\n      if (!webhook) {\n        return Promise.reject(new Error(\" Failed to resolve webhook\"))\n      }\n\n      if (options.hasOwnProperty(\"avatar\")) {\n        options.avatar = this.resolver.resolveToBase64(options.avatar);\n      }\n\n      return this.apiRequest(\"patch\", Endpoints.WEBHOOK(webhook.id), true, options)\n        .then(res => {\n          webhook.name = res.name;\n          webhook.avatar = res.hasOwnProperty('avatar') ? res.avatar : webhook.avatar;\n        });\n    })\n  }\n\n  createWebhook(channel, options = {}) {\n    return this.resolver.resolveChannel(channel)\n      .then(destination => {\n        if (!channel) {\n          return Promise.reject(new Error(\" Failed to resolve channel\"))\n        }\n\n        if (options.hasOwnProperty(\"avatar\")) {\n          options.avatar = this.resolver.resolveToBase64(options.avatar);\n        }\n\n        return this.apiRequest(\"post\", Endpoints.CHANNEL_WEBHOOKS(destination.id), true, options)\n          .then(webhook => channel.webhooks.add(new Webhook(\n            webhook,\n            this.servers.get(\"id\", webhook.guild_id),\n            channel,\n            this.users.get(\"id\", webhook.user.id)\n          )));\n      });\n  }\n\n  deleteWebhook(webhook) {\n    return this.resolver.resolveWebhook(webhook).then(webhook => {\n      if (!webhook) {\n        return Promise.reject(new Error(\" Failed to resolve webhook\"))\n      }\n\n      return this.apiRequest(\"delete\", Endpoints.WEBHOOK(webhook.id), true)\n        .then(() => {\n          webhook.channel.webhooks.remove(webhook);\n        });\n    })\n  }\n\n  sendWebhookMessage(webhook, _content, options = {}) {\n    return this.resolver.resolveWebhook(webhook)\n      .then(destination => {\n        let content = this.resolver.resolveString(_content);\n\n        if (this.client.options.disableEveryone || options.disableEveryone) {\n          content = content.replace(/(@)(everyone|here)/g, '$1\\u200b$2');\n        }\n\n        if (!options.hasOwnProperty(\"username\")) {\n          options.username = this.user.username;\n        }\n\n        let slack;\n        if (options.hasOwnProperty(\"slack\")) {\n          slack = options.slack;\n          delete options[\"slack\"];\n        }\n\n        options.content = content;\n\n        return this.apiRequest(\n          \"post\",\n          `${Endpoints.WEBHOOK_MESSAGE(destination.id, destination.token)}${slack ? \"/slack\" : \"\"}?wait=true`,\n          true,\n          options\n        )\n      });\n\n  }\n\n  //def getOAuthApplication\n  getOAuthApplication(appID) {\n    appID = appID || \"@me\";\n    return this.apiRequest(\"get\", Endpoints.OAUTH2_APPLICATION(appID), true);\n  }\n\n  //def ack\n  ack(msg) {\n    msg = this.resolver.resolveMessage(msg);\n\n    if (!msg) {\n      return Promise.reject(new Error(\"Message does not exist\"));\n    }\n\n    return this.apiRequest(\"post\", Endpoints.CHANNEL_MESSAGE(msg.channel.id, msg.id) + \"/ack\", true);\n  }\n\n  sendWS(object) {\n    if (this.websocket) {\n      //noinspection NodeModulesDependencies,NodeModulesDependencies\n      if (this.erlpack) {\n        this.websocket.send(erlpack.pack(object));\n      } else {\n        this.websocket.send(JSON.stringify(object));\n      }\n    }\n  }\n\n  createWS(url) {\n    if (this.websocket) {\n      return false;\n    }\n    if (!url.endsWith(\"/\")) {\n      url += \"/\";\n    }\n\n    url += `?encoding=${this.erlpack ? \"etf\" : \"json\"}${this.zlib ? \"&compress=zlib-stream\" : \"\"}&v=${GATEWAY_VERSION}`;\n\n    console.log(this.erlpack, this.zlib, url);\n    this._inflate = new Unpacker(this.erlpack, this.zlib, this.receiveDecompressedPacket.bind(this));\n\n    this.websocket = new WebSocket(url);\n\n    this.websocket.onopen = () => {\n    };\n\n    this.websocket.onclose = (event) => {\n      this.websocket = null;\n      this.state = ConnectionState.DISCONNECTED;\n      if (event && event.code) {\n        this.client.emit(\"warn\", \"WS close: \" + event.code);\n        let err;\n        if (event.code === 4001) {\n          err = new Error(\"Gateway received invalid OP code\");\n        } else if (event.code === 4005) {\n          err = new Error(\"Gateway received invalid message\");\n        } else if (event.code === 4003) {\n          err = new Error(\"Not authenticated\");\n        } else if (event.code === 4004) {\n          err = new Error(\"Authentication failed\");\n        } else if (event.code === 4005) {\n          err = new Error(\"Already authenticated\");\n        }\n        if (event.code === 4006 || event.code === 4009) {\n          err = new Error(\"Invalid session\");\n        } else if (event.code === 4007) {\n          this.sequence = 0;\n          err = new Error(\"Invalid sequence number\");\n        } else if (event.code === 4008) {\n          err = new Error(\"Gateway connection was ratelimited\");\n        } else if (event.code === 4010) {\n          err = new Error(\"Invalid shard key\");\n        }\n        if (err) {\n          this.client.emit(\"error\", err);\n        }\n      }\n      this.disconnected(this.client.options.autoReconnect);\n    };\n\n    this.websocket.onerror = e => {\n      this.client.emit(\"error\", e);\n      this.websocket = null;\n      this.state = ConnectionState.DISCONNECTED;\n      this.disconnected(this.client.options.autoReconnect);\n    };\n\n    this.websocket.onmessage = e => {\n      this._inflate.onMessage(e.data);\n    };\n  }\n\n  receiveDecompressedPacket(packet) {\n    this.client.emit(\"raw\", packet);\n\n    if (packet.s) {\n      this.sequence = packet.s;\n    }\n\n    switch (packet.op) {\n      case 0:\n        this.processPacket(packet);\n        break;\n      case 1:\n        this.heartbeatAcked = true;\n        this.heartbeat();\n        break;\n      case 7:\n        this.disconnected(true);\n        break;\n      case 9:\n        this.sessionID = null;\n        this.sequence = 0;\n        this.identify();\n        break;\n      case 10:\n        if (this.sessionID) {\n          this.resume();\n        } else {\n          this.identify();\n        }\n        this.heartbeatAcked = true; // start off without assuming we didn't get a missed heartbeat acknowledge right away;\n        this.heartbeat();\n        this.heartbeatAcked = true;\n        this.intervals.kai = setInterval(() => this.heartbeat(), packet.d.heartbeat_interval);\n        break;\n      case 11:\n        this.heartbeatAcked = true;\n        break;\n      default:\n        this.client.emit(\"unknown\", packet);\n        break;\n    }\n  }\n\n  processPacket(packet) {\n    let client = this.client;\n    let data = packet.d;\n    switch (packet.t) {\n      case PacketType.RESUMED:\n      case PacketType.READY: {\n        this.autoReconnectInterval = 1000;\n        this.state = ConnectionState.READY;\n\n        if (packet.t === PacketType.RESUMED) {\n          break;\n        }\n\n        this.sessionID = data.session_id;\n        let startTime = Date.now();\n\n        this.user = this.users.add(new User(data.user, client));\n\n        this.forceFetchCount = {};\n        this.forceFetchQueue = [];\n        this.forceFetchLength = 1;\n\n        data.guilds.forEach(server => {\n          if (!server.unavailable) {\n            server = this.servers.add(new Server(server, client));\n            if (client.options.bot === false) {\n              this.unsyncedGuilds++;\n              this.syncGuild(server.id);\n            }\n            if (this.client.options.forceFetchUsers && server.members && server.members.length < server.memberCount) {\n              this.getGuildMembers(server.id, Math.ceil(server.memberCount / 1000));\n            }\n          } else {\n            client.emit(\"debug\", \"server \" + server.id + \" was unavailable, could not create (ready)\");\n            this.unavailableServers.add(server);\n          }\n        });\n        data.private_channels.forEach(pm => {\n          this.private_channels.add(new PMChannel(pm, client));\n        });\n        if (!data.user.bot) { // bots dont have friends\n          data.relationships.forEach(friend => {\n            if (friend.type === 1) { // is a friend\n              this.friends.add(new User(friend.user, client));\n            } else if (friend.type === 2) { // incoming friend requests\n              this.blocked_users.add(new User(friend.user, client));\n            } else if (friend.type === 3) { // incoming friend requests\n              this.incoming_friend_requests.add(new User(friend.user, client));\n            } else if (friend.type === 4) { // outgoing friend requests\n              this.outgoing_friend_requests.add(new User(friend.user, client));\n            } else {\n              client.emit(\"warn\", \"unknown friend type \" + friend.type);\n            }\n          });\n        } else {\n          this.friends = null;\n          this.blocked_users = null;\n          this.incoming_friend_requests = null;\n          this.outgoing_friend_requests = null;\n        }\n\n        // add notes to users\n        if (data.notes) {\n          for (let note in data.notes) {\n            if (data.notes.hasOwnProperty(note)) {\n              let user = this.users.get(\"id\", note);\n              if (user) {\n                let newUser = user;\n                newUser.note = data.notes[note];\n\n                this.users.update(user, newUser);\n              } else {\n                client.emit(\"warn\", \"note in ready packet but user not cached\");\n              }\n            }\n          }\n        }\n\n        client.emit(\"debug\", `ready packet took ${Date.now() - startTime}ms to process`);\n        client.emit(\"debug\", `ready with ${this.servers.length} servers, ${this.unavailableServers.length} unavailable servers, ${this.channels.length} channels and ${this.users.length} users cached.`);\n\n        this.restartServerCreateTimeout();\n\n        break;\n      }\n      case PacketType.MESSAGE_CREATE: {\n        // format: https://discordapi.readthedocs.org/en/latest/reference/channels/messages.html#message-format\n        let channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n        if (channel) {\n          let msg = channel.messages.add(new Message(data, channel, client));\n          channel.lastMessageID = msg.id;\n          if (this.messageAwaits[channel.id + msg.author.id]) {\n            this.messageAwaits[channel.id + msg.author.id].map(fn => fn(msg));\n            this.messageAwaits[channel.id + msg.author.id] = null;\n            client.emit(\"message\", msg, true); //2nd param is isAwaitedMessage\n          } else {\n            client.emit(\"message\", msg);\n          }\n        } else {\n          client.emit(\"warn\", \"message created but channel is not cached\");\n        }\n        break;\n      }\n      case PacketType.MESSAGE_DELETE: {\n        let channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n        if (channel) {\n          // potentially blank\n          let msg = channel.messages.get(\"id\", data.id);\n          client.emit(\"messageDeleted\", msg, channel);\n          if (msg) {\n            channel.messages.remove(msg);\n          } else {\n            client.emit(\"debug\", \"message was deleted but message is not cached\");\n          }\n        } else {\n          client.emit(\"warn\", \"message was deleted but channel is not cached\");\n        }\n        break;\n      }\n      case PacketType.MESSAGE_DELETE_BULK: {\n        let channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n        if (channel) {\n          data.ids.forEach((id) => {\n            // potentially blank\n            let msg = channel.messages.get(\"id\", id);\n            client.emit(\"messageDeleted\", msg, channel);\n            if (msg) {\n              channel.messages.remove(msg);\n            } else {\n              client.emit(\"debug\", \"message was deleted but message is not cached\");\n            }\n          });\n        } else {\n          client.emit(\"warn\", \"message was deleted but channel is not cached\");\n        }\n        break;\n      }\n      case PacketType.MESSAGE_UPDATE: {\n        // format https://discordapi.readthedocs.org/en/latest/reference/channels/messages.html#message-format\n        let channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n        if (channel) {\n          // potentially blank\n          let msg = channel.messages.get(\"id\", data.id);\n\n          if (msg) {\n            // old message exists\n            data.nonce = data.nonce !== undefined ? data.nonce : msg.nonce;\n            data.attachments = data.attachments !== undefined ? data.attachments : msg.attachments;\n            data.tts = data.tts !== undefined ? data.tts : msg.tts;\n            data.embeds = data.embeds !== undefined ? data.embeds : msg.embeds;\n            data.timestamp = data.timestamp !== undefined ? data.timestamp : msg.timestamp;\n            data.mention_everyone = data.mention_everyone !== undefined ? data.mention_everyone : msg.everyoneMentioned;\n            data.content = data.content !== undefined ? data.content : msg.content;\n            data.mentions = data.mentions !== undefined ? data.mentions : msg.mentions;\n            data.author = data.author !== undefined ? data.author : msg.author;\n            msg = new Message(msg, channel, client);\n          } else if (!data.author || !data.content) {\n            break;\n          }\n          let nmsg = new Message(data, channel, client);\n          client.emit(\"messageUpdated\", msg, nmsg);\n          if (msg) {\n            channel.messages.update(msg, nmsg);\n          }\n        } else {\n          client.emit(\"warn\", \"message was updated but channel is not cached\");\n        }\n        break;\n      }\n      case PacketType.SERVER_CREATE: {\n        let server = this.servers.get(\"id\", data.id);\n        if (!server) {\n          if (!data.unavailable) {\n            server = this.servers.add(new Server(data, client));\n            if (client.options.bot === false) {\n              this.unsyncedGuilds++;\n              this.syncGuild(server.id);\n            }\n            if (client.readyTime) {\n              client.emit(\"serverCreated\", server);\n            }\n            if (this.client.options.forceFetchUsers && server.large && server.members.length < server.memberCount) {\n              this.getGuildMembers(server.id, Math.ceil(server.memberCount / 1000));\n            }\n            let unavailable = this.unavailableServers.get(\"id\", server.id);\n            if (unavailable) {\n              this.unavailableServers.remove(unavailable);\n            }\n            this.restartServerCreateTimeout();\n          } else {\n            client.emit(\"debug\", \"server was unavailable, could not create\");\n          }\n        }\n        break;\n      }\n      case PacketType.SERVER_DELETE: {\n        let server = this.servers.get(\"id\", data.id);\n        if (server) {\n          if (!data.unavailable) {\n            client.emit(\"serverDeleted\", server);\n\n            for (let channel of server.channels) {\n              this.channels.remove(channel);\n            }\n\n            this.servers.remove(server);\n\n            for (let user of server.members) {\n              let found = false;\n              for (let s of this.servers) {\n                if (s.members.get(\"id\", user.id)) {\n                  found = true;\n                  break;\n                }\n              }\n              if (!found) {\n                this.users.remove(user);\n              }\n            }\n          } else {\n            client.emit(\"debug\", \"server was unavailable, could not update\");\n          }\n          this.buckets[\"bot:msg:guild:\" + packet.d.id] =\n            this.buckets[\"dmsg:\" + packet.d.id] =\n              this.buckets[\"bdmsg:\" + packet.d.id] =\n                this.buckets[\"guild_member:\" + packet.d.id] =\n                  this.buckets[\"guild_member_nick:\" + packet.d.id] = undefined;\n        } else {\n          client.emit(\"warn\", \"server was deleted but it was not in the cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_UPDATE: {\n        let server = this.servers.get(\"id\", data.id);\n        if (server) {\n          // server exists\n          data.members = data.members || [];\n          data.channels = data.channels || [];\n          let newserver = new Server(data, client);\n          newserver.members = server.members;\n          newserver.memberMap = server.memberMap;\n          newserver.channels = server.channels;\n          if (newserver.equalsStrict(server)) {\n            // already the same don't do anything\n            client.emit(\"debug\", \"received server update but server already updated\");\n          } else {\n            client.emit(\"serverUpdated\", new Server(server, client), newserver);\n            this.servers.update(server, newserver);\n          }\n        } else if (!server) {\n          client.emit(\"warn\", \"server was updated but it was not in the cache\");\n        }\n        break;\n      }\n      case PacketType.CHANNEL_CREATE: {\n\n        let channel = this.channels.get(\"id\", data.id);\n\n        if (!channel) {\n\n          let server = this.servers.get(\"id\", data.guild_id);\n          if (server) {\n            let chan = null;\n            if (data.type === 0) {\n              chan = this.channels.add(new TextChannel(data, client, server));\n            } else {\n              chan = this.channels.add(new VoiceChannel(data, client, server));\n            }\n            client.emit(\"channelCreated\", server.channels.add(chan));\n          } else if (data.is_private) {\n            client.emit(\"channelCreated\", this.private_channels.add(new PMChannel(data, client)));\n          } else {\n            client.emit(\"warn\", \"channel created but server does not exist\");\n          }\n\n        } else {\n          client.emit(\"warn\", \"channel created but already in cache\");\n        }\n\n        break;\n      }\n      case PacketType.CHANNEL_DELETE: {\n        let channel = this.channels.get(\"id\", data.id) || this.private_channels.get(\"id\", data.id);\n        if (channel) {\n\n          if (channel.server) { // accounts for PMs\n            channel.server.channels.remove(channel);\n            this.channels.remove(channel);\n          } else {\n            this.private_channels.remove(channel);\n          }\n\n          client.emit(\"channelDeleted\", channel);\n\n        } else {\n          client.emit(\"warn\", \"channel deleted but already out of cache?\");\n        }\n        break;\n      }\n      case PacketType.CHANNEL_UPDATE: {\n        let channel = this.channels.get(\"id\", data.id) || this.private_channels.get(\"id\", data.id);\n        if (channel) {\n\n          if (channel instanceof PMChannel) {\n            //PM CHANNEL\n            client.emit(\"channelUpdated\", new PMChannel(channel, client),\n              this.private_channels.update(channel, new PMChannel(data, client)));\n          } else {\n            if (channel.server) {\n              if (channel.type === 0) {\n                //TEXT CHANNEL\n                let chan = new TextChannel(data, client, channel.server);\n                chan.messages = channel.messages;\n                client.emit(\"channelUpdated\", channel, chan);\n                channel.server.channels.update(channel, chan);\n                this.channels.update(channel, chan);\n              } else {\n                //VOICE CHANNEL\n                data.members = channel.members;\n                let chan = new VoiceChannel(data, client, channel.server);\n                client.emit(\"channelUpdated\", channel, chan);\n                channel.server.channels.update(channel, chan);\n                this.channels.update(channel, chan);\n              }\n            } else {\n              client.emit(\"warn\", \"channel updated but server non-existant\");\n            }\n          }\n\n        } else {\n          client.emit(\"warn\", \"channel updated but not in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_ROLE_CREATE: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n          client.emit(\"serverRoleCreated\", server.roles.add(new Role(data.role, server, client)), server);\n        } else {\n          client.emit(\"warn\", \"server role made but server not in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_ROLE_DELETE: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n          let role = server.roles.get(\"id\", data.role_id);\n          if (role) {\n            server.roles.remove(role);\n            client.emit(\"serverRoleDeleted\", role);\n          } else {\n            client.emit(\"warn\", \"server role deleted but role not in cache\");\n          }\n        } else {\n          client.emit(\"warn\", \"server role deleted but server not in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_ROLE_UPDATE: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n          let role = server.roles.get(\"id\", data.role.id);\n          if (role) {\n            let newRole = new Role(data.role, server, client);\n            client.emit(\"serverRoleUpdated\", new Role(role, server, client), newRole);\n            server.roles.update(role, newRole);\n          } else {\n            client.emit(\"warn\", \"server role updated but role not in cache\");\n          }\n        } else {\n          client.emit(\"warn\", \"server role updated but server not in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_MEMBER_ADD: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n\n          server.memberMap[data.user.id] = {\n            roles: data.roles,\n            mute: false,\n            selfMute: false,\n            deaf: false,\n            selfDeaf: false,\n            joinedAt: Date.parse(data.joined_at),\n            nick: data.nick || null\n          };\n\n          server.memberCount++;\n\n          client.emit(\n            \"serverNewMember\",\n            server,\n            server.members.add(this.users.add(new User(data.user, client)))\n          );\n\n        } else {\n          client.emit(\"warn\", \"server member added but server doesn't exist in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_MEMBER_REMOVE: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n          let user = this.users.get(\"id\", data.user.id);\n          if (user) {\n            client.emit(\"serverMemberRemoved\", server, user);\n            server.memberMap[data.user.id] = null;\n            server.members.remove(user);\n            server.memberCount--;\n          } else {\n            client.emit(\"warn\", \"server member removed but user doesn't exist in cache\");\n          }\n        } else {\n          client.emit(\"warn\", \"server member removed but server doesn't exist in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_MEMBER_UPDATE: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n          let user = this.users.add(new User(data.user, client));\n          if (user) {\n            let oldMember = null;\n            if (server.memberMap[data.user.id]) {\n              oldMember = {\n                roles: server.memberMap[data.user.id].roles,\n                mute: server.memberMap[data.user.id].mute,\n                selfMute: server.memberMap[data.user.id].selfMute,\n                deaf: server.memberMap[data.user.id].deaf,\n                selfDeaf: server.memberMap[data.user.id].selfDeaf,\n                nick: server.memberMap[data.user.id].nick\n              };\n            } else {\n              server.memberMap[data.user.id] = {};\n            }\n            server.memberMap[data.user.id].roles = data.roles ? data.roles : server.memberMap[data.user.id].roles;\n            server.memberMap[data.user.id].mute = data.mute || server.memberMap[data.user.id].mute;\n            server.memberMap[data.user.id].selfMute = data.self_mute === undefined ? server.memberMap[data.user.id].selfMute : data.self_mute;\n            server.memberMap[data.user.id].deaf = data.deaf || server.memberMap[data.user.id].deaf;\n            server.memberMap[data.user.id].selfDeaf = data.self_deaf === undefined ? server.memberMap[data.user.id].selfDeaf : data.self_deaf;\n            server.memberMap[data.user.id].nick = data.nick === undefined ? server.memberMap[data.user.id].nick : data.nick || null;\n            client.emit(\"serverMemberUpdated\", server, user, oldMember);\n          } else {\n            client.emit(\"warn\", \"server member removed but user doesn't exist in cache\");\n          }\n        } else {\n          client.emit(\"warn\", \"server member updated but server doesn't exist in cache\");\n        }\n        break;\n      }\n      case PacketType.PRESENCE_UPDATE: {\n\n        let user = this.users.add(new User(data.user, client));\n        let server = this.servers.get(\"id\", data.guild_id);\n\n        if (user && server) {\n\n          server.members.add(user);\n\n          data.user.username = data.user.username || user.username;\n          data.user.id = data.user.id || user.id;\n          data.user.avatar = data.user.avatar !== undefined ? data.user.avatar : user.avatar;\n          data.user.discriminator = data.user.discriminator || user.discriminator;\n          data.user.status = data.status || user.status;\n          data.user.game = data.game !== undefined ? data.game : user.game;\n          data.user.bot = data.user.bot !== undefined ? data.user.bot : user.bot;\n\n          let presenceUser = new User(data.user, client);\n\n          if (!presenceUser.equalsStrict(user)) {\n            client.emit(\"presence\", user, presenceUser);\n            this.users.update(user, presenceUser);\n          }\n\n        } else {\n          client.emit(\"warn\", \"presence update but user/server not in cache\");\n        }\n\n        break;\n      }\n      case PacketType.USER_UPDATE: {\n\n        let user = this.users.get(\"id\", data.id);\n\n        if (user) {\n\n          data.username = data.username || user.username;\n          data.id = data.id || user.id;\n          data.avatar = data.avatar || user.avatar;\n          data.discriminator = data.discriminator || user.discriminator;\n          this.email = data.email || this.email;\n\n          let presenceUser = new User(data, client);\n\n          client.emit(\"presence\", user, presenceUser);\n          this.users.update(user, presenceUser);\n\n        } else {\n          client.emit(\"warn\", \"user update but user not in cache (this should never happen)\");\n        }\n\n        break;\n      }\n      case PacketType.TYPING: {\n\n        let user = this.users.get(\"id\", data.user_id);\n        let channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n\n        if (user && channel) {\n          if (user.typing.since) {\n            user.typing.since = Date.now();\n            user.typing.channel = channel;\n          } else {\n            user.typing.since = Date.now();\n            user.typing.channel = channel;\n            client.emit(\"userTypingStarted\", user, channel);\n          }\n          setTimeout(() => {\n            if (Date.now() - user.typing.since > 5500) {\n              // they haven't typed since\n              user.typing.since = null;\n              user.typing.channel = null;\n              client.emit(\"userTypingStopped\", user, channel);\n            }\n          }, 6000);\n\n        } else {\n          client.emit(\"warn\", \"user typing but user or channel not existant in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_BAN_ADD: {\n        let user = this.users.get(\"id\", data.user.id);\n        let server = this.servers.get(\"id\", data.guild_id);\n\n        if (user && server) {\n          client.emit(\"userBanned\", user, server);\n        } else {\n          client.emit(\"warn\", \"user banned but user/server not in cache.\");\n        }\n        break;\n      }\n      case PacketType.SERVER_BAN_REMOVE: {\n        let user = this.users.get(\"id\", data.user.id);\n        let server = this.servers.get(\"id\", data.guild_id);\n\n        if (user && server) {\n          client.emit(\"userUnbanned\", user, server);\n        } else {\n          client.emit(\"warn\", \"user unbanned but user/server not in cache.\");\n        }\n        break;\n      }\n      case PacketType.USER_NOTE_UPDATE: {\n        if (this.user.bot) {\n          return;\n        }\n        let user = this.users.get(\"id\", data.id);\n        let oldNote = user.note;\n        let note = data.note || null;\n\n        // user in cache\n        if (user) {\n          let updatedUser = user;\n          updatedUser.note = note;\n\n          client.emit(\"noteUpdated\", user, oldNote);\n\n          this.users.update(user, updatedUser);\n\n        } else {\n          client.emit(\"warn\", \"note updated but user not in cache\");\n        }\n        break;\n      }\n      case PacketType.VOICE_STATE_UPDATE: {\n        let user = this.users.get(\"id\", data.user_id);\n        let server = this.servers.get(\"id\", data.guild_id);\n\n        if (user && server) {\n\n          if (data.channel_id) {\n            // in voice channel\n            let channel = this.channels.get(\"id\", data.channel_id);\n            if (channel && channel.type === 2) {\n              server.eventVoiceStateUpdate(channel, user, data);\n            } else {\n              client.emit(\"warn\", \"voice state channel not in cache\");\n            }\n          } else {\n            // not in voice channel\n            client.emit(\"voiceLeave\", server.eventVoiceLeave(user), user);\n          }\n\n        } else {\n          client.emit(\"warn\", \"voice state update but user or server not in cache\");\n        }\n\n        if (user && user.id === this.user.id) { // only for detecting self user movements for connections.\n          let connection = this.voiceConnections.get(\"server\", server);\n          // existing connection, perhaps channel moved\n          if (connection && connection.voiceChannel && connection.voiceChannel.id !== data.channel_id) {\n            // moved, update info\n            connection.voiceChannel = this.channels.get(\"id\", data.channel_id);\n            client.emit(\"voiceMoved\", connection.voiceChannel); // Moved to a new channel\n          }\n        }\n\n        break;\n      }\n      case PacketType.SERVER_MEMBERS_CHUNK: {\n\n        let server = this.servers.get(\"id\", data.guild_id);\n\n        if (server) {\n\n          let testtime = Date.now();\n\n          for (let user of data.members) {\n            server.memberMap[user.user.id] = {\n              roles: user.roles,\n              mute: user.mute,\n              selfMute: false,\n              deaf: user.deaf,\n              selfDeaf: false,\n              joinedAt: Date.parse(user.joined_at),\n              nick: user.nick || null\n            };\n            server.members.add(this.users.add(new User(user.user, client)));\n          }\n\n          if (this.forceFetchCount.hasOwnProperty(server.id)) {\n            if (this.forceFetchCount[server.id] <= 1) {\n              delete this.forceFetchCount[server.id];\n              this.restartServerCreateTimeout();\n            } else {\n              this.forceFetchCount[server.id]--;\n            }\n          }\n\n          client.emit(\"debug\", (Date.now() - testtime) + \"ms for \" + data.members.length + \" user chunk for server with id \" + server.id);\n\n        } else {\n          client.emit(\"warn\", \"chunk update received but server not in cache\");\n        }\n\n        break;\n      }\n      case PacketType.FRIEND_ADD: {\n        if (this.user.bot) {\n          return;\n        }\n        if (data.type === 1) { // accepted/got accepted a friend request\n          let inUser = this.incoming_friend_requests.get(\"id\", data.id);\n          if (inUser) {\n            // client accepted another user\n            this.incoming_friend_requests.remove(this.friends.add(new User(data.user, client)));\n            return;\n          }\n\n          let outUser = this.outgoing_friend_requests.get(\"id\", data.id);\n          if (outUser) {\n            // another user accepted the client\n            this.outgoing_friend_requests.remove(this.friends.add(new User(data.user, client)));\n            client.emit(\"friendRequestAccepted\", outUser);\n            return;\n          }\n        } else if (data.type === 2) {\n          // client received block\n          this.blocked_users.add(new User(data.user, client));\n        } else if (data.type === 3) {\n          // client received friend request\n          client.emit(\"friendRequestReceived\", this.incoming_friend_requests.add(new User(data.user, client)));\n        } else if (data.type === 4) {\n          // client sent friend request\n          this.outgoing_friend_requests.add(new User(data.user, client));\n        }\n        break;\n      }\n      case PacketType.FRIEND_REMOVE: {\n        if (this.user.bot) {\n          return;\n        }\n        let user = this.friends.get(\"id\", data.id);\n        if (user) {\n          this.friends.remove(user);\n          client.emit(\"friendRemoved\", user);\n          return;\n        }\n\n        user = this.blocked_users.get(\"id\", data.id);\n        if (user) { // they rejected friend request\n          this.blocked_users.remove(user);\n          return;\n        }\n\n        user = this.incoming_friend_requests.get(\"id\", data.id);\n        if (user) { // they rejected outgoing friend request OR client user manually deleted incoming through web client/other clients\n          let rejectedUser = this.outgoing_friend_requests.get(\"id\", user.id);\n          if (rejectedUser) {\n            // other person rejected outgoing\n            client.emit(\"friendRequestRejected\", this.outgoing_friend_requests.remove(rejectedUser));\n            return;\n          }\n\n          // incoming deleted manually\n          this.incoming_friend_requests.remove(user);\n          return;\n        }\n\n        user = this.outgoing_friend_requests.get(\"id\", data.id);\n        if (user) { // client cancelled incoming friend request OR client user manually deleted outgoing through web client/other clients\n          let incomingCancel = this.incoming_friend_requests.get(\"id\", user.id);\n          if (incomingCancel) {\n            // client cancelled incoming\n            this.incoming_friend_requests.remove(user);\n            return;\n          }\n\n          // outgoing deleted manually\n          this.outgoing_friend_requests.remove(user);\n          return;\n        }\n        break;\n      }\n      case PacketType.SERVER_SYNC: {\n        let guild = this.servers.get(data.id);\n        data.members.forEach((dataUser) => {\n          guild.memberMap[dataUser.user.id] = {\n            roles: dataUser.roles,\n            mute: dataUser.mute,\n            selfMute: dataUser.self_mute,\n            deaf: dataUser.deaf,\n            selfDeaf: dataUser.self_deaf,\n            joinedAt: Date.parse(dataUser.joined_at),\n            nick: dataUser.nick || null\n          };\n          guild.members.add(client.internal.users.add(new User(dataUser.user, client)));\n        });\n        for (let presence of data.presences) {\n          let user = client.internal.users.get(\"id\", presence.user.id);\n          if (user) {\n            user.status = presence.status;\n            user.game = presence.game;\n          }\n        }\n        if (guild.pendingVoiceStates && guild.pendingVoiceStates.length > 0) {\n          for (let voiceState of guild.pendingVoiceStates) {\n            let user = guild.members.get(\"id\", voiceState.user_id);\n            if (user) {\n              guild.memberMap[user.id] = guild.memberMap[user.id] || {};\n              guild.memberMap[user.id].mute = voiceState.mute || guild.memberMap[user.id].mute;\n              guild.memberMap[user.id].selfMute = voiceState.self_mute === undefined ? guild.memberMap[user.id].selfMute : voiceState.self_mute;\n              guild.memberMap[user.id].deaf = voiceState.deaf || guild.memberMap[user.id].deaf;\n              guild.memberMap[user.id].selfDeaf = voiceState.self_deaf === undefined ? guild.memberMap[user.id].selfDeaf : voiceState.self_deaf;\n              let channel = guild.channels.get(\"id\", voiceState.channel_id);\n              if (channel) {\n                guild.eventVoiceJoin(user, channel);\n              } else {\n                guild.client.emit(\"warn\", \"channel doesn't exist even though GUILD_SYNC expects them to\");\n              }\n            } else {\n              guild.client.emit(\"warn\", \"user doesn't exist even though GUILD_SYNC expects them to\");\n            }\n          }\n        }\n        guild.pendingVoiceStates = null;\n        this.unsyncedGuilds--;\n        this.restartServerCreateTimeout();\n        break;\n      }\n      default: {\n        client.emit(\"unknown\", packet);\n        break;\n      }\n    }\n  }\n\n  resume() {\n    let data = {\n      op: 6,\n      d: {\n        token: this.token,\n        session_id: this.sessionID,\n        seq: this.sequence\n      }\n    };\n\n    this.sendWS(data);\n  }\n\n  identify() {\n    let data = {\n      op: 2,\n      d: {\n        token: this.token,\n        v: GATEWAY_VERSION,\n        compress: this.client.options.compress,\n        large_threshold: this.client.options.largeThreshold,\n        properties: {\n          \"$os\": process.platform,\n          \"$browser\": \"discord.js macdja38/discord.js\",\n          \"$device\": \"discord.js macdja38/discord.js\",\n          \"$referrer\": \"\",\n          \"$referring_domain\": \"\"\n        }\n      }\n    };\n\n    if (this.client.options.shard) {\n      data.d.shard = this.client.options.shard;\n    }\n\n    this.sendWS(data);\n  }\n\n  heartbeat() {\n    if (!this.heartbeatAcked) this.disconnected(true);\n    this.heartbeatAcked = false;\n    this.sendWS({op: 1, d: Date.now()});\n  }\n}\n"]}