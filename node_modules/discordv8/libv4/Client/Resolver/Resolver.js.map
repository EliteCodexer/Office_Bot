{"version":3,"sources":["../../../src/Client/Resolver/Resolver.js"],"names":["Resolver","internal","resource","Buffer","toString","id","String","indexOf","split","pop","server","servers","get","channel","role","roles","test","Promise","resolve","reject","buffer","parse","res","cb","setEncoding","data","on","chunk","end","err","body","_mentions","changed","match","mention","user","users","substring","length","push","details","detailsOf","replace","RegExp","nick","username","discriminator","name","channels","Array","join","author","lmsg","lastMessage","owner","recipient","find","s","webhooks","has","hasOwnProperty","error","Error","voiceChannel","defaultChannel","private_channels","pmchat","recipients","equals","startPM"],"mappings":"AAAA;AACA;;AAEA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;;;;;;;;;;AAKA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqBA,Q;AACpB,mBAAYC,QAAZ,EAAsB;AAAA;;AACrB,OAAKA,QAAL,GAAgBA,QAAhB;AACA;;;;kCAEeC,Q,EAAU;AACzB,OAAIA,oBAAoBC,MAAxB,EAAgC;AAC/BD,eAAWA,SAASE,QAAT,CAAkB,QAAlB,CAAX;AACAF,eAAW,2BAA2BA,QAAtC;AACA;AACD,UAAOA,QAAP;AACA;;;kCAEeA,Q,EAAU;AACzB,OAAIA,oCAAJ,EAAgC;AAC/B,WAAOA,SAASG,EAAhB;AACA;AACD,OAAI,OAAOH,QAAP,KAAoB,QAApB,IAAgCA,oBAAoBI,MAAxD,EAAgE;AAC/D,QAAIJ,SAASK,OAAT,CAAiB,MAAjB,MAA6B,CAAjC,EAAoC;AACnC,SAAIC,QAAQN,SAASM,KAAT,CAAe,GAAf,CAAZ;AACA,YAAOA,MAAMC,GAAN,EAAP;AACA;AACD,WAAOP,QAAP;AACA;AACD,UAAO,IAAP;AACA;;;gCAEaA,Q,EAAU;AACvB,OAAIA,oCAAJ,EAAgC;AAC/B,WAAOA,QAAP;AACA;AACD,OAAIA,2CAAJ,EAAuC;AACtC,WAAOA,SAASQ,MAAhB;AACA;AACD,OAAIR,oBAAoBI,MAApB,IAA8B,OAAOJ,QAAP,KAAoB,QAAtD,EAAgE;AAC/D,WAAO,KAAKD,QAAL,CAAcU,OAAd,CAAsBC,GAAtB,CAA0B,IAA1B,EAAgCV,QAAhC,CAAP;AACA;AACD,OAAIA,qCAAJ,EAAiC;AAChC,QAAIA,SAASW,OAAT,iCAAJ,EAA6C;AAC5C,YAAOX,SAASW,OAAT,CAAiBH,MAAxB;AACA;AACD;AACD,UAAO,IAAP;AACA;;;8BAEWR,Q,EAAU;AACrB,OAAIA,kCAAJ,EAA8B;AAC7B,WAAOA,QAAP;AACA;AACD,OAAIA,oBAAoBI,MAApB,IAA8B,OAAOJ,QAAP,KAAoB,QAAtD,EAAgE;AAC/D,QAAIY,OAAO,IAAX;AAD+D;AAAA;AAAA;;AAAA;AAE/D,0BAAmB,KAAKb,QAAL,CAAcU,OAAjC,8HAA0C;AAAA,UAAjCD,MAAiC;;AACzC,UAAII,OAAOJ,OAAOK,KAAP,CAAaH,GAAb,CAAiB,IAAjB,EAAuBV,QAAvB,CAAX,EAA6C;AAC5C,cAAOY,IAAP;AACA;AACD;AAN8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO/D;AACD,UAAO,IAAP;AACA;;;8BAEWZ,Q,EAAU;AACrB,OAAI,OAAOA,QAAP,KAAoB,QAApB,IAAgCA,oBAAoBI,MAAxD,EAAgE;AAC/D,QAAI,eAAeU,IAAf,CAAoBd,QAApB,CAAJ,EAAmC;AAClC,YAAO,IAAIe,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,2BAAQP,GAAR,CAAYV,QAAZ,EAAsBkB,MAAtB,GAA+BC,KAA/B,CAAqC,UAACC,GAAD,EAAMC,EAAN,EAAa;AACjDD,WAAIE,WAAJ,CAAgB,QAAhB;AACAF,WAAIG,IAAJ,GAAW,EAAX;AACAH,WAAII,EAAJ,CAAO,MAAP,EAAe,UAACC,KAAD,EAAW;AACzBL,YAAIG,IAAJ,IAAYE,KAAZ;AACA,QAFD;AAGAL,WAAII,EAAJ,CAAO,KAAP,EAAc,YAAM;AACnBH,WAAG,IAAH,EAAS,IAAIpB,MAAJ,CAAWmB,IAAIG,IAAf,EAAqB,QAArB,CAAT;AACA,QAFD;AAGA,OATD,EASGG,GATH,CASO,UAACC,GAAD,EAAMP,GAAN,EAAc;AACpB,WAAIO,GAAJ,EAAS;AACR,eAAOV,OAAOU,GAAP,CAAP;AACA;AACD,cAAOX,QAAQI,IAAIQ,IAAZ,CAAP;AACA,OAdD;AAeA,MAhBM,CAAP;AAiBA,KAlBD,MAkBO;AACN,YAAOb,QAAQC,OAAR,CAAgBhB,QAAhB,CAAP;AACA;AACD;AACD,UAAOe,QAAQC,OAAR,CAAgBhB,QAAhB,CAAP;AACA;;;kCAEeA,Q,EAAUW,O,EAAS;AAClC,OAAIkB,YAAY,EAAhB;AACA,OAAIC,UAAU9B,QAAd;AAFkC;AAAA;AAAA;;AAAA;AAGlC,2BAAqBA,SAAS+B,KAAT,CAAe,eAAf,KAAmC,EAAxD,oIAA6D;AAAA,SAApDC,OAAoD;AAAE;AAC9D,SAAIA,QAAQ,CAAR,MAAe,GAAnB,EAAwB;AACvB,UAAIC,OAAO,KAAKlC,QAAL,CAAcmC,KAAd,CAAoBxB,GAApB,CAAwB,IAAxB,EAA8BsB,QAAQG,SAAR,CAAkB,CAAlB,EAAqBH,QAAQI,MAAR,GAAiB,CAAtC,CAA9B,CAAX;AACA,UAAIH,IAAJ,EAAU;AACTJ,iBAAUQ,IAAV,CAAeJ,IAAf;AACA,WAAIK,UAAU3B,QAAQH,MAAR,IAAkBG,QAAQH,MAAR,CAAe+B,SAAf,CAAyBN,IAAzB,CAAhC;AACA,WAAIK,OAAJ,EAAa;AACZR,kBAAUA,QAAQU,OAAR,CAAgB,IAAIC,MAAJ,CAAWT,OAAX,EAAoB,GAApB,CAAhB,SAA8CM,QAAQI,IAAR,IAAiBT,KAAKU,QAAL,GAAgB,GAAhB,GAAsBV,KAAKW,aAA1F,EAAV;AACA;AACD;AACD,MATD,MASO;AACN,UAAIX,OAAO,KAAKlC,QAAL,CAAcmC,KAAd,CAAoBxB,GAApB,CAAwB,IAAxB,EAA8BsB,QAAQG,SAAR,CAAkB,CAAlB,EAAqBH,QAAQI,MAAR,GAAiB,CAAtC,CAA9B,CAAX;AACA,UAAIH,IAAJ,EAAU;AACTJ,iBAAUQ,IAAV,CAAeJ,IAAf;AACAH,iBAAUA,QAAQU,OAAR,CAAgB,IAAIC,MAAJ,CAAWT,OAAX,EAAoB,GAApB,CAAhB,SAA8CC,KAAKU,QAAL,GAAgB,GAAhB,GAAsBV,KAAKW,aAAzE,EAAV;AACA;AACD;AACD;AApBiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBlC,OAAGjC,WAAWA,QAAQH,MAAnB,IAA6BG,QAAQH,MAAR,CAAeK,KAA/C,EAAsD;AAAA;AAAA;AAAA;;AAAA;AACrD,4BAAqBb,SAAS+B,KAAT,CAAe,aAAf,KAAiC,EAAtD,oIAA2D;AAAA,UAAlDC,OAAkD;AAAE;AAC5D,UAAIpB,OAAOD,QAAQH,MAAR,CAAeK,KAAf,CAAqBH,GAArB,CAAyB,IAAzB,EAA+BsB,QAAQG,SAAR,CAAkB,CAAlB,EAAqBH,QAAQI,MAAR,GAAiB,CAAtC,CAA/B,CAAX;AACA,UAAIxB,IAAJ,EAAU;AACTkB,iBAAUA,QAAQU,OAAR,CAAgB,IAAIC,MAAJ,CAAWT,OAAX,EAAoB,GAApB,CAAhB,QAA8CpB,KAAKiC,IAAnD,CAAV;AACA;AACD;AANoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOrD;AA5BiC;AAAA;AAAA;;AAAA;AA6BlC,2BAAqB7C,SAAS+B,KAAT,CAAe,YAAf,KAAgC,EAArD,oIAA0D;AAAA,SAAjDC,OAAiD;AAAE;AAC3D,SAAIrB,UAAU,KAAKZ,QAAL,CAAc+C,QAAd,CAAuBpC,GAAvB,CAA2B,IAA3B,EAAiCsB,QAAQG,SAAR,CAAkB,CAAlB,EAAqBH,QAAQI,MAAR,GAAiB,CAAtC,CAAjC,CAAd;AACA,SAAIzB,OAAJ,EAAa;AACZmB,gBAAUA,QAAQU,OAAR,CAAgB,IAAIC,MAAJ,CAAWT,OAAX,EAAoB,GAApB,CAAhB,QAA8CrB,QAAQkC,IAAtD,CAAV;AACA;AACD;AAlCiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmClC,UAAO,CAAChB,SAAD,EAAYC,OAAZ,CAAP;AACA;;;gCAEa9B,Q,EAAU;;AAEvB;AACA;;AAEA,OAAIA,oBAAoB+C,KAAxB,EAA+B;AAC9B/C,eAAWA,SAASgD,IAAT,CAAc,IAAd,CAAX;AACA;;AAED,UAAOhD,SAASE,QAAT,EAAP;AACA;;;8BAEWF,Q,EAAU;AACrB;;;AAGA,OAAIA,kCAAJ,EAA8B;AAC7B,WAAOA,QAAP;AACA;AACD,OAAIA,qCAAJ,EAAiC;AAChC,WAAOA,SAASiD,MAAhB;AACA;AACD,OAAIjD,yCAAJ,EAAqC;AACpC,QAAIkD,OAAOlD,SAASmD,WAApB;AACA,QAAID,IAAJ,EAAU;AACT,YAAOA,KAAKD,MAAZ;AACA;AACD;AACD,OAAIjD,oCAAJ,EAAgC;AAC/B,WAAOA,SAASoD,KAAhB;AACA;AACD,OAAIpD,uCAAJ,EAAmC;AAClC,WAAOA,SAASqD,SAAhB;AACA;AACD,OAAIrD,oBAAoBI,MAApB,IAA8B,OAAOJ,QAAP,KAAoB,QAAtD,EAAgE;AAC/D,WAAO,KAAKD,QAAL,CAAcmC,KAAd,CAAoBxB,GAApB,CAAwB,IAAxB,EAA8BV,QAA9B,CAAP;AACA;;AAED,UAAO,IAAP;AACA;;;iCAEcA,Q,EAAU;AACxB;;;AAGA,OAAIA,qCAAJ,EAAiC;AAChC,WAAOe,QAAQC,OAAR,CAAgBhB,QAAhB,CAAP;AACA;AACD,OAAIA,oBAAoBI,MAApB,IAA8B,OAAOJ,QAAP,KAAoB,QAAtD,EAAgE;AAC/D,QAAIQ,SAAS,KAAKT,QAAL,CAAcU,OAAd,CAAsB6C,IAAtB,CAA2B;AAAA,YAAKC,EAAEC,QAAF,CAAWC,GAAX,CAAe,IAAf,EAAqBzD,QAArB,CAAL;AAAA,KAA3B,CAAb;AACA,QAAIQ,MAAJ,EAAY;AACX,YAAOO,QAAQC,OAAR,CAAgBR,OAAOgD,QAAP,CAAgB9C,GAAhB,CAAoB,IAApB,EAA0BV,QAA1B,CAAhB,CAAP;AACA;AACD;AACD,OAAI,QAAOA,QAAP,yCAAOA,QAAP,OAAoB,QAApB,IAAgCA,SAAS0D,cAAT,CAAwB,IAAxB,CAAhC,IAAiE1D,SAAS0D,cAAT,CAAwB,OAAxB,CAArE,EAAuG;AACtG,WAAO3C,QAAQC,OAAR,CAAgBhB,QAAhB,CAAP;AACA;;AAED,OAAI2D,QAAQ,IAAIC,KAAJ,CAAU,2BAAV,CAAZ;AACAD,SAAM3D,QAAN,GAAiBA,QAAjB;AACA,UAAOe,QAAQE,MAAR,CAAe0C,KAAf,CAAP;AACA;;;iCAEc3D,Q,EAAU;AACxB;;AAEA,OAAIA,6CAAmCA,uCAAvC,EAAsE;AACrE,WAAOA,SAASmD,WAAhB;AACA;AACD,OAAInD,qCAAJ,EAAiC;AAChC,WAAOA,QAAP;AACA;;AAED,UAAO,IAAP;AACA;;;iCAEcA,Q,EAAU;AACxB;;;;AAIA,OAAIA,qCAAJ,EAAiC;AAChC,WAAOe,QAAQC,OAAR,CAAgBhB,SAASW,OAAzB,CAAP;AACA;AACD,OAAIX,qCAAJ,EAAiC;AAChC,WAAOe,QAAQC,OAAR,CAAgBhB,QAAhB,CAAP;AACA;AACD,OAAIA,6CAAJ,EAAyC;AACxC,WAAOe,QAAQC,OAAR,CAAgBhB,SAAS6D,YAAzB,CAAP;AACA;AACD,OAAI7D,oCAAJ,EAAgC;AAC/B,WAAOe,QAAQC,OAAR,CAAgBhB,SAAS8D,cAAzB,CAAP;AACA;AACD,OAAI9D,oBAAoBI,MAApB,IAA8B,OAAOJ,QAAP,KAAoB,QAAtD,EAAgE;AAC/D,QAAIiC,OAAO,KAAKlC,QAAL,CAAcmC,KAAd,CAAoBxB,GAApB,CAAwB,IAAxB,EAA8BV,QAA9B,CAAX;AACA,QAAIiC,IAAJ,EAAU;AACTjC,gBAAWiC,IAAX;AACA,KAFD,MAEO;AACN,YAAOlB,QAAQC,OAAR,CAAgB,KAAKjB,QAAL,CAAc+C,QAAd,CAAuBpC,GAAvB,CAA2B,IAA3B,EAAiCV,QAAjC,KAA8C,KAAKD,QAAL,CAAcgE,gBAAd,CAA+BrD,GAA/B,CAAmC,IAAnC,EAAyCV,QAAzC,CAA9D,CAAP;AACA;AACD;AACD,OAAIA,kCAAJ,EAA8B;AAC7B;AAD6B;AAAA;AAAA;;AAAA;AAE7B,2BAAmB,KAAKD,QAAL,CAAcgE,gBAAjC,mIAAmD;AAAA,UAA1CC,MAA0C;;AAClD,UAAIA,OAAOC,UAAP,CAAkB7B,MAAlB,KAA6B,CAA7B,IAAkC4B,OAAOX,SAAzC,IAAsDW,OAAOX,SAAP,CAAiBa,MAAjB,CAAwBlE,QAAxB,CAA1D,EAA6F;AAC5F,cAAOe,QAAQC,OAAR,CAAgBgD,MAAhB,CAAP;AACA;AACD;;AAED;AAR6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAS7B,WAAO,KAAKjE,QAAL,CAAcoE,OAAd,CAAsBnE,QAAtB,CAAP;AACA;AACD,OAAI2D,QAAQ,IAAIC,KAAJ,CAAU,2BAAV,CAAZ;AACAD,SAAM3D,QAAN,GAAiBA,QAAjB;AACA,UAAOe,QAAQE,MAAR,CAAe0C,KAAf,CAAP;AACA;;;;;;kBAhPmB7D,Q","file":"Resolver.js","sourcesContent":["\"use strict\";\n/* global Buffer */\n\n/**\n * Resolves supplied data type to a Channel. If a String, it should be a Channel ID.\n * @typedef {(Channel|Server|Message|User|String)} ChannelResolvable\n*/\n/**\n * Resolves supplied data type to a TextChannel or PMChannel. If a String, it should be a Channel ID.\n * @typedef {(TextChannel|PMChannel|Server|Message|User|String)} TextChannelResolvable\n*/\n/**\n * If given an array, turns it into a newline-separated string.\n * @typedef {(String|Array)} StringResolvable\n*/\n/**\n * Resolves supplied data type to a Message. If a channel, it is the latest message from that channel.\n * @typedef {(Message|TextChannel|PMChannel)} MessageResolvable\n*/\n/**\n * Resolves supplied data type to a Server. If a String, it should be the server's ID.\n * @typedef {(Server|ServerChannel|Message|String)} ServerResolvable\n */\n/**\n * Resolves supplied data type to something that can be attached to a message. If a String, it can be an URL or a path to a local file.\n * @typedef {(String|ReadableStream|Buffer)} FileResolvable\n */\n/**\n * Resolves supplied data type to an invite ID. If a String, it should be an ID or a direct URL to the invite.\n * @typedef {(Invite|String)} InviteIDResolvable\n */\n\nimport fs from \"fs\";\nimport request from \"superagent\";\n\nimport User from \"../../Structures/User\";\nimport Channel from \"../../Structures/Channel\";\nimport TextChannel from \"../../Structures/TextChannel\";\nimport VoiceChannel from \"../../Structures/VoiceChannel\";\nimport ServerChannel from \"../../Structures/ServerChannel\";\nimport PMChannel from \"../../Structures/PMChannel\";\nimport Role from \"../../Structures/Role\";\nimport Server from \"../../Structures/Server\";\nimport Message from \"../../Structures/Message\";\nimport Invite from \"../../Structures/Invite\";\nimport Webhook from \"../../Structures/Webhook\";\nimport VoiceConnection from \"../../Voice/VoiceConnection\";\n\nexport default class Resolver {\n\tconstructor(internal) {\n\t\tthis.internal = internal;\n\t}\n\n\tresolveToBase64(resource) {\n\t\tif (resource instanceof Buffer) {\n\t\t\tresource = resource.toString(\"base64\");\n\t\t\tresource = \"data:image/jpg;base64,\" + resource;\n\t\t}\n\t\treturn resource;\n\t}\n\n\tresolveInviteID(resource) {\n\t\tif (resource instanceof Invite) {\n\t\t\treturn resource.id;\n\t\t}\n\t\tif (typeof resource === \"string\" || resource instanceof String) {\n\t\t\tif (resource.indexOf(\"http\") === 0) {\n\t\t\t\tvar split = resource.split(\"/\");\n\t\t\t\treturn split.pop();\n\t\t\t}\n\t\t\treturn resource;\n\t\t}\n\t\treturn null;\n\t}\n\n\tresolveServer(resource) {\n\t\tif (resource instanceof Server) {\n\t\t\treturn resource;\n\t\t}\n\t\tif (resource instanceof ServerChannel) {\n\t\t\treturn resource.server;\n\t\t}\n\t\tif (resource instanceof String || typeof resource === \"string\") {\n\t\t\treturn this.internal.servers.get(\"id\", resource);\n\t\t}\n\t\tif (resource instanceof Message) {\n\t\t\tif (resource.channel instanceof TextChannel) {\n\t\t\t\treturn resource.channel.server;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tresolveRole(resource) {\n\t\tif (resource instanceof Role) {\n\t\t\treturn resource;\n\t\t}\n\t\tif (resource instanceof String || typeof resource === \"string\") {\n\t\t\tvar role = null;\n\t\t\tfor (var server of this.internal.servers) {\n\t\t\t\tif (role = server.roles.get(\"id\", resource)) {\n\t\t\t\t\treturn role;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tresolveFile(resource) {\n\t\tif (typeof resource === \"string\" || resource instanceof String) {\n\t\t\tif (/^https?:\\/\\//.test(resource)) {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\trequest.get(resource).buffer().parse((res, cb) => {\n\t\t\t\t\t\tres.setEncoding(\"binary\");\n\t\t\t\t\t\tres.data = \"\";\n\t\t\t\t\t\tres.on(\"data\", (chunk) => {\n\t\t\t\t\t\t\tres.data += chunk;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tres.on(\"end\", () => {\n\t\t\t\t\t\t\tcb(null, new Buffer(res.data, \"binary\"));\n\t\t\t\t\t\t});\n\t\t\t\t\t}).end((err, res) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn resolve(res.body);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn Promise.resolve(resource);\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(resource);\n\t}\n\n\tresolveMentions(resource, channel) {\n\t\tvar _mentions = [];\n\t\tvar changed = resource;\n\t\tfor (var mention of (resource.match(/<@\\!?[0-9]+>/g) || [])) { // username mention\n\t\t\tif (mention[2] === '!') {\n\t\t\t\tvar user = this.internal.users.get(\"id\", mention.substring(3, mention.length - 1));\n\t\t\t\tif (user) {\n\t\t\t\t\t_mentions.push(user);\n\t\t\t\t\tvar details = channel.server && channel.server.detailsOf(user);\n\t\t\t\t\tif (details) {\n\t\t\t\t\t\tchanged = changed.replace(new RegExp(mention, \"g\"), `@${details.nick || (user.username + \"#\" + user.discriminator)}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar user = this.internal.users.get(\"id\", mention.substring(2, mention.length - 1));\n\t\t\t\tif (user) {\n\t\t\t\t\t_mentions.push(user);\n\t\t\t\t\tchanged = changed.replace(new RegExp(mention, \"g\"), `@${user.username + \"#\" + user.discriminator}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(channel && channel.server && channel.server.roles) {\n\t\t\tfor (var mention of (resource.match(/<@&[0-9]+>/g) || [])) { // role mention\n\t\t\t\tvar role = channel.server.roles.get(\"id\", mention.substring(3, mention.length - 1));\n\t\t\t\tif (role) {\n\t\t\t\t\tchanged = changed.replace(new RegExp(mention, \"g\"), `@${role.name}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (var mention of (resource.match(/<#[0-9]+>/g) || [])) { // channel mention\n\t\t\tvar channel = this.internal.channels.get(\"id\", mention.substring(2, mention.length - 1));\n\t\t\tif (channel) {\n\t\t\t\tchanged = changed.replace(new RegExp(mention, \"g\"), `#${channel.name}`);\n\t\t\t}\n\t\t}\n\t\treturn [_mentions, changed];\n\t}\n\n\tresolveString(resource) {\n\n\t\t// accepts Array, Channel, Server, User, Message, String and anything\n\t\t// toString()-able\n\n\t\tif (resource instanceof Array) {\n\t\t\tresource = resource.join(\"\\n\");\n\t\t}\n\n\t\treturn resource.toString();\n\t}\n\n\tresolveUser(resource) {\n\t\t/*\n\t\t\taccepts a Message, Channel, Server, String ID, User, PMChannel\n\t\t*/\n\t\tif (resource instanceof User) {\n\t\t\treturn resource;\n\t\t}\n\t\tif (resource instanceof Message) {\n\t\t\treturn resource.author;\n\t\t}\n\t\tif (resource instanceof TextChannel) {\n\t\t\tvar lmsg = resource.lastMessage;\n\t\t\tif (lmsg) {\n\t\t\t\treturn lmsg.author;\n\t\t\t}\n\t\t}\n\t\tif (resource instanceof Server) {\n\t\t\treturn resource.owner;\n\t\t}\n\t\tif (resource instanceof PMChannel) {\n\t\t\treturn resource.recipient;\n\t\t}\n\t\tif (resource instanceof String || typeof resource === \"string\") {\n\t\t\treturn this.internal.users.get(\"id\", resource);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tresolveWebhook(resource) {\n\t\t/*\n\t\t accepts a Webhook\n\t\t */\n\t\tif (resource instanceof Webhook) {\n\t\t\treturn Promise.resolve(resource);\n\t\t}\n\t\tif (resource instanceof String || typeof resource === \"string\") {\n\t\t\tlet server = this.internal.servers.find(s => s.webhooks.has(\"id\", resource));\n\t\t\tif (server) {\n\t\t\t\treturn Promise.resolve(server.webhooks.get(\"id\", resource));\n\t\t\t}\n\t\t}\n\t\tif (typeof resource === \"object\" && resource.hasOwnProperty(\"id\") && resource.hasOwnProperty(\"token\")) {\n\t\t\treturn Promise.resolve(resource);\n\t\t}\n\n\t\tvar error = new Error(\"Could not resolve webhook\");\n\t\terror.resource = resource;\n\t\treturn Promise.reject(error);\n\t}\n\n\tresolveMessage(resource) {\n\t\t// accepts a Message, PMChannel & TextChannel\n\n\t\tif (resource instanceof TextChannel || resource instanceof PMChannel) {\n\t\t\treturn resource.lastMessage;\n\t\t}\n\t\tif (resource instanceof Message) {\n\t\t\treturn resource;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tresolveChannel(resource) {\n\t\t/*\n\t\t\taccepts a Message, Channel, VoiceConnection, Server, String ID, User\n\t\t*/\n\n\t\tif (resource instanceof Message) {\n\t\t\treturn Promise.resolve(resource.channel);\n\t\t}\n\t\tif (resource instanceof Channel) {\n\t\t\treturn Promise.resolve(resource);\n\t\t}\n\t\tif (resource instanceof VoiceConnection) {\n\t\t\treturn Promise.resolve(resource.voiceChannel);\n\t\t}\n\t\tif (resource instanceof Server) {\n\t\t\treturn Promise.resolve(resource.defaultChannel);\n\t\t}\n\t\tif (resource instanceof String || typeof resource === \"string\") {\n\t\t\tvar user = this.internal.users.get(\"id\", resource);\n\t\t\tif (user) {\n\t\t\t\tresource = user;\n\t\t\t} else {\n\t\t\t\treturn Promise.resolve(this.internal.channels.get(\"id\", resource) || this.internal.private_channels.get(\"id\", resource));\n\t\t\t}\n\t\t}\n\t\tif (resource instanceof User) {\n\t\t\t// see if a PM exists\n\t\t\tfor (var pmchat of this.internal.private_channels) {\n\t\t\t\tif (pmchat.recipients.length === 1 && pmchat.recipient && pmchat.recipient.equals(resource)) {\n\t\t\t\t\treturn Promise.resolve(pmchat);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// PM does not exist :\\\n\t\t\treturn this.internal.startPM(resource);\n\t\t}\n\t\tvar error = new Error(\"Could not resolve channel\");\n\t\terror.resource = resource;\n\t\treturn Promise.reject(error);\n\t}\n}\n"]}