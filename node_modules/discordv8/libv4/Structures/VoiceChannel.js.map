{"version":3,"sources":["../../src/Structures/VoiceChannel.js"],"names":["VoiceChannel","data","client","server","members","userLimit","user_limit","_bitrate","bitrate","Math","round","obj","map","member","toObject","callback","joinVoiceChannel","apply","setChannelUserLimit","arguments","setChannelBitrate"],"mappings":"AAAA;;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;IAEqBA,Y;;;AACpB,uBAAYC,IAAZ,EAAkBC,MAAlB,EAA0BC,MAA1B,EAAiC;AAAA;;AAAA,0HAC1BF,IAD0B,EACpBC,MADoB,EACZC,MADY;;AAEhC,QAAKC,OAAL,GAAeH,KAAKG,OAAL,IAAgB,qBAA/B;AACA,QAAKC,SAAL,GAAiBJ,KAAKK,UAAL,IAAmB,CAApC;AACA,QAAKC,QAAL,GAAgBN,KAAKO,OAAL,IAAgB,KAAhC,CAJgC,CAIO;AACvC,QAAKA,OAAL,GAAeC,KAAKC,KAAL,CAAW,MAAKH,QAAL,GAAgB,IAA3B,CAAf,CALgC,CAKiB;AALjB;AAMhC;;;;6BAEU;AACV,OAAII,0HAAJ;;AAEAA,OAAIN,SAAJ,GAAgB,KAAKA,SAArB;AACAM,OAAIH,OAAJ,GAAc,KAAKA,OAAnB;AACAG,OAAIP,OAAJ,GAAc,KAAKA,OAAL,CAAaQ,GAAb,CAAiB;AAAA,WAAUC,OAAOC,QAAP,EAAV;AAAA,IAAjB,CAAd;;AAEA,UAAOH,GAAP;AACA;;;yBAEgC;AAAA,OAA5BI,QAA4B,uEAAjB,YAAY,CAAG,CAAE;;AAChC,UAAO,KAAKb,MAAL,CAAYc,gBAAZ,CAA6BC,KAA7B,CAAmC,KAAKf,MAAxC,EAAgD,CAAC,IAAD,EAAOa,QAAP,CAAhD,CAAP;AACA;;;iCAEc;AACd,UAAO,KAAKb,MAAL,CAAYgB,mBAAZ,CAAgCD,KAAhC,CAAsC,KAAKf,MAA3C,EAAmD,8BAAI,IAAJ,EAAUiB,SAAV,CAAnD,CAAP;AACA;;;+BAEY;AACZ,UAAO,KAAKjB,MAAL,CAAYkB,iBAAZ,CAA8BH,KAA9B,CAAoC,KAAKf,MAAzC,EAAiD,8BAAI,IAAJ,EAAUiB,SAAV,CAAjD,CAAP;AACA;;;;;;kBA7BmBnB,Y","file":"VoiceChannel.js","sourcesContent":["\"use strict\";\n\nimport ServerChannel from \"./ServerChannel\";\nimport Cache from \"../Util/Cache\";\nimport {reg} from \"../Util/ArgumentRegulariser\";\n\nexport default class VoiceChannel extends ServerChannel{\n\tconstructor(data, client, server){\n\t\tsuper(data, client, server);\n\t\tthis.members = data.members || new Cache();\n\t\tthis.userLimit = data.user_limit || 0;\n\t\tthis._bitrate = data.bitrate || 64000; // incase somebody wants to access the bps value???\n\t\tthis.bitrate = Math.round(this._bitrate / 1000); // store as kbps\n\t}\n\n\ttoObject() {\n\t\tlet obj = super.toObject();\n\t\t\n\t\tobj.userLimit = this.userLimit;\n\t\tobj.bitrate = this.bitrate;\n\t\tobj.members = this.members.map(member => member.toObject());\n\n\t\treturn obj;\n\t}\n\n\tjoin(callback = function () { }) {\n\t\treturn this.client.joinVoiceChannel.apply(this.client, [this, callback]);\n\t}\n\n\tsetUserLimit() {\n\t\treturn this.client.setChannelUserLimit.apply(this.client, reg(this, arguments));\n\t}\n\n\tsetBitrate() {\n\t\treturn this.client.setChannelBitrate.apply(this.client, reg(this, arguments));\n\t}\n}\n"]}