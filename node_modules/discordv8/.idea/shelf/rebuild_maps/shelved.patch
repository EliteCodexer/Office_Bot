Index: lib/Client/InternalClient.js.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/Client/InternalClient.js.map	(revision 06517bfced82109600a92b614d27d36ac0316e46)
+++ lib/Client/InternalClient.js.map	(revision )
@@ -1,1 +1,5 @@
-{"version":3,"sources":["../../src/Client/InternalClient.js"],"names":["GATEWAY_VERSION","zlib","waitFor","condition","value","interval","Promise","resolve","int","setInterval","isDone","clearInterval","delay","ms","setTimeout","InternalClient","constructor","discordClient","setupCalled","setup","apiRequest","method","url","useAuth","data","file","reject","promise","res","rej","buckets","match","channels","get","private_channels","server","id","user","bot","username","self","actualCall","startTime","Date","now","ret","set","token","attach","name","i","hasOwnProperty","undefined","field","send","userAgentInfo","full","end","error","status","client","emit","options","shard","body","done","bucket","queue","state","IDLE","websocket","userAgent","version","require","compress","users","friends","blocked_users","outgoing_friend_requests","incoming_friend_requests","servers","unavailableServers","autoReconnectInterval","unsyncedGuilds","guildSyncQueue","guildSyncQueueLength","intervals","typing","kai","misc","voiceConnections","resolver","readyTime","messageAwaits","tokenCacher","init","cleanIntervals","concat","disconnected","autoReconnect","forEach","vc","leaveVoiceChannel","Math","min","random","email","loginWithToken","password","catch","uptime","info","chann","leave","connection","destroy","resolveChannel","then","channel","Error","type","awaitResponse","msg","resolveMessage","awaitID","author","push","joinVoiceChannel","joinSendWS","sendWS","op","d","joinVoice","session","sessionID","endpoint","timeout","check","t","guild_id","chan","add","on","clearTimeout","removeListener","existingServerConn","length","voiceConnection","getGuildMembers","serverID","chunkCount","forceFetchCount","forceFetchLength","requestGuildMembers","forceFetchQueue","query","limit","syncGuild","guildID","checkReady","key","restartServerCreateTimeout","guildCreateTimeout","createServer","region","resolveString","SERVERS","joinServer","invite","resolveInviteID","INVITE","guild","updateServer","resolveServer","newOptions","icon","resolveToBase64","splash","owner","resolveUser","owner_id","verificationLevel","verification_level","afkChannel","afk_channel_id","afkTimeout","afk_timeout","SERVER","leaveServer","srv","ME_SERVER","deleteServer","LOGGED_IN","getGateway","startsWith","createWS","login","tk","getToken","DISCONNECTED","LOGGING_IN","LOGIN","setToken","logout","disconnect","close","LOGOUT","startPM","resUser","ME_CHANNELS","recipient_id","gatewayURL","GATEWAY","sendMessage","where","_content","String","basename","path","destination","content","disableEveryone","replace","resolveFile","CHANNEL_MESSAGES","tts","nonce","messages","sendFile","_file","deleteMessage","_message","message","chain","wait","CHANNEL_MESSAGE","remove","deleteMessages","_messages","Array","map","m","updateMessage","update","getChannelLogs","_channel","qsObject","before","after","around","stringify","getMessage","messageID","pinMessage","CHANNEL_PIN","unpinMessage","pinned","getPinnedMessages","CHANNEL_PINS","getBans","SERVER_BANS","ban","createChannel","SERVER_CHANNELS","deleteChannel","CHANNEL","banMember","resolvedUser","unbanMember","kickMember","SERVER_MEMBERS","moveMember","channel_id","voiceChannel","muteMember","mute","unmuteMember","deafenMember","deaf","undeafenMember","setNickname","nick","setNote","note","ME_NOTES","createRole","SERVER_ROLES","role","roles","updateRole","resolveRole","newData","color","hoist","position","permissions","mentionable","perm","deleteRole","addMemberToRole","member","isArray","r","some","memberMap","roleIDs","indexOf","memberHasRole","roledata","rolesOf","removeMemberFromRole","item","splice","createInvite","chanServ","validate","max_age","maxAge","max_uses","maxUses","temporary","xkcdpass","xkcd","CHANNEL_INVITES","deleteInvite","getInvite","has","res2","getInvites","SERVER_INVITES","overwritePermissions","updated","allow","deny","previousOverwrite","permissionOverwrites","CHANNEL_PERMISSIONS","setStatus","idleStatus","game","packet","idle_since","sendTyping","startTyping","stopTyping","updateDetails","avatar","new_password","newPassword","ME","setAvatar","setUsername","setChannelTopic","topic","updateChannel","setChannelName","setChannelPosition","setChannelUserLimit","userLimit","setChannelBitrate","kbitrate","bitrate","user_limit","ceil","_bitrate","addFriend","discriminator","FRIENDS","removeFriend","getServerWebhooks","SERVER_WEBHOOKS","webhook","webhooks","getChannelWebhooks","CHANNEL_WEBHOOKS","editWebhook","resolveWebhook","WEBHOOK","createWebhook","deleteWebhook","sendWebhookMessage","slack","WEBHOOK_MESSAGE","getOAuthApplication","appID","OAUTH2_APPLICATION","ack","object","JSON","endsWith","onopen","onclose","event","code","err","sequence","onerror","e","onmessage","Buffer","inflateSync","toString","parse","s","processPacket","heartbeatAcked","heartbeat","identify","resume","heartbeat_interval","RESUMED","READY","session_id","guilds","unavailable","forceFetchUsers","members","memberCount","pm","relationships","friend","notes","newUser","MESSAGE_CREATE","lastMessageID","fn","MESSAGE_DELETE","MESSAGE_DELETE_BULK","ids","MESSAGE_UPDATE","attachments","embeds","timestamp","mention_everyone","everyoneMentioned","mentions","nmsg","SERVER_CREATE","large","SERVER_DELETE","found","SERVER_UPDATE","newserver","equalsStrict","CHANNEL_CREATE","is_private","CHANNEL_DELETE","CHANNEL_UPDATE","SERVER_ROLE_CREATE","SERVER_ROLE_DELETE","role_id","SERVER_ROLE_UPDATE","newRole","SERVER_MEMBER_ADD","selfMute","selfDeaf","joinedAt","joined_at","SERVER_MEMBER_REMOVE","SERVER_MEMBER_UPDATE","oldMember","self_mute","self_deaf","PRESENCE_UPDATE","presenceUser","USER_UPDATE","TYPING","user_id","since","SERVER_BAN_ADD","SERVER_BAN_REMOVE","USER_NOTE_UPDATE","oldNote","updatedUser","VOICE_STATE_UPDATE","eventVoiceStateUpdate","eventVoiceLeave","SERVER_MEMBERS_CHUNK","testtime","FRIEND_ADD","inUser","outUser","FRIEND_REMOVE","rejectedUser","incomingCancel","SERVER_SYNC","dataUser","internal","presence","presences","pendingVoiceStates","voiceState","eventVoiceJoin","seq","v","large_threshold","largeThreshold","properties","process","platform"],"mappings":"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","file":"InternalClient.js","sourcesContent":["\"use strict\";\n\nimport request from \"superagent\";\nimport WebSocket from \"ws\";\nimport ConnectionState from \"./ConnectionState\";\nimport qs from \"querystring\";\n\nimport {Endpoints, PacketType, Permissions} from \"../Constants\";\n\nimport Bucket from \"../Util/Bucket\";\nimport Cache from \"../Util/Cache\";\nimport Resolver from \"./Resolver/Resolver\";\n\nimport User from \"../Structures/User\";\nimport Channel from \"../Structures/Channel\";\nimport ServerChannel from \"../Structures/ServerChannel\";\nimport TextChannel from \"../Structures/TextChannel\";\nimport VoiceChannel from \"../Structures/VoiceChannel\";\nimport PMChannel from \"../Structures/PMChannel\";\nimport Server from \"../Structures/Server\";\nimport Message from \"../Structures/Message\";\nimport Role from \"../Structures/Role\";\nimport Invite from \"../Structures/Invite\";\nimport Webhook from \"../Structures/Webhook\";\nimport VoiceConnection from \"../Voice/VoiceConnection\";\nimport TokenCacher from \"../Util/TokenCacher\";\n\nlet GATEWAY_VERSION = 6;\nlet zlib;\n// let libVersion = require('../../package.json').version;\n\nfunction waitFor(condition, value = condition, interval = 20) {\n  return new Promise(resolve => {\n    let int = setInterval(() => {\n      let isDone = condition();\n      if (isDone) {\n        if (condition === value) {\n          resolve(isDone);\n        } else {\n          resolve(value(isDone));\n        }\n        return clearInterval(int);\n      }\n    }, interval);\n  });\n}\n\nfunction delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport default class InternalClient {\n  constructor(discordClient) {\n    this.setupCalled = false;\n    this.setup(discordClient);\n  }\n\n  apiRequest(method, url, useAuth, data, file) {\n    let resolve, reject;\n    let promise = new Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n    let buckets = [];\n    let match = url.match(/\\/channels\\/([0-9]+)\\/messages(\\/[0-9]+)?$/);\n    if (match) {\n      if (method === \"del\" && (match[1] = this.channels.get(\"id\", match[1]) || this.private_channels.get(\"id\", match[1]))) {\n        buckets = [\"dmsg:\" + (match[1].server || {}).id];\n      } else if (this.user.bot) {\n        if (method === \"post\" || method === \"patch\") {\n          if (this.private_channels.get(\"id\", match[1])) {\n            buckets = [\"bot:msg:dm\", \"bot:msg:global\"];\n          } else if ((match[1] = this.channels.get(\"id\", match[1]))) {\n            buckets = [\"bot:msg:guild:\" + match[1].server.id, \"bot:msg:global\"];\n          }\n        }\n      } else {\n        buckets = [\"msg\"];\n      }\n    } else if (method === \"patch\") {\n      if (url === \"/users/@me\" && this.user && data.username && data.username !== this.user.username) {\n        buckets = [\"username\"];\n      } else if ((match = url.match(/\\/guilds\\/([0-9]+)\\/members\\/[0-9]+$/))) {\n        buckets = [\"guild_member:\" + match[1]];\n      } else if ((match = url.match(/\\/guilds\\/([0-9]+)\\/members\\/@me\\/nick$/))) {\n        buckets = [\"guild_member_nick:\" + match[1]];\n      }\n    }\n\n    let self = this;\n\n    let actualCall = function () {\n      let startTime = Date.now();\n      let ret = request[method](url);\n      if (useAuth) {\n        ret.set(\"authorization\", self.token);\n      }\n      if (file) {\n        ret.attach(\"file\", file.file, file.name);\n        if (data) {\n          for (let i in data) {\n            if (data.hasOwnProperty(i)) {\n              if (data[i] !== undefined) {\n                ret.field(i, data[i]);\n              }\n            }\n          }\n        }\n      } else if (data) {\n        ret.send(data);\n      }\n      ret.set('User-Agent', self.userAgentInfo.full);\n      ret.end((error, data) => {\n        if (error) {\n          if (data && data.status === 429) {\n            self.client.emit(\"debug\", \"Encountered 429 at \" + url + \" | \" + self.client.options.shard + \" | Buckets\" + buckets + \" | \" + (Date.now() - startTime) + \"ms latency\");\n          }\n          reject(error);\n        } else {\n          resolve(data.body);\n        }\n      });\n    };\n    let waitFor = 1;\n    let i = 0;\n    let done = function () {\n      if (++i === waitFor) {\n        actualCall();\n      }\n    };\n    for (let bucket of buckets) {\n      ++waitFor;\n      this.buckets[bucket].queue(done);\n    }\n    done();\n    return promise;\n  }\n\n  setup(discordClient) {\n    this.setupCalled = true;\n    discordClient = discordClient || this.client;\n    this.client = discordClient;\n    this.state = ConnectionState.IDLE;\n    this.websocket = null;\n    this.userAgent = {\n      url: 'https://github.com/hydrabolt/discord.js',\n      version: require('../../package.json').version\n    };\n\n    if (this.client.options.compress) {\n      zlib = require(\"zlib\");\n    }\n\n    // creates 4 caches with discriminators based on ID\n    this.users = new Cache();\n    this.friends = new Cache();\n    this.blocked_users = new Cache();\n    this.outgoing_friend_requests = new Cache();\n    this.incoming_friend_requests = new Cache();\n    this.channels = new Cache();\n    this.servers = new Cache();\n    this.unavailableServers = new Cache();\n    this.private_channels = new Cache();\n    this.autoReconnectInterval = 1000;\n    this.unsyncedGuilds = 0;\n    this.guildSyncQueue = [];\n    this.guildSyncQueueLength = 1;\n\n    this.intervals = {\n      typing: [],\n      kai: null,\n      misc: []\n    };\n\n    this.voiceConnections = new Cache();\n    this.resolver = new Resolver(this);\n    this.readyTime = null;\n    this.messageAwaits = {};\n    this.buckets = {\n      \"bot:msg:dm\": new Bucket(5, 5000),\n      \"bot:msg:global\": new Bucket(50, 10000),\n      \"msg\": new Bucket(10, 10000),\n      \"dmsg:undefined\": new Bucket(5, 1000),\n      \"username\": new Bucket(2, 3600000)\n    };\n\n    if (!this.tokenCacher) {\n      this.tokenCacher = new TokenCacher(this.client);\n      this.tokenCacher.init(0);\n    }\n  }\n\n  cleanIntervals() {\n    for (let interval of this.intervals.typing.concat(this.intervals.misc).concat(this.intervals.kai)) {\n      if (interval) {\n        clearInterval(interval);\n      }\n    }\n  }\n\n  disconnected(autoReconnect = false) {\n\n    this.cleanIntervals();\n\n    this.voiceConnections.forEach(vc => {\n      this.leaveVoiceChannel(vc);\n    });\n\n    if (autoReconnect) {\n      this.autoReconnectInterval = Math.min(this.autoReconnectInterval * (Math.random() + 1), 60000);\n      setTimeout(() => {\n        if (!this.email && !this.token) {\n          return;\n        }\n\n        // Check whether the email is set (if not, only a token has been used for login)\n        this.loginWithToken(this.token, this.email, this.password).catch(() => this.disconnected(true));\n      }, this.autoReconnectInterval);\n    }\n\n    this.client.emit(\"disconnected\");\n  }\n\n  get uptime() {\n    return (this.readyTime ? Date.now() - this.readyTime : null);\n  }\n\n  set userAgent(info) {\n    info.full = `DiscordBot (${info.url}, ${info.version})`;\n    this.userAgentInfo = info;\n  }\n\n  get userAgent() {\n    return this.userAgentInfo;\n  }\n\n  //def leaveVoiceChannel\n  leaveVoiceChannel(chann) {\n    if (this.user.bot) {\n      let leave = (connection) => {\n        return new Promise((resolve) => {\n          connection.destroy();\n          resolve();\n        });\n      };\n\n      if (chann instanceof VoiceChannel) {\n        return this.resolver.resolveChannel(chann).then(channel => {\n          if (!channel) {\n            return Promise.reject(new Error(\"voice channel does not exist\"));\n          }\n\n          if (channel.type !== 2) {\n            return Promise.reject(new Error(\"channel is not a voice channel!\"));\n          }\n\n          let connection = this.voiceConnections.get(\"voiceChannel\", channel);\n          if (!connection) {\n            return Promise.reject(new Error(\"not connected to that voice channel\"));\n          }\n          return leave(connection);\n        });\n      } else if (chann instanceof VoiceConnection) {\n        return leave(chann);\n      } else {\n        return Promise.reject(new Error(\"invalid voice channel/connection to leave\"))\n      }\n    } else {\n      // preserve old functionality for non-bots\n      if (this.voiceConnections[0]) {\n        this.voiceConnections[0].destroy();\n      }\n      return Promise.resolve();\n    }\n  }\n\n  //def awaitResponse\n  awaitResponse(msg) {\n    return new Promise((resolve, reject) => {\n\n      msg = this.resolver.resolveMessage(msg);\n\n      if (!msg) {\n        reject(new Error(\"message undefined\"));\n        return;\n      }\n\n      let awaitID = msg.channel.id + msg.author.id;\n\n      if (!this.messageAwaits[awaitID]) {\n        this.messageAwaits[awaitID] = [];\n      }\n\n      this.messageAwaits[awaitID].push(resolve);\n    });\n  }\n\n  //def joinVoiceChannel\n  joinVoiceChannel(chann) {\n    return this.resolver.resolveChannel(chann).then(channel => {\n      if (!channel) {\n        return Promise.reject(new Error(\"voice channel does not exist\"));\n      }\n\n      if (channel.type !== 2) {\n        return Promise.reject(new Error(\"channel is not a voice channel!\"));\n      }\n\n      let joinSendWS = () => {\n        this.sendWS({\n          op: 4,\n          d: {\n            \"guild_id\": channel.server.id,\n            \"channel_id\": channel.id,\n            \"self_mute\": false,\n            \"self_deaf\": false\n          }\n        });\n      };\n\n      let joinVoice = () => {\n        return new Promise((resolve, reject) => {\n          let session = this.sessionID, token, server = channel.server, endpoint;\n\n          let timeout = null;\n\n          let check = data => {\n            if (data.t === \"VOICE_SERVER_UPDATE\") {\n              if (data.d.guild_id !== server.id) return; // ensure it is the right server\n              token = data.d.token;\n              endpoint = data.d.endpoint;\n              if (!token || !endpoint) return;\n              let chan = new VoiceConnection(\n                channel, this.client, session, token, server, endpoint\n              );\n              this.voiceConnections.add(chan);\n\n              chan.on(\"ready\", () => resolve(chan));\n              chan.on(\"error\", reject);\n              chan.on(\"close\", reject);\n\n              if (timeout) {\n                clearTimeout(timeout);\n              }\n              this.client.removeListener(\"raw\", check);\n            }\n          };\n\n          timeout = setTimeout(() => {\n            this.client.removeListener(\"raw\", check);\n            reject(new Error(\"No voice server details within 10 seconds\"));\n          }, 10000);\n\n          this.client.on(\"raw\", check);\n          joinSendWS();\n        });\n      };\n\n      let existingServerConn = this.voiceConnections.get(\"server\", channel.server); // same server connection\n      if (existingServerConn) {\n        joinSendWS(); // Just needs to update by sending via WS, movement in cache will be handled by global handler\n        return Promise.resolve(existingServerConn);\n      }\n\n      if (!this.user.bot && this.voiceConnections.length > 0) { // nonbot, one voiceconn only, just like last time just disconnect\n        return this.leaveVoiceChannel().then(joinVoice);\n      }\n\n      return joinVoice();\n    });\n  }\n\n  // Backwards-compatible utility getter method for the first voice connection\n  // Thanks to #q (@qeled) for suggesting this\n  get voiceConnection() {\n    return this.voiceConnections[0];\n  }\n\n  getGuildMembers(serverID, chunkCount) {\n    this.forceFetchCount[serverID] = chunkCount;\n    if (this.forceFetchLength + 3 + serverID.length > 4000) { // 4096 max, '{\"op\":8,\"d\":{\"guild_id\":[],\"query\":\"\",\"limit\":0}}'.length = 49 plus some leeway\n      this.requestGuildMembers(this.forceFetchQueue);\n      this.forceFetchQueue = [serverID];\n      this.forceFetchLength = 1 + serverID.length + 3;\n    } else {\n      this.forceFetchQueue.push(serverID);\n      this.forceFetchLength += serverID.length + 3;\n    }\n  }\n\n  requestGuildMembers(serverID, query, limit) {\n    this.sendWS({\n      op: 8,\n      d: {\n        guild_id: serverID,\n        query: query || \"\",\n        limit: limit || 0\n      }\n    });\n  }\n\n  syncGuild(guildID) {\n    if (this.guildSyncQueueLength + 3 + guildID.length > 4050) { // 4096 max, '{\"op\":12,\"d\":[]}'.length = 16 plus some leeway\n      this.sendWS({op: 12, d: this.guildSyncQueue});\n      this.guildSyncQueue = [guildID];\n      this.guildSyncQueueLength = 1 + guildID.length + 3;\n    } else {\n      this.guildSyncQueue.push(guildID);\n      this.guildSyncQueueLength += guildID.length + 3;\n    }\n  }\n\n  checkReady() {\n    if (!this.readyTime) {\n      if (this.guildSyncQueue.length > 0) {\n        this.sendWS({op: 12, d: this.guildSyncQueue});\n        this.guildSyncQueue = [];\n        this.guildSyncQueueLength = 1;\n        return;\n      }\n      if (this.unsyncedGuilds > 0) {\n        return;\n      }\n      if (this.forceFetchQueue.length > 0) {\n        this.requestGuildMembers(this.forceFetchQueue);\n        this.forceFetchQueue = [];\n        this.forceFetchLength = 1;\n      } else {\n        for (let key in this.forceFetchCount) {\n          if (this.forceFetchCount.hasOwnProperty(key)) {\n            return;\n          }\n        }\n        this.readyTime = Date.now();\n        this.client.emit(\"ready\");\n      }\n    }\n  }\n\n  restartServerCreateTimeout() {\n    if (this.guildCreateTimeout) {\n      clearTimeout(this.guildCreateTimeout);\n      this.guildCreateTimeout = null;\n    }\n    if (!this.readyTime) {\n      this.guildCreateTimeout = setTimeout(() => {\n        this.checkReady();\n      }, this.client.options.guildCreateTimeout);\n    }\n  }\n\n  // def createServer\n  createServer(name, region = \"london\") {\n    name = this.resolver.resolveString(name);\n\n    return this.apiRequest('post', Endpoints.SERVERS, true, {name, region})\n      .then(res => {\n        // valid server, wait until it is cached\n        return waitFor(() => this.servers.get(\"id\", res.id));\n      });\n  }\n\n  //def joinServer\n  joinServer(invite) {\n    invite = this.resolver.resolveInviteID(invite);\n    if (!invite) {\n      return Promise.reject(new Error(\"Not a valid invite\"));\n    }\n\n    return this.apiRequest(\"post\", Endpoints.INVITE(invite), true)\n      .then(res => {\n        // valid server, wait until it is received via ws and cached\n        return waitFor(() => this.servers.get(\"id\", res.guild.id));\n      });\n  }\n\n  //def updateServer\n  updateServer(server, options) {\n    server = this.resolver.resolveServer(server);\n    if (!server) {\n      return Promise.reject(new Error(\"server did not resolve\"));\n    }\n\n    let newOptions = {\n      name: options.name || server.name,\n      region: options.region || server.region\n    };\n\n    if (options.icon) {\n      newOptions.icon = this.resolver.resolveToBase64(options.icon);\n    }\n    if (options.splash) {\n      newOptions.splash = this.resolver.resolveToBase64(options.splash);\n    }\n    if (options.owner) {\n      let user = this.resolver.resolveUser(options.owner);\n      if (!user) {\n        return Promise.reject(new Error(\"owner could not be resolved\"));\n      }\n      options.owner_id = user.id;\n    }\n    if (options.verificationLevel) {\n      options.verification_level = user.verificationLevel;\n    }\n    if (options.afkChannel) {\n      let channel = this.resolver.resolveUser(options.afkChannel);\n      if (!channel) {\n        return Promise.reject(new Error(\"afkChannel could not be resolved\"));\n      }\n      options.afk_channel_id = channel.id;\n    }\n    if (options.afkTimeout) {\n      options.afk_timeout = options.afkTimeout;\n    }\n\n    return this.apiRequest(\"patch\", Endpoints.SERVER(server.id), true, options)\n      .then(res => {\n        // wait until the name and region are updated\n        return waitFor(() =>\n          (this.servers.get(\"name\", res.name) ? ((this.servers.get(\"name\", res.name).region === res.region) ? this.servers.get(\"id\", res.id) : false) : false));\n      });\n  }\n\n  //def leaveServer\n  leaveServer(srv) {\n    let server = this.resolver.resolveServer(srv);\n    if (!server) {\n      return Promise.reject(new Error(\"server did not resolve\"));\n    }\n\n    return this.apiRequest(\"del\", Endpoints.ME_SERVER(server.id), true);\n  }\n\n  //def deleteServer\n  deleteServer(srv) {\n    let server = this.resolver.resolveServer(srv);\n    if (!server) {\n      return Promise.reject(new Error(\"server did not resolve\"));\n    }\n\n    return this.apiRequest(\"del\", Endpoints.SERVER(server.id), true);\n  }\n\n  // def loginWithToken\n  // email and password are optional\n  loginWithToken(token, email, password) {\n    if (!this.setupCalled) {\n      this.setup();\n    }\n\n    this.state = ConnectionState.LOGGED_IN;\n    this.token = token;\n    this.email = email;\n    this.password = password;\n\n    let self = this;\n    return this.getGateway()\n      .then(url => {\n        self.token = self.client.options.bot && !self.token.startsWith(\"Bot \") ? `Bot ${self.token}` : self.token;\n        self.createWS(url);\n        return self.token;\n      });\n  }\n\n  // def login\n  login(email, password) {\n    let client = this.client;\n\n    if (!this.tokenCacher.done) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.login(email, password).then(resolve).catch(reject);\n        }, 20);\n      });\n    } else {\n      let tk = this.tokenCacher.getToken(email, password);\n      if (tk) {\n        this.client.emit(\"debug\", \"bypassed direct API login, used cached token\");\n        return this.loginWithToken(tk, email, password);\n      }\n    }\n\n    if (this.state !== ConnectionState.DISCONNECTED && this.state !== ConnectionState.IDLE) {\n      return Promise.reject(new Error(\"already logging in/logged in/ready!\"));\n    }\n\n    this.state = ConnectionState.LOGGING_IN;\n\n    return this.apiRequest(\"post\", Endpoints.LOGIN, false, {\n      email,\n      password\n    })\n      .then(res => {\n        this.client.emit(\"debug\", \"direct API login, cached token was unavailable\");\n        let token = res.token;\n        this.tokenCacher.setToken(email, password, token);\n        return this.loginWithToken(token, email, password);\n      }, error => {\n        this.websocket = null;\n        throw error;\n      })\n      .catch(error => {\n        this.websocket = null;\n        this.state = ConnectionState.DISCONNECTED;\n        client.emit(\"disconnected\");\n        throw error;\n      });\n  }\n\n  // def logout\n  logout() {\n    if (this.state === ConnectionState.DISCONNECTED || this.state === ConnectionState.IDLE) {\n      return Promise.reject(new Error(\"Client is not logged in!\"));\n    }\n\n    let disconnect = () => {\n      if (this.websocket) {\n        this.websocket.close(1000);\n        this.websocket = null;\n      }\n      this.token = null;\n      this.email = null;\n      this.password = null;\n      this.state = ConnectionState.DISCONNECTED;\n      return Promise.resolve();\n    };\n\n    if (!this.user.bot) {\n      return this.apiRequest(\"post\", Endpoints.LOGOUT, true)\n        .then(disconnect);\n    } else {\n      return disconnect();\n    }\n  }\n\n  // def startPM\n  startPM(resUser) {\n    let user = this.resolver.resolveUser(resUser);\n    if (!user) {\n      return Promise.reject(new Error(\"Unable to resolve resUser to a User\"));\n    }\n    // start the PM\n    return this.apiRequest(\"post\", Endpoints.ME_CHANNELS, true, {\n      recipient_id: user.id\n    })\n      .then(res => {\n        return this.private_channels.add(new PMChannel(res, this.client));\n      });\n  }\n\n  // def getGateway\n  getGateway() {\n    if (this.gatewayURL) {\n      return Promise.resolve(this.gatewayURL);\n    }\n    return this.apiRequest(\"get\", Endpoints.GATEWAY, true)\n      .then(res => this.gatewayURL = res.url);\n  }\n\n  // def sendMessage\n  sendMessage(where, _content, options = {}) {\n    if (options.file) {\n      if (typeof options.file !== \"object\") {\n        options.file = {\n          file: options.file\n        };\n      }\n      if (!options.file.name) {\n        if (options.file.file instanceof String || typeof options.file.file === \"string\") {\n          options.file.name = require(\"path\").basename(options.file.file);\n        } else if (options.file.file.path) {\n          // fs.createReadStream()'s have .path that give the path. Not sure about other streams though.\n          options.file.name = require(\"path\").basename(options.file.file.path);\n        } else {\n          options.file.name = \"default.png\"; // Just have to go with default filenames.\n        }\n      }\n    }\n\n    return this.resolver.resolveChannel(where)\n      .then(destination => {\n        let content = this.resolver.resolveString(_content);\n\n        if (this.client.options.disableEveryone || options.disableEveryone) {\n          content = content.replace(/(@)(everyone|here)/g, '$1\\u200b$2');\n        }\n\n        if (options.file) {\n          return this.resolver.resolveFile(options.file.file)\n            .then(file =>\n              this.apiRequest(\"post\", Endpoints.CHANNEL_MESSAGES(destination.id), true, {\n                content: content,\n                tts: options.tts,\n                nonce: options.nonce\n              }, {\n                name: options.file.name,\n                file: file\n              }).then(res => destination.messages.add(new Message(res, destination, this.client)))\n            )\n        } else {\n          return this.apiRequest(\"post\", Endpoints.CHANNEL_MESSAGES(destination.id), true, {\n            content: content,\n            tts: options.tts,\n            nonce: options.nonce\n          })\n            .then(res => destination.messages.add(new Message(res, destination, this.client)));\n        }\n      });\n\n  }\n\n  // def sendFile\n  sendFile(where, _file, name, content) {\n    if (!name) {\n      if (_file instanceof String || typeof _file === \"string\") {\n        name = require(\"path\").basename(_file);\n      } else if (_file && _file.path) {\n        // fs.createReadStream()'s have .path that give the path. Not sure about other streams though.\n        name = require(\"path\").basename(_file.path);\n      } else {\n        name = \"default.png\"; // Just have to go with default filenames.\n      }\n    }\n\n    if (content) {\n      content = {\n        content: this.resolver.resolveString(content)\n      };\n      if (this.client.options.disableEveryone) {\n        content.content = content.content.replace(/(@)(everyone|here)/g, '$1\\u200b$2');\n      }\n    }\n\n    return this.resolver.resolveChannel(where)\n      .then(channel =>\n        this.resolver.resolveFile(_file)\n          .then(file =>\n            this.apiRequest(\"post\", Endpoints.CHANNEL_MESSAGES(channel.id), true, content, {\n              name,\n              file\n            }).then(res => channel.messages.add(new Message(res, channel, this.client)))\n          )\n      );\n  }\n\n  // def deleteMessage\n  deleteMessage(_message, options = {}) {\n\n    let message = this.resolver.resolveMessage(_message);\n    if (!message) {\n      return Promise.reject(new Error(\"Supplied message did not resolve to a message!\"));\n    }\n\n    let chain = options.wait ? delay(options.wait) : Promise.resolve();\n    return chain.then(() =>\n      this.apiRequest(\"del\", Endpoints.CHANNEL_MESSAGE(message.channel.id, message.id), true)\n    )\n      .then(() => message.channel.messages.remove(message));\n  }\n\n  // def deleteMessages\n  deleteMessages(_messages) {\n    if (!_messages instanceof Array)\n      return Promise.reject(new Error(\"Messages provided must be in an array\"));\n    if (_messages.length < 1)\n      return Promise.reject(new Error(\"You must provide at least one message to delete\"));\n    else if (_messages.length === 1)\n      return this.deleteMessage(_messages[0]);\n\n\n    let messages = [];\n    let channel;\n    let message;\n    for (let _message of _messages) {\n      message = this.resolver.resolveMessage(_message);\n      if (!message)\n        return Promise.reject(new Error(\"Something other than a message could not be resolved in the array...\"));\n      if (!message.server)\n        return Promise.reject(new Error(\"You can only bulk delete messages on guild channels\"));\n\n      // ensure same channel\n      if (!channel) {\n        channel = message.channel;\n      } else {\n        //noinspection JSUnusedAssignment\n        if (message.channel.id !== channel.id)\n          return Promise.reject(new Error(\"You can only bulk delete messages from the same channel at one time...\"));\n      }\n\n      messages.push(message);\n    }\n\n    return this.apiRequest(\"post\", `${Endpoints.CHANNEL_MESSAGES(channel.id)}/bulk_delete`, true, {\n      messages: messages.map(m => m.id)\n    })\n      .then(() => messages.forEach(m => channel.messages.remove(m)));\n  }\n\n  // def updateMessage\n  updateMessage(msg, _content, options = {}) {\n\n    let message = this.resolver.resolveMessage(msg);\n\n    if (!message) {\n      return Promise.reject(new Error(\"Supplied message did not resolve to a message!\"));\n    }\n\n    let content = this.resolver.resolveString(_content);\n\n    return this.apiRequest(\n      \"patch\",\n      Endpoints.CHANNEL_MESSAGE(message.channel.id, message.id),\n      true,\n      {\n        content: content,\n        tts: options.tts\n      }\n    )\n      .then(res => message.channel.messages.update(\n        message,\n        new Message(res, message.channel, this.client)\n      ));\n  }\n\n  // def getChannelLogs\n  getChannelLogs(_channel, limit = 50, options = {}) {\n    return this.resolver.resolveChannel(_channel)\n      .then(channel => {\n        let qsObject = {limit};\n        if (options.before) {\n          const res = this.resolver.resolveMessage(options.before);\n          if (res) {\n            qsObject.before = res.id;\n          }\n        }\n        if (options.after) {\n          const res = this.resolver.resolveMessage(options.after);\n          if (res) {\n            qsObject.after = res.id;\n          }\n        }\n        if (options.around) {\n          const res = this.resolver.resolveMessage(options.around);\n          if (res) {\n            qsObject.around = res.id\n          }\n        }\n\n        return this.apiRequest(\n          \"get\",\n          `${Endpoints.CHANNEL_MESSAGES(channel.id)}?${qs.stringify(qsObject)}`,\n          true\n        )\n          .then(res => res.map(\n            msg => channel.messages.add(new Message(msg, channel, this.client))\n          ));\n      });\n  }\n\n  // def getMessage\n  getMessage(_channel, messageID) {\n    return this.resolver.resolveChannel(_channel)\n      .then(channel => {\n        if (!this.user.bot) {\n          return Promise.reject(new Error(\"Only OAuth bot accounts can use this function\"));\n        }\n\n        if (!(channel instanceof TextChannel || channel instanceof PMChannel)) {\n          return Promise.reject(new Error(\"Provided channel is not a Text or PMChannel\"));\n        }\n\n        let msg = channel.messages.get(\"id\", messageID);\n        if (msg) {\n          return Promise.resolve(msg);\n        }\n\n        return this.apiRequest(\n          \"get\",\n          `${Endpoints.CHANNEL_MESSAGES(channel.id)}/${messageID}`,\n          true\n        )\n          .then(res => channel.messages.add(\n            new Message(res, channel, this.client)\n          ));\n      });\n  }\n\n  // def pinMessage\n  pinMessage(msg) {\n    let message = this.resolver.resolveMessage(msg);\n\n    if (!message) {\n      return Promise.reject(new Error(\"Supplied message did not resolve to a message\"));\n    }\n\n    return this.apiRequest(\n      \"put\",\n      `${Endpoints.CHANNEL_PIN(msg.channel.id, msg.id)}`,\n      true\n    );\n  }\n\n  // def unpinMessage\n  unpinMessage(msg) {\n    let message = this.resolver.resolveMessage(msg);\n\n    if (!message) {\n      return Promise.reject(new Error(\"Supplied message did not resolve to a message\"));\n    }\n\n    if (!message.pinned) {\n      return Promise.reject(new Error(\"Supplied message is not pinned\"));\n    }\n\n    return this.apiRequest(\n      \"del\",\n      `${Endpoints.CHANNEL_PIN(msg.channel.id, msg.id)}`,\n      true\n    );\n  }\n\n  // def getPinnedMessages\n  getPinnedMessages(_channel) {\n    return this.resolver.resolveChannel(_channel)\n      .then(channel => {\n        return this.apiRequest(\n          \"get\",\n          `${Endpoints.CHANNEL_PINS(channel.id)}`,\n          true\n        )\n          .then(res => res.map(\n            msg => channel.messages.add(new Message(msg, channel, this.client))\n          ));\n      });\n  }\n\n  // def getBans\n  getBans(server) {\n    server = this.resolver.resolveServer(server);\n\n    return this.apiRequest(\"get\", Endpoints.SERVER_BANS(server.id), true)\n      .then(res => res.map(\n        ban => this.users.add(new User(ban.user, this.client))\n      ));\n  }\n\n  // def createChannel\n  createChannel(server, name, type = 0) {\n\n    server = this.resolver.resolveServer(server);\n\n    return this.apiRequest(\"post\", Endpoints.SERVER_CHANNELS(server.id), true, {\n      name,\n      type\n    })\n      .then(res => {\n        let channel;\n        if (res.type === 0) {\n          channel = new TextChannel(res, this.client, server);\n        } else {\n          channel = new VoiceChannel(res, this.client, server);\n        }\n        return server.channels.add(this.channels.add(channel));\n      });\n  }\n\n  // def deleteChannel\n  deleteChannel(_channel) {\n\n    return this.resolver.resolveChannel(_channel)\n      .then(channel =>\n        this.apiRequest(\"del\", Endpoints.CHANNEL(channel.id), true)\n          .then(() => {\n            if (channel.server) {\n              channel.server.channels.remove(channel);\n              this.channels.remove(channel);\n            } else {\n              this.private_channels.remove(channel);\n            }\n          })\n      );\n  }\n\n  // def banMember\n  banMember(user, server, length = 1) {\n    let resolvedUser = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n\n    if (resolvedUser === null && typeof user === \"string\") {\n      user = {id: user};\n    } else {\n      user = resolvedUser;\n    }\n\n    return this.apiRequest(\n      \"put\",\n      `${Endpoints.SERVER_BANS(server.id)}/${user.id}?delete-message-days=${length}`,\n      true\n    );\n  }\n\n  // def unbanMember\n  unbanMember(user, server) {\n\n    server = this.resolver.resolveServer(server);\n    let resolvedUser = this.resolver.resolveUser(user);\n\n    if (resolvedUser === null && typeof user === \"string\") {\n      user = {id: user};\n    } else {\n      user = resolvedUser;\n    }\n\n    return this.apiRequest(\"del\", `${Endpoints.SERVER_BANS(server.id)}/${user.id}`, true)\n  }\n\n  // def kickMember\n  kickMember(user, server) {\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n\n    return this.apiRequest(\"del\", `${Endpoints.SERVER_MEMBERS(server.id) }/${user.id}`, true);\n  }\n\n  // def moveMember\n  moveMember(user, channel) {\n    user = this.resolver.resolveUser(user);\n    return this.resolver.resolveChannel(channel).then(channel => {\n      let server = channel.server;\n\n      // Make sure `channel` is a voice channel\n      if (channel.type !== 2) {\n        throw new Error(\"Can't moveMember into a non-voice channel\");\n      } else {\n        return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, {channel_id: channel.id})\n          .then(res => {\n            user.voiceChannel = channel;\n            return res;\n          });\n      }\n    });\n  }\n\n  // def muteMember\n  muteMember(user, server) {\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, {mute: true});\n  }\n\n  // def unmuteMember\n  unmuteMember(user, server) {\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, {mute: false});\n  }\n\n  // def deafenMember\n  deafenMember(user, server) {\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, {deaf: true});\n  }\n\n  // def undeafenMember\n  undeafenMember(user, server) {\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, {deaf: false});\n  }\n\n  // def setNickname\n  setNickname(server, nick, user) {\n    nick = nick || \"\";\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id === this.user.id ? \"@me/nick\" : user.id}`, true, {nick: nick});\n  }\n\n  //def setNote\n  setNote(user, note) {\n    user = this.resolver.resolveUser(user);\n    note = note || \"\";\n\n    if (!user) {\n      return Promise.reject(new Error(\"Failed to resolve user\"));\n    }\n\n    return this.apiRequest(\"put\", `${Endpoints.ME_NOTES}/${user.id}`, true, {note: note});\n  }\n\n  // def createRole\n  createRole(server, data) {\n    server = this.resolver.resolveServer(server);\n\n    return this.apiRequest(\"post\", Endpoints.SERVER_ROLES(server.id), true)\n      .then(res => {\n        let role = server.roles.add(new Role(res, server, this.client));\n\n        if (data) {\n          return this.updateRole(role, data);\n        }\n        return role;\n      });\n  }\n\n  // def updateRole\n  updateRole(role, data) {\n\n    role = this.resolver.resolveRole(role);\n    let server = this.resolver.resolveServer(role.server);\n\n    let newData = {\n      color: \"color\" in data ? data.color : role.color,\n      hoist: \"hoist\" in data ? data.hoist : role.hoist,\n      name: \"name\" in data ? data.name : role.name,\n      position: \"position\" in data ? data.position : role.position,\n      permissions: \"permissions\" in data ? data.permissions : role.permissions,\n      mentionable: \"mentionable\" in data ? data.mentionable : role.mentionable\n    };\n\n    if (data.permissions) {\n      newData.permissions = 0;\n      for (let perm of data.permissions) {\n        if (perm instanceof String || typeof perm === \"string\") {\n          newData.permissions |= (Permissions[perm] || 0);\n        } else {\n          newData.permissions |= perm;\n        }\n      }\n    }\n\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_ROLES(server.id)}/${role.id}`, true, newData)\n      .then(res => {\n        return server.roles.update(role, new Role(res, server, this.client));\n      });\n  }\n\n  // def deleteRole\n  deleteRole(role) {\n    if (role.server.id === role.id) {\n      return Promise.reject(new Error(\"Stop trying to delete the @everyone role. It is futile\"));\n    } else {\n      return this.apiRequest(\"del\", `${Endpoints.SERVER_ROLES(role.server.id)}/${role.id}`, true);\n    }\n  }\n\n  //def addMemberToRole\n  addMemberToRole(member, roles) {\n    member = this.resolver.resolveUser(member);\n\n    if (!member) {\n      return Promise.reject(new Error(\"user not found\"));\n    }\n\n    if (!Array.isArray(roles) || roles.length === 0) {\n      roles = this.resolver.resolveRole(roles);\n      if (roles) {\n        roles = [roles];\n      } else {\n        return Promise.reject(new Error(\"invalid array of roles\"));\n      }\n    } else {\n      roles = roles.map(r => this.resolver.resolveRole(r));\n    }\n\n    if (roles.some(role => !role.server.memberMap[member.id])) {\n      return Promise.reject(new Error(\"Role does not exist on same server as member\"));\n    }\n\n    let roleIDs = roles[0].server.memberMap[member.id].roles.map(r => (r && r.id) || r);\n\n    for (let i = 0; i < roles.length; i++) {\n      if (!~roleIDs.indexOf(roles[i].id)) {\n        roleIDs.push(roles[i].id);\n      }\n    }\n\n    return this.apiRequest(\n      \"patch\",\n      `${Endpoints.SERVER_MEMBERS(roles[0].server.id)}/${member.id}`,\n      true,\n      {\n        roles: roleIDs\n      }\n    );\n  }\n\n  memberHasRole(member, role) {\n    role = this.resolver.resolveRole(role);\n    member = this.resolver.resolveUser(member);\n\n    if (!role) {\n      throw new Error(\"invalid role\");\n    }\n    if (!member) {\n      throw new Error(\"user not found\");\n    }\n\n    let roledata = role.server.rolesOf(member);\n    if (roledata) {\n      for (let r of roledata) {\n        if (r.id == role.id) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  //def removeMemberFromRole\n  removeMemberFromRole(member, roles) {\n    member = this.resolver.resolveUser(member);\n\n    if (!member) {\n      return Promise.reject(new Error(\"user not found\"));\n    }\n\n    if (!Array.isArray(roles) || roles.length === 0) {\n      roles = this.resolver.resolveRole(roles);\n      if (roles) {\n        roles = [roles];\n      } else {\n        return Promise.reject(new Error(\"invalid array of roles\"));\n      }\n    } else {\n      roles = roles.map(r => this.resolver.resolveRole(r));\n    }\n\n    let roleIDs = roles[0].server.memberMap[member.id].roles.map(r => (r && r.id) || r);\n\n    for (let role of roles) {\n      if (!role.server.memberMap[member.id]) {\n        return Promise.reject(new Error(\"member not in server\"));\n      }\n      for (let item in roleIDs) {\n        if (roleIDs.hasOwnProperty(item)) {\n          if (roleIDs[item] === role.id) {\n            roleIDs.splice(item, 1);\n            break;\n          }\n        }\n      }\n    }\n\n    return this.apiRequest(\n      \"patch\",\n      `${Endpoints.SERVER_MEMBERS(roles[0].server.id)}/${member.id}`,\n      true,\n      {\n        roles: roleIDs\n      }\n    );\n  }\n\n  // def createInvite\n  createInvite(chanServ, options) {\n    return this.resolver.resolveChannel(chanServ)\n      .then(channel => {\n        if (!options) {\n          options = {\n            validate: null\n          };\n        } else {\n          options.max_age = options.maxAge || 0;\n          options.max_uses = options.maxUses || 0;\n          options.temporary = options.temporary || false;\n          options.xkcdpass = options.xkcd || false;\n        }\n\n        return this.apiRequest(\"post\", Endpoints.CHANNEL_INVITES(channel.id), true, options)\n          .then(res => new Invite(res, this.channels.get(\"id\", res.channel.id), this.client));\n      });\n  }\n\n  //def deleteInvite\n  deleteInvite(invite) {\n    invite = this.resolver.resolveInviteID(invite);\n    if (!invite) {\n      throw new Error(\"Not a valid invite\");\n    }\n    return this.apiRequest(\"del\", Endpoints.INVITE(invite), true);\n  }\n\n  //def getInvite\n  getInvite(invite) {\n    invite = this.resolver.resolveInviteID(invite);\n    if (!invite) {\n      return Promise.reject(new Error(\"Not a valid invite\"));\n    }\n\n    return this.apiRequest(\"get\", Endpoints.INVITE(invite), true)\n      .then(res => {\n        if (!this.channels.has(\"id\", res.channel.id)) {\n          return new Invite(res, null, this.client);\n        }\n        return this.apiRequest(\"post\", Endpoints.CHANNEL_INVITES(res.channel.id), true, {validate: invite})\n          .then(res2 => new Invite(res2, this.channels.get(\"id\", res.channel.id), this.client));\n      });\n  }\n\n  //def getInvites\n  getInvites(channel) {\n    if (!(channel instanceof Channel)) {\n      let server = this.resolver.resolveServer(channel);\n      if (server) {\n        return this.apiRequest(\"get\", Endpoints.SERVER_INVITES(server.id), true)\n          .then(res => {\n            return res.map(data => new Invite(data, this.channels.get(\"id\", data.channel.id), this.client));\n          });\n      }\n    }\n    return this.resolver.resolveChannel(channel)\n      .then(channel => {\n        return this.apiRequest(\"get\", Endpoints.CHANNEL_INVITES(channel.id), true)\n          .then(res => {\n            return res.map(data => new Invite(data, this.channels.get(\"id\", data.channel.id), this.client));\n          });\n      });\n  }\n\n  //def overwritePermissions\n  overwritePermissions(channel, role, updated) {\n    return this.resolver.resolveChannel(channel)\n      .then(channel => {\n        if (!channel instanceof ServerChannel) {\n          return Promise.reject(new Error(\"Not a server channel\"));\n        }\n\n        let data = {\n          allow: 0,\n          deny: 0\n        };\n\n        if (role instanceof String || typeof role === \"string\") {\n          role = this.resolver.resolveUser(role) || this.resolver.resolveRole(role);\n        }\n\n        if (role instanceof User) {\n          data.id = role.id;\n          data.type = \"member\";\n        } else if (role instanceof Role) {\n          data.id = role.id;\n          data.type = \"role\";\n        } else {\n          return Promise.reject(new Error(\"Role could not be resolved\"));\n        }\n\n        let previousOverwrite = channel.permissionOverwrites.get(\"id\", data.id);\n\n        if (previousOverwrite) {\n          data.allow |= previousOverwrite.allow;\n          data.deny |= previousOverwrite.deny;\n        }\n\n        for (let perm in updated) {\n          if (updated.hasOwnProperty(perm)) {\n            if (updated[perm] === true) {\n              data.allow |= (Permissions[perm] || 0);\n              data.deny &= ~(Permissions[perm] || 0);\n            } else if (updated[perm] === false) {\n              data.allow &= ~(Permissions[perm] || 0);\n              data.deny |= (Permissions[perm] || 0);\n            } else {\n              data.allow &= ~(Permissions[perm] || 0);\n              data.deny &= ~(Permissions[perm] || 0);\n            }\n          }\n        }\n\n        return this.apiRequest(\n          \"put\",\n          `${Endpoints.CHANNEL_PERMISSIONS(channel.id)}/${data.id}`,\n          true,\n          data\n        );\n      });\n  }\n\n  //def setStatus\n  setStatus(idleStatus, game) {\n\n    if (idleStatus === \"online\" || idleStatus === \"here\" || idleStatus === \"available\") {\n      this.idleStatus = null;\n    }\n    else if (idleStatus === \"idle\" || idleStatus === \"away\") {\n      this.idleStatus = Date.now();\n    }\n    else {\n      this.idleStatus = this.idleStatus || null; //undefined\n    }\n\n    // convert undefined and empty string to null\n    if (typeof game === \"string\" && !game.length) game = null;\n\n    this.game = game === null ? null : !game ? this.game || null : typeof game === \"string\" ? {name: game} : game;\n\n    let packet = {\n      op: 3,\n      d: {\n        idle_since: this.idleStatus,\n        game: this.game\n      }\n    };\n\n    this.sendWS(packet);\n\n    this.user.status = this.idleStatus ? \"idle\" : \"online\";\n    this.user.game = this.game;\n\n    return Promise.resolve();\n\n  }\n\n  //def sendTyping\n  sendTyping(channel) {\n    return this.resolver.resolveChannel(channel).then(channel =>\n      this.apiRequest(\"post\", Endpoints.CHANNEL(channel.id) + \"/typing\", true)\n    );\n  }\n\n  //def startTyping\n  startTyping(channel) {\n    return this.resolver.resolveChannel(channel)\n      .then(channel => {\n\n        if (this.intervals.typing[channel.id]) {\n          // typing interval already exists, leave it alone\n          throw new Error(\"Already typing in that channel\");\n        }\n\n        this.intervals.typing[channel.id] = setInterval(\n          () => this.sendTyping(channel)\n            .catch(error => this.client.emit(\"error\", error)),\n          4000\n        );\n\n        return this.sendTyping(channel);\n      });\n\n  }\n\n  //def stopTyping\n  stopTyping(channel) {\n    return this.resolver.resolveChannel(channel)\n      .then(channel => {\n\n        if (!this.intervals.typing[channel.id]) {\n          // typing interval doesn\"t exist\n          throw new Error(\"Not typing in that channel\");\n        }\n\n        clearInterval(this.intervals.typing[channel.id]);\n        this.intervals.typing[channel.id] = false;\n\n      });\n  }\n\n  //def updateDetails\n  updateDetails(data) {\n    if (!this.user.bot && !(this.email || data.email)) {\n      throw new Error(\"Must provide email since a token was used to login\");\n    }\n\n    let options = {};\n\n    if (data.username) {\n      options.username = data.username;\n    } else {\n      options.username = this.user.username;\n    }\n\n    if (data.avatar) {\n      options.avatar = this.resolver.resolveToBase64(data.avatar);\n    }\n\n    if (this.email || data.email) {\n      options.email = data.email || this.email;\n      options.new_password = data.newPassword || null;\n      options.password = data.password || this.password;\n    }\n\n    return this.apiRequest(\"patch\", Endpoints.ME, true, options);\n  }\n\n  //def setAvatar\n  setAvatar(avatar) {\n    return this.updateDetails({avatar});\n  }\n\n  //def setUsername\n  setUsername(username) {\n    return this.updateDetails({username});\n  }\n\n  //def setChannelTopic\n  setChannelTopic(channel, topic = \"\") {\n    topic = topic || \"\";\n\n    return this.updateChannel(channel, {topic: topic});\n  }\n\n  //def setChannelName\n  setChannelName(channel, name) {\n    name = name || \"unnamed-channel\";\n\n    return this.updateChannel(channel, {name: name});\n  }\n\n  //def setChannelPosition\n  setChannelPosition(channel, position) {\n    position = position || 0;\n\n    return this.updateChannel(channel, {position: position});\n  }\n\n  //def setChannelUserLimit\n  setChannelUserLimit(channel, limit) {\n    limit = limit || 0; // default 0 = no limit\n\n    return this.updateChannel(channel, {userLimit: limit})\n  }\n\n  //def setChannelBitrate\n  setChannelBitrate(channel, kbitrate) {\n    kbitrate = kbitrate || 64; // default 64kbps\n\n    return this.updateChannel(channel, {bitrate: kbitrate});\n  }\n\n  //def updateChannel\n  updateChannel(channel, data) {\n    return this.resolver.resolveChannel(channel).then(channel => {\n      if (!channel) {\n        return Promise.reject(new Error(\"Failed to resolve channel\"));\n      }\n\n      data = {\n        name: data.name || channel.name,\n        topic: data.topic || channel.topic,\n        position: (data.position ? data.position : channel.position),\n        user_limit: (data.userLimit ? data.userLimit : channel.userLimit),\n        bitrate: (data.bitrate ? data.bitrate : channel.bitrate ? channel.bitrate : undefined)\n      };\n\n      if (data.position < 0) {\n        return Promise.reject(new Error(\"Position cannot be less than 0\"));\n      }\n\n      if (data.user_limit < 0 || data.user_limit > 99) {\n        return Promise.reject(new Error(\"User limit must be between 0-99\"));\n      }\n\n      if (data.kbitrate < 8 || data.kbitrate > 96) {\n        return Promise.reject(new Error(\"Bitrate must be between 8-96kbps\"));\n      }\n\n      if (data.bitrate) {\n        data.bitrate *= 1000; // convert to bits before sending\n      }\n\n      return this.apiRequest(\"patch\", Endpoints.CHANNEL(channel.id), true, data)\n        .then(res => {\n          channel.name = data.name;\n          channel.topic = data.topic;\n          channel.position = data.position;\n          channel.userLimit = data.user_limit;\n          channel.bitrate = Math.ceil(data.bitrate / 1000);\n          channel._bitrate = data.bitrate;\n        });\n    });\n  }\n\n  //def addFriend\n  addFriend(user) {\n    if (this.user.bot) return Promise.reject(new Error(\"user is a bot, bot's do not have friends support\"));\n\n    let id;\n    if (user instanceof String || typeof user === \"string\")\n      id = user;\n    else if (user instanceof User) {\n      user = this.resolver.resolveUser(user);\n      id = user.id\n    } else {\n      if (user.username && user.discriminator) // add by username and discriminator (pass in an object)\n        return this.apiRequest(\"put\", Endpoints.FRIENDS, true, user);\n      else\n        return Promise.reject(\"invalid user\")\n    }\n\n    return this.apiRequest(\"put\", `${Endpoints.FRIENDS}/${id}`, true, {});\n  }\n\n  //def removeFriend\n  removeFriend(user) {\n    if (this.user.bot) return Promise.reject(new Error(\"user is a bot, bot's do not have friends support\"));\n\n    user = this.resolver.resolveUser(user);\n\n    return this.apiRequest(\"delete\", `${Endpoints.FRIENDS}/${user.id}`, true);\n  }\n\n  getServerWebhooks(server) {\n    server = this.resolver.resolveServer(server);\n\n    if (!server) {\n      return Promise.reject(new Error(\"Failed to resolve server\"));\n    }\n\n    return this.apiRequest(\"get\", Endpoints.SERVER_WEBHOOKS(server.id), true)\n      .then(res => res.map(\n        webhook => {\n          let channel = this.channels.get(\"id\", webhook.channel_id);\n          return channel.webhooks.add(new Webhook(\n            webhook,\n            server,\n            channel,\n            this.users.get(\"id\", webhook.user.id)\n          ))\n        }\n      ));\n  }\n\n  getChannelWebhooks(channel) {\n    return this.resolver.resolveChannel(channel).then(channel => {\n      if (!channel) {\n        return Promise.reject(new Error(\"Failed to resolve channel\"));\n      }\n\n      return this.apiRequest(\"get\", Endpoints.CHANNEL_WEBHOOKS(channel.id), true)\n        .then(res => res.map(\n          webhook => channel.webhooks.add(new Webhook(\n            webhook,\n            this.servers.get(\"id\", webhook.guild_id),\n            channel,\n            this.users.get(\"id\", webhook.user.id)\n          ))\n        ));\n    })\n  }\n\n  editWebhook(webhook, options = {}) {\n    return this.resolver.resolveWebhook(webhook).then(webhook => {\n      if (!webhook) {\n        return Promise.reject(new Error(\" Failed to resolve webhook\"))\n      }\n\n      if (options.hasOwnProperty(\"avatar\")) {\n        options.avatar = this.resolver.resolveToBase64(options.avatar);\n      }\n\n      return this.apiRequest(\"patch\", Endpoints.WEBHOOK(webhook.id), true, options)\n        .then(res => {\n          webhook.name = res.name;\n          webhook.avatar = res.hasOwnProperty('avatar') ? res.avatar : webhook.avatar;\n        });\n    })\n  }\n\n  createWebhook(channel, options = {}) {\n    return this.resolver.resolveChannel(channel)\n      .then(destination => {\n        if (!channel) {\n          return Promise.reject(new Error(\" Failed to resolve channel\"))\n        }\n\n        if (options.hasOwnProperty(\"avatar\")) {\n          options.avatar = this.resolver.resolveToBase64(options.avatar);\n        }\n\n        return this.apiRequest(\"post\", Endpoints.CHANNEL_WEBHOOKS(destination.id), true, options)\n          .then(webhook => channel.webhooks.add(new Webhook(\n            webhook,\n            this.servers.get(\"id\", webhook.guild_id),\n            channel,\n            this.users.get(\"id\", webhook.user.id)\n          )));\n      });\n  }\n\n  deleteWebhook(webhook) {\n    return this.resolver.resolveWebhook(webhook).then(webhook => {\n      if (!webhook) {\n        return Promise.reject(new Error(\" Failed to resolve webhook\"))\n      }\n\n      return this.apiRequest(\"delete\", Endpoints.WEBHOOK(webhook.id), true)\n        .then(() => {\n          webhook.channel.webhooks.remove(webhook);\n        });\n    })\n  }\n\n  sendWebhookMessage(webhook, _content, options = {}) {\n    return this.resolver.resolveWebhook(webhook)\n      .then(destination => {\n        let content = this.resolver.resolveString(_content);\n\n        if (this.client.options.disableEveryone || options.disableEveryone) {\n          content = content.replace(/(@)(everyone|here)/g, '$1\\u200b$2');\n        }\n\n        if (!options.hasOwnProperty(\"username\")) {\n          options.username = this.user.username;\n        }\n\n        let slack;\n        if (options.hasOwnProperty(\"slack\")) {\n          slack = options.slack;\n          delete options[\"slack\"];\n        }\n\n        options.content = content;\n\n        return this.apiRequest(\n          \"post\",\n          `${Endpoints.WEBHOOK_MESSAGE(destination.id, destination.token)}${slack ? \"/slack\" : \"\"}?wait=true`,\n          true,\n          options\n        )\n      });\n\n  }\n\n  //def getOAuthApplication\n  getOAuthApplication(appID) {\n    appID = appID || \"@me\";\n    return this.apiRequest(\"get\", Endpoints.OAUTH2_APPLICATION(appID), true);\n  }\n\n  //def ack\n  ack(msg) {\n    msg = this.resolver.resolveMessage(msg);\n\n    if (!msg) {\n      return Promise.reject(new Error(\"Message does not exist\"));\n    }\n\n    return this.apiRequest(\"post\", Endpoints.CHANNEL_MESSAGE(msg.channel.id, msg.id) + \"/ack\", true);\n  }\n\n  sendWS(object) {\n    if (this.websocket) {\n      //noinspection NodeModulesDependencies,NodeModulesDependencies\n      this.websocket.send(JSON.stringify(object));\n    }\n  }\n\n  createWS(url) {\n    if (this.websocket) {\n      return false;\n    }\n    if (!url.endsWith(\"/\")) {\n      url += \"/\";\n    }\n    url += \"?encoding=json&v=\" + GATEWAY_VERSION;\n\n    this.websocket = new WebSocket(url);\n\n    this.websocket.onopen = () => {\n    };\n\n    this.websocket.onclose = (event) => {\n      this.websocket = null;\n      this.state = ConnectionState.DISCONNECTED;\n      if (event && event.code) {\n        this.client.emit(\"warn\", \"WS close: \" + event.code);\n        let err;\n        if (event.code === 4001) {\n          err = new Error(\"Gateway received invalid OP code\");\n        } else if (event.code === 4005) {\n          err = new Error(\"Gateway received invalid message\");\n        } else if (event.code === 4003) {\n          err = new Error(\"Not authenticated\");\n        } else if (event.code === 4004) {\n          err = new Error(\"Authentication failed\");\n        } else if (event.code === 4005) {\n          err = new Error(\"Already authenticated\");\n        }\n        if (event.code === 4006 || event.code === 4009) {\n          err = new Error(\"Invalid session\");\n        } else if (event.code === 4007) {\n          this.sequence = 0;\n          err = new Error(\"Invalid sequence number\");\n        } else if (event.code === 4008) {\n          err = new Error(\"Gateway connection was ratelimited\");\n        } else if (event.code === 4010) {\n          err = new Error(\"Invalid shard key\");\n        }\n        if (err) {\n          this.client.emit(\"error\", err);\n        }\n      }\n      this.disconnected(this.client.options.autoReconnect);\n    };\n\n    this.websocket.onerror = e => {\n      this.client.emit(\"error\", e);\n      this.websocket = null;\n      this.state = ConnectionState.DISCONNECTED;\n      this.disconnected(this.client.options.autoReconnect);\n    };\n\n    this.websocket.onmessage = e => {\n      if (e.data instanceof Buffer) {\n        if (!zlib) zlib = require(\"zlib\");\n        e.data = zlib.inflateSync(e.data).toString();\n      }\n\n      let packet;\n      try {\n        packet = JSON.parse(e.data);\n      } catch (e) {\n        this.client.emit(\"error\", e);\n        return;\n      }\n\n      this.client.emit(\"raw\", packet);\n\n      if (packet.s) {\n        this.sequence = packet.s;\n      }\n\n      switch (packet.op) {\n        case 0:\n          this.processPacket(packet);\n          break;\n        case 1:\n          this.heartbeatAcked = true;\n          this.heartbeat();\n          break;\n        case 7:\n          this.disconnected(true);\n          break;\n        case 9:\n          this.sessionID = null;\n          this.sequence = 0;\n          this.identify();\n          break;\n        case 10:\n          if (this.sessionID) {\n            this.resume();\n          } else {\n            this.identify();\n          }\n          this.heartbeatAcked = true; // start off without assuming we didn't get a missed heartbeat acknowledge right away;\n          this.heartbeat();\n          this.heartbeatAcked = true;\n          this.intervals.kai = setInterval(() => this.heartbeat(), packet.d.heartbeat_interval);\n          break;\n        case 11:\n          this.heartbeatAcked = true;\n          break;\n        default:\n          this.client.emit(\"unknown\", packet);\n          break;\n      }\n    };\n  }\n\n  processPacket(packet) {\n    let client = this.client;\n    let data = packet.d;\n    switch (packet.t) {\n      case PacketType.RESUMED:\n      case PacketType.READY: {\n        this.autoReconnectInterval = 1000;\n        this.state = ConnectionState.READY;\n\n        if (packet.t === PacketType.RESUMED) {\n          break;\n        }\n\n        this.sessionID = data.session_id;\n        let startTime = Date.now();\n\n        this.user = this.users.add(new User(data.user, client));\n\n        this.forceFetchCount = {};\n        this.forceFetchQueue = [];\n        this.forceFetchLength = 1;\n\n        data.guilds.forEach(server => {\n          if (!server.unavailable) {\n            server = this.servers.add(new Server(server, client));\n            if (client.options.bot === false) {\n              this.unsyncedGuilds++;\n              this.syncGuild(server.id);\n            }\n            if (this.client.options.forceFetchUsers && server.members && server.members.length < server.memberCount) {\n              this.getGuildMembers(server.id, Math.ceil(server.memberCount / 1000));\n            }\n          } else {\n            client.emit(\"debug\", \"server \" + server.id + \" was unavailable, could not create (ready)\");\n            this.unavailableServers.add(server);\n          }\n        });\n        data.private_channels.forEach(pm => {\n          this.private_channels.add(new PMChannel(pm, client));\n        });\n        if (!data.user.bot) { // bots dont have friends\n          data.relationships.forEach(friend => {\n            if (friend.type === 1) { // is a friend\n              this.friends.add(new User(friend.user, client));\n            } else if (friend.type === 2) { // incoming friend requests\n              this.blocked_users.add(new User(friend.user, client));\n            } else if (friend.type === 3) { // incoming friend requests\n              this.incoming_friend_requests.add(new User(friend.user, client));\n            } else if (friend.type === 4) { // outgoing friend requests\n              this.outgoing_friend_requests.add(new User(friend.user, client));\n            } else {\n              client.emit(\"warn\", \"unknown friend type \" + friend.type);\n            }\n          });\n        } else {\n          this.friends = null;\n          this.blocked_users = null;\n          this.incoming_friend_requests = null;\n          this.outgoing_friend_requests = null;\n        }\n\n        // add notes to users\n        if (data.notes) {\n          for (let note in data.notes) {\n            if (data.notes.hasOwnProperty(note)) {\n              let user = this.users.get(\"id\", note);\n              if (user) {\n                let newUser = user;\n                newUser.note = data.notes[note];\n\n                this.users.update(user, newUser);\n              } else {\n                client.emit(\"warn\", \"note in ready packet but user not cached\");\n              }\n            }\n          }\n        }\n\n        client.emit(\"debug\", `ready packet took ${Date.now() - startTime}ms to process`);\n        client.emit(\"debug\", `ready with ${this.servers.length} servers, ${this.unavailableServers.length} unavailable servers, ${this.channels.length} channels and ${this.users.length} users cached.`);\n\n        this.restartServerCreateTimeout();\n\n        break;\n      }\n      case PacketType.MESSAGE_CREATE: {\n        // format: https://discordapi.readthedocs.org/en/latest/reference/channels/messages.html#message-format\n        let channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n        if (channel) {\n          let msg = channel.messages.add(new Message(data, channel, client));\n          channel.lastMessageID = msg.id;\n          if (this.messageAwaits[channel.id + msg.author.id]) {\n            this.messageAwaits[channel.id + msg.author.id].map(fn => fn(msg));\n            this.messageAwaits[channel.id + msg.author.id] = null;\n            client.emit(\"message\", msg, true); //2nd param is isAwaitedMessage\n          } else {\n            client.emit(\"message\", msg);\n          }\n        } else {\n          client.emit(\"warn\", \"message created but channel is not cached\");\n        }\n        break;\n      }\n      case PacketType.MESSAGE_DELETE: {\n        let channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n        if (channel) {\n          // potentially blank\n          let msg = channel.messages.get(\"id\", data.id);\n          client.emit(\"messageDeleted\", msg, channel);\n          if (msg) {\n            channel.messages.remove(msg);\n          } else {\n            client.emit(\"debug\", \"message was deleted but message is not cached\");\n          }\n        } else {\n          client.emit(\"warn\", \"message was deleted but channel is not cached\");\n        }\n        break;\n      }\n      case PacketType.MESSAGE_DELETE_BULK: {\n        let channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n        if (channel) {\n          data.ids.forEach((id) => {\n            // potentially blank\n            let msg = channel.messages.get(\"id\", id);\n            client.emit(\"messageDeleted\", msg, channel);\n            if (msg) {\n              channel.messages.remove(msg);\n            } else {\n              client.emit(\"debug\", \"message was deleted but message is not cached\");\n            }\n          });\n        } else {\n          client.emit(\"warn\", \"message was deleted but channel is not cached\");\n        }\n        break;\n      }\n      case PacketType.MESSAGE_UPDATE: {\n        // format https://discordapi.readthedocs.org/en/latest/reference/channels/messages.html#message-format\n        let channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n        if (channel) {\n          // potentially blank\n          let msg = channel.messages.get(\"id\", data.id);\n\n          if (msg) {\n            // old message exists\n            data.nonce = data.nonce !== undefined ? data.nonce : msg.nonce;\n            data.attachments = data.attachments !== undefined ? data.attachments : msg.attachments;\n            data.tts = data.tts !== undefined ? data.tts : msg.tts;\n            data.embeds = data.embeds !== undefined ? data.embeds : msg.embeds;\n            data.timestamp = data.timestamp !== undefined ? data.timestamp : msg.timestamp;\n            data.mention_everyone = data.mention_everyone !== undefined ? data.mention_everyone : msg.everyoneMentioned;\n            data.content = data.content !== undefined ? data.content : msg.content;\n            data.mentions = data.mentions !== undefined ? data.mentions : msg.mentions;\n            data.author = data.author !== undefined ? data.author : msg.author;\n            msg = new Message(msg, channel, client);\n          } else if (!data.author || !data.content) {\n            break;\n          }\n          let nmsg = new Message(data, channel, client);\n          client.emit(\"messageUpdated\", msg, nmsg);\n          if (msg) {\n            channel.messages.update(msg, nmsg);\n          }\n        } else {\n          client.emit(\"warn\", \"message was updated but channel is not cached\");\n        }\n        break;\n      }\n      case PacketType.SERVER_CREATE: {\n        let server = this.servers.get(\"id\", data.id);\n        if (!server) {\n          if (!data.unavailable) {\n            server = this.servers.add(new Server(data, client));\n            if (client.options.bot === false) {\n              this.unsyncedGuilds++;\n              this.syncGuild(server.id);\n            }\n            if (client.readyTime) {\n              client.emit(\"serverCreated\", server);\n            }\n            if (this.client.options.forceFetchUsers && server.large && server.members.length < server.memberCount) {\n              this.getGuildMembers(server.id, Math.ceil(server.memberCount / 1000));\n            }\n            let unavailable = this.unavailableServers.get(\"id\", server.id);\n            if (unavailable) {\n              this.unavailableServers.remove(unavailable);\n            }\n            this.restartServerCreateTimeout();\n          } else {\n            client.emit(\"debug\", \"server was unavailable, could not create\");\n          }\n        }\n        break;\n      }\n      case PacketType.SERVER_DELETE: {\n        let server = this.servers.get(\"id\", data.id);\n        if (server) {\n          if (!data.unavailable) {\n            client.emit(\"serverDeleted\", server);\n\n            for (let channel of server.channels) {\n              this.channels.remove(channel);\n            }\n\n            this.servers.remove(server);\n\n            for (let user of server.members) {\n              let found = false;\n              for (let s of this.servers) {\n                if (s.members.get(\"id\", user.id)) {\n                  found = true;\n                  break;\n                }\n              }\n              if (!found) {\n                this.users.remove(user);\n              }\n            }\n          } else {\n            client.emit(\"debug\", \"server was unavailable, could not update\");\n          }\n          this.buckets[\"bot:msg:guild:\" + packet.d.id] =\n            this.buckets[\"dmsg:\" + packet.d.id] =\n              this.buckets[\"bdmsg:\" + packet.d.id] =\n                this.buckets[\"guild_member:\" + packet.d.id] =\n                  this.buckets[\"guild_member_nick:\" + packet.d.id] = undefined;\n        } else {\n          client.emit(\"warn\", \"server was deleted but it was not in the cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_UPDATE: {\n        let server = this.servers.get(\"id\", data.id);\n        if (server) {\n          // server exists\n          data.members = data.members || [];\n          data.channels = data.channels || [];\n          let newserver = new Server(data, client);\n          newserver.members = server.members;\n          newserver.memberMap = server.memberMap;\n          newserver.channels = server.channels;\n          if (newserver.equalsStrict(server)) {\n            // already the same don't do anything\n            client.emit(\"debug\", \"received server update but server already updated\");\n          } else {\n            client.emit(\"serverUpdated\", new Server(server, client), newserver);\n            this.servers.update(server, newserver);\n          }\n        } else if (!server) {\n          client.emit(\"warn\", \"server was updated but it was not in the cache\");\n        }\n        break;\n      }\n      case PacketType.CHANNEL_CREATE: {\n\n        let channel = this.channels.get(\"id\", data.id);\n\n        if (!channel) {\n\n          let server = this.servers.get(\"id\", data.guild_id);\n          if (server) {\n            let chan = null;\n            if (data.type === 0) {\n              chan = this.channels.add(new TextChannel(data, client, server));\n            } else {\n              chan = this.channels.add(new VoiceChannel(data, client, server));\n            }\n            client.emit(\"channelCreated\", server.channels.add(chan));\n          } else if (data.is_private) {\n            client.emit(\"channelCreated\", this.private_channels.add(new PMChannel(data, client)));\n          } else {\n            client.emit(\"warn\", \"channel created but server does not exist\");\n          }\n\n        } else {\n          client.emit(\"warn\", \"channel created but already in cache\");\n        }\n\n        break;\n      }\n      case PacketType.CHANNEL_DELETE: {\n        let channel = this.channels.get(\"id\", data.id) || this.private_channels.get(\"id\", data.id);\n        if (channel) {\n\n          if (channel.server) { // accounts for PMs\n            channel.server.channels.remove(channel);\n            this.channels.remove(channel);\n          } else {\n            this.private_channels.remove(channel);\n          }\n\n          client.emit(\"channelDeleted\", channel);\n\n        } else {\n          client.emit(\"warn\", \"channel deleted but already out of cache?\");\n        }\n        break;\n      }\n      case PacketType.CHANNEL_UPDATE: {\n        let channel = this.channels.get(\"id\", data.id) || this.private_channels.get(\"id\", data.id);\n        if (channel) {\n\n          if (channel instanceof PMChannel) {\n            //PM CHANNEL\n            client.emit(\"channelUpdated\", new PMChannel(channel, client),\n              this.private_channels.update(channel, new PMChannel(data, client)));\n          } else {\n            if (channel.server) {\n              if (channel.type === 0) {\n                //TEXT CHANNEL\n                let chan = new TextChannel(data, client, channel.server);\n                chan.messages = channel.messages;\n                client.emit(\"channelUpdated\", channel, chan);\n                channel.server.channels.update(channel, chan);\n                this.channels.update(channel, chan);\n              } else {\n                //VOICE CHANNEL\n                data.members = channel.members;\n                let chan = new VoiceChannel(data, client, channel.server);\n                client.emit(\"channelUpdated\", channel, chan);\n                channel.server.channels.update(channel, chan);\n                this.channels.update(channel, chan);\n              }\n            } else {\n              client.emit(\"warn\", \"channel updated but server non-existant\");\n            }\n          }\n\n        } else {\n          client.emit(\"warn\", \"channel updated but not in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_ROLE_CREATE: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n          client.emit(\"serverRoleCreated\", server.roles.add(new Role(data.role, server, client)), server);\n        } else {\n          client.emit(\"warn\", \"server role made but server not in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_ROLE_DELETE: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n          let role = server.roles.get(\"id\", data.role_id);\n          if (role) {\n            server.roles.remove(role);\n            client.emit(\"serverRoleDeleted\", role);\n          } else {\n            client.emit(\"warn\", \"server role deleted but role not in cache\");\n          }\n        } else {\n          client.emit(\"warn\", \"server role deleted but server not in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_ROLE_UPDATE: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n          let role = server.roles.get(\"id\", data.role.id);\n          if (role) {\n            let newRole = new Role(data.role, server, client);\n            client.emit(\"serverRoleUpdated\", new Role(role, server, client), newRole);\n            server.roles.update(role, newRole);\n          } else {\n            client.emit(\"warn\", \"server role updated but role not in cache\");\n          }\n        } else {\n          client.emit(\"warn\", \"server role updated but server not in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_MEMBER_ADD: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n\n          server.memberMap[data.user.id] = {\n            roles: data.roles,\n            mute: false,\n            selfMute: false,\n            deaf: false,\n            selfDeaf: false,\n            joinedAt: Date.parse(data.joined_at),\n            nick: data.nick || null\n          };\n\n          server.memberCount++;\n\n          client.emit(\n            \"serverNewMember\",\n            server,\n            server.members.add(this.users.add(new User(data.user, client)))\n          );\n\n        } else {\n          client.emit(\"warn\", \"server member added but server doesn't exist in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_MEMBER_REMOVE: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n          let user = this.users.get(\"id\", data.user.id);\n          if (user) {\n            client.emit(\"serverMemberRemoved\", server, user);\n            server.memberMap[data.user.id] = null;\n            server.members.remove(user);\n            server.memberCount--;\n          } else {\n            client.emit(\"warn\", \"server member removed but user doesn't exist in cache\");\n          }\n        } else {\n          client.emit(\"warn\", \"server member removed but server doesn't exist in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_MEMBER_UPDATE: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n          let user = this.users.add(new User(data.user, client));\n          if (user) {\n            let oldMember = null;\n            if (server.memberMap[data.user.id]) {\n              oldMember = {\n                roles: server.memberMap[data.user.id].roles,\n                mute: server.memberMap[data.user.id].mute,\n                selfMute: server.memberMap[data.user.id].selfMute,\n                deaf: server.memberMap[data.user.id].deaf,\n                selfDeaf: server.memberMap[data.user.id].selfDeaf,\n                nick: server.memberMap[data.user.id].nick\n              };\n            } else {\n              server.memberMap[data.user.id] = {};\n            }\n            server.memberMap[data.user.id].roles = data.roles ? data.roles : server.memberMap[data.user.id].roles;\n            server.memberMap[data.user.id].mute = data.mute || server.memberMap[data.user.id].mute;\n            server.memberMap[data.user.id].selfMute = data.self_mute === undefined ? server.memberMap[data.user.id].selfMute : data.self_mute;\n            server.memberMap[data.user.id].deaf = data.deaf || server.memberMap[data.user.id].deaf;\n            server.memberMap[data.user.id].selfDeaf = data.self_deaf === undefined ? server.memberMap[data.user.id].selfDeaf : data.self_deaf;\n            server.memberMap[data.user.id].nick = data.nick === undefined ? server.memberMap[data.user.id].nick : data.nick || null;\n            client.emit(\"serverMemberUpdated\", server, user, oldMember);\n          } else {\n            client.emit(\"warn\", \"server member removed but user doesn't exist in cache\");\n          }\n        } else {\n          client.emit(\"warn\", \"server member updated but server doesn't exist in cache\");\n        }\n        break;\n      }\n      case PacketType.PRESENCE_UPDATE: {\n\n        let user = this.users.add(new User(data.user, client));\n        let server = this.servers.get(\"id\", data.guild_id);\n\n        if (user && server) {\n\n          server.members.add(user);\n\n          data.user.username = data.user.username || user.username;\n          data.user.id = data.user.id || user.id;\n          data.user.avatar = data.user.avatar !== undefined ? data.user.avatar : user.avatar;\n          data.user.discriminator = data.user.discriminator || user.discriminator;\n          data.user.status = data.status || user.status;\n          data.user.game = data.game !== undefined ? data.game : user.game;\n          data.user.bot = data.user.bot !== undefined ? data.user.bot : user.bot;\n\n          let presenceUser = new User(data.user, client);\n\n          if (!presenceUser.equalsStrict(user)) {\n            client.emit(\"presence\", user, presenceUser);\n            this.users.update(user, presenceUser);\n          }\n\n        } else {\n          client.emit(\"warn\", \"presence update but user/server not in cache\");\n        }\n\n        break;\n      }\n      case PacketType.USER_UPDATE: {\n\n        let user = this.users.get(\"id\", data.id);\n\n        if (user) {\n\n          data.username = data.username || user.username;\n          data.id = data.id || user.id;\n          data.avatar = data.avatar || user.avatar;\n          data.discriminator = data.discriminator || user.discriminator;\n          this.email = data.email || this.email;\n\n          let presenceUser = new User(data, client);\n\n          client.emit(\"presence\", user, presenceUser);\n          this.users.update(user, presenceUser);\n\n        } else {\n          client.emit(\"warn\", \"user update but user not in cache (this should never happen)\");\n        }\n\n        break;\n      }\n      case PacketType.TYPING: {\n\n        let user = this.users.get(\"id\", data.user_id);\n        let channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n\n        if (user && channel) {\n          if (user.typing.since) {\n            user.typing.since = Date.now();\n            user.typing.channel = channel;\n          } else {\n            user.typing.since = Date.now();\n            user.typing.channel = channel;\n            client.emit(\"userTypingStarted\", user, channel);\n          }\n          setTimeout(() => {\n            if (Date.now() - user.typing.since > 5500) {\n              // they haven't typed since\n              user.typing.since = null;\n              user.typing.channel = null;\n              client.emit(\"userTypingStopped\", user, channel);\n            }\n          }, 6000);\n\n        } else {\n          client.emit(\"warn\", \"user typing but user or channel not existant in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_BAN_ADD: {\n        let user = this.users.get(\"id\", data.user.id);\n        let server = this.servers.get(\"id\", data.guild_id);\n\n        if (user && server) {\n          client.emit(\"userBanned\", user, server);\n        } else {\n          client.emit(\"warn\", \"user banned but user/server not in cache.\");\n        }\n        break;\n      }\n      case PacketType.SERVER_BAN_REMOVE: {\n        let user = this.users.get(\"id\", data.user.id);\n        let server = this.servers.get(\"id\", data.guild_id);\n\n        if (user && server) {\n          client.emit(\"userUnbanned\", user, server);\n        } else {\n          client.emit(\"warn\", \"user unbanned but user/server not in cache.\");\n        }\n        break;\n      }\n      case PacketType.USER_NOTE_UPDATE: {\n        if (this.user.bot) {\n          return;\n        }\n        let user = this.users.get(\"id\", data.id);\n        let oldNote = user.note;\n        let note = data.note || null;\n\n        // user in cache\n        if (user) {\n          let updatedUser = user;\n          updatedUser.note = note;\n\n          client.emit(\"noteUpdated\", user, oldNote);\n\n          this.users.update(user, updatedUser);\n\n        } else {\n          client.emit(\"warn\", \"note updated but user not in cache\");\n        }\n        break;\n      }\n      case PacketType.VOICE_STATE_UPDATE: {\n        let user = this.users.get(\"id\", data.user_id);\n        let server = this.servers.get(\"id\", data.guild_id);\n\n        if (user && server) {\n\n          if (data.channel_id) {\n            // in voice channel\n            let channel = this.channels.get(\"id\", data.channel_id);\n            if (channel && channel.type === 2) {\n              server.eventVoiceStateUpdate(channel, user, data);\n            } else {\n              client.emit(\"warn\", \"voice state channel not in cache\");\n            }\n          } else {\n            // not in voice channel\n            client.emit(\"voiceLeave\", server.eventVoiceLeave(user), user);\n          }\n\n        } else {\n          client.emit(\"warn\", \"voice state update but user or server not in cache\");\n        }\n\n        if (user && user.id === this.user.id) { // only for detecting self user movements for connections.\n          let connection = this.voiceConnections.get(\"server\", server);\n          // existing connection, perhaps channel moved\n          if (connection && connection.voiceChannel && connection.voiceChannel.id !== data.channel_id) {\n            // moved, update info\n            connection.voiceChannel = this.channels.get(\"id\", data.channel_id);\n            client.emit(\"voiceMoved\", connection.voiceChannel); // Moved to a new channel\n          }\n        }\n\n        break;\n      }\n      case PacketType.SERVER_MEMBERS_CHUNK: {\n\n        let server = this.servers.get(\"id\", data.guild_id);\n\n        if (server) {\n\n          let testtime = Date.now();\n\n          for (let user of data.members) {\n            server.memberMap[user.user.id] = {\n              roles: user.roles,\n              mute: user.mute,\n              selfMute: false,\n              deaf: user.deaf,\n              selfDeaf: false,\n              joinedAt: Date.parse(user.joined_at),\n              nick: user.nick || null\n            };\n            server.members.add(this.users.add(new User(user.user, client)));\n          }\n\n          if (this.forceFetchCount.hasOwnProperty(server.id)) {\n            if (this.forceFetchCount[server.id] <= 1) {\n              delete this.forceFetchCount[server.id];\n              this.restartServerCreateTimeout();\n            } else {\n              this.forceFetchCount[server.id]--;\n            }\n          }\n\n          client.emit(\"debug\", (Date.now() - testtime) + \"ms for \" + data.members.length + \" user chunk for server with id \" + server.id);\n\n        } else {\n          client.emit(\"warn\", \"chunk update received but server not in cache\");\n        }\n\n        break;\n      }\n      case PacketType.FRIEND_ADD: {\n        if (this.user.bot) {\n          return;\n        }\n        if (data.type === 1) { // accepted/got accepted a friend request\n          let inUser = this.incoming_friend_requests.get(\"id\", data.id);\n          if (inUser) {\n            // client accepted another user\n            this.incoming_friend_requests.remove(this.friends.add(new User(data.user, client)));\n            return;\n          }\n\n          let outUser = this.outgoing_friend_requests.get(\"id\", data.id);\n          if (outUser) {\n            // another user accepted the client\n            this.outgoing_friend_requests.remove(this.friends.add(new User(data.user, client)));\n            client.emit(\"friendRequestAccepted\", outUser);\n            return;\n          }\n        } else if (data.type === 2) {\n          // client received block\n          this.blocked_users.add(new User(data.user, client));\n        } else if (data.type === 3) {\n          // client received friend request\n          client.emit(\"friendRequestReceived\", this.incoming_friend_requests.add(new User(data.user, client)));\n        } else if (data.type === 4) {\n          // client sent friend request\n          this.outgoing_friend_requests.add(new User(data.user, client));\n        }\n        break;\n      }\n      case PacketType.FRIEND_REMOVE: {\n        if (this.user.bot) {\n          return;\n        }\n        let user = this.friends.get(\"id\", data.id);\n        if (user) {\n          this.friends.remove(user);\n          client.emit(\"friendRemoved\", user);\n          return;\n        }\n\n        user = this.blocked_users.get(\"id\", data.id);\n        if (user) { // they rejected friend request\n          this.blocked_users.remove(user);\n          return;\n        }\n\n        user = this.incoming_friend_requests.get(\"id\", data.id);\n        if (user) { // they rejected outgoing friend request OR client user manually deleted incoming through web client/other clients\n          let rejectedUser = this.outgoing_friend_requests.get(\"id\", user.id);\n          if (rejectedUser) {\n            // other person rejected outgoing\n            client.emit(\"friendRequestRejected\", this.outgoing_friend_requests.remove(rejectedUser));\n            return;\n          }\n\n          // incoming deleted manually\n          this.incoming_friend_requests.remove(user);\n          return;\n        }\n\n        user = this.outgoing_friend_requests.get(\"id\", data.id);\n        if (user) { // client cancelled incoming friend request OR client user manually deleted outgoing through web client/other clients\n          let incomingCancel = this.incoming_friend_requests.get(\"id\", user.id);\n          if (incomingCancel) {\n            // client cancelled incoming\n            this.incoming_friend_requests.remove(user);\n            return;\n          }\n\n          // outgoing deleted manually\n          this.outgoing_friend_requests.remove(user);\n          return;\n        }\n        break;\n      }\n      case PacketType.SERVER_SYNC: {\n        let guild = this.servers.get(data.id);\n        data.members.forEach((dataUser) => {\n          guild.memberMap[dataUser.user.id] = {\n            roles: dataUser.roles,\n            mute: dataUser.mute,\n            selfMute: dataUser.self_mute,\n            deaf: dataUser.deaf,\n            selfDeaf: dataUser.self_deaf,\n            joinedAt: Date.parse(dataUser.joined_at),\n            nick: dataUser.nick || null\n          };\n          guild.members.add(client.internal.users.add(new User(dataUser.user, client)));\n        });\n        for (let presence of data.presences) {\n          let user = client.internal.users.get(\"id\", presence.user.id);\n          if (user) {\n            user.status = presence.status;\n            user.game = presence.game;\n          }\n        }\n        if (guild.pendingVoiceStates && guild.pendingVoiceStates.length > 0) {\n          for (let voiceState of guild.pendingVoiceStates) {\n            let user = guild.members.get(\"id\", voiceState.user_id);\n            if (user) {\n              guild.memberMap[user.id] = guild.memberMap[user.id] || {};\n              guild.memberMap[user.id].mute = voiceState.mute || guild.memberMap[user.id].mute;\n              guild.memberMap[user.id].selfMute = voiceState.self_mute === undefined ? guild.memberMap[user.id].selfMute : voiceState.self_mute;\n              guild.memberMap[user.id].deaf = voiceState.deaf || guild.memberMap[user.id].deaf;\n              guild.memberMap[user.id].selfDeaf = voiceState.self_deaf === undefined ? guild.memberMap[user.id].selfDeaf : voiceState.self_deaf;\n              let channel = guild.channels.get(\"id\", voiceState.channel_id);\n              if (channel) {\n                guild.eventVoiceJoin(user, channel);\n              } else {\n                guild.client.emit(\"warn\", \"channel doesn't exist even though GUILD_SYNC expects them to\");\n              }\n            } else {\n              guild.client.emit(\"warn\", \"user doesn't exist even though GUILD_SYNC expects them to\");\n            }\n          }\n        }\n        guild.pendingVoiceStates = null;\n        this.unsyncedGuilds--;\n        this.restartServerCreateTimeout();\n        break;\n      }\n      default: {\n        client.emit(\"unknown\", packet);\n        break;\n      }\n    }\n  }\n\n  resume() {\n    let data = {\n      op: 6,\n      d: {\n        token: this.token,\n        session_id: this.sessionID,\n        seq: this.sequence\n      }\n    };\n\n    this.sendWS(data);\n  }\n\n  identify() {\n    let data = {\n      op: 2,\n      d: {\n        token: this.token,\n        v: GATEWAY_VERSION,\n        compress: this.client.options.compress,\n        large_threshold: this.client.options.largeThreshold,\n        properties: {\n          \"$os\": process.platform,\n          \"$browser\": \"discord.js\",\n          \"$device\": \"discord.js\",\n          \"$referrer\": \"\",\n          \"$referring_domain\": \"\"\n        }\n      }\n    };\n\n    if (this.client.options.shard) {\n      data.d.shard = this.client.options.shard;\n    }\n\n    this.sendWS(data);\n  }\n\n  heartbeat() {\n    if (!this.heartbeatAcked) this.disconnected(true);\n    this.heartbeatAcked = false;\n    this.sendWS({op: 1, d: Date.now()});\n  }\n}\n"]}
\ No newline at end of file
+<<<<<<< Updated upstream
+{"version":3,"sources":["../../src/Client/InternalClient.js"],"names":["GATEWAY_VERSION","zlib","waitFor","condition","value","interval","Promise","resolve","int","setInterval","isDone","clearInterval","delay","ms","setTimeout","InternalClient","constructor","discordClient","setupCalled","setup","apiRequest","method","url","useAuth","data","file","reject","promise","res","rej","buckets","match","channels","get","private_channels","server","id","user","bot","username","self","actualCall","startTime","Date","now","ret","set","token","attach","name","i","hasOwnProperty","undefined","field","send","userAgentInfo","full","end","error","status","client","emit","options","shard","body","done","bucket","queue","state","IDLE","websocket","userAgent","version","require","compress","users","friends","blocked_users","outgoing_friend_requests","incoming_friend_requests","servers","unavailableServers","autoReconnectInterval","unsyncedGuilds","guildSyncQueue","guildSyncQueueLength","intervals","typing","kai","misc","voiceConnections","resolver","readyTime","messageAwaits","tokenCacher","init","cleanIntervals","concat","disconnected","autoReconnect","forEach","vc","leaveVoiceChannel","Math","min","random","email","loginWithToken","password","catch","uptime","info","chann","leave","connection","destroy","resolveChannel","then","channel","Error","type","awaitResponse","msg","resolveMessage","awaitID","author","push","joinVoiceChannel","joinSendWS","sendWS","op","d","joinVoice","session","sessionID","endpoint","timeout","check","t","guild_id","chan","add","on","clearTimeout","removeListener","existingServerConn","length","voiceConnection","getGuildMembers","serverID","chunkCount","forceFetchCount","forceFetchLength","requestGuildMembers","forceFetchQueue","query","limit","syncGuild","guildID","checkReady","key","restartServerCreateTimeout","guildCreateTimeout","createServer","region","resolveString","SERVERS","joinServer","invite","resolveInviteID","INVITE","guild","updateServer","resolveServer","newOptions","icon","resolveToBase64","splash","owner","resolveUser","owner_id","verificationLevel","verification_level","afkChannel","afk_channel_id","afkTimeout","afk_timeout","SERVER","leaveServer","srv","ME_SERVER","deleteServer","LOGGED_IN","getGateway","startsWith","createWS","login","tk","getToken","DISCONNECTED","LOGGING_IN","LOGIN","setToken","logout","disconnect","close","LOGOUT","startPM","resUser","ME_CHANNELS","recipient_id","gatewayURL","GATEWAY","sendMessage","where","_content","String","basename","path","destination","content","disableEveryone","replace","resolveFile","CHANNEL_MESSAGES","tts","nonce","messages","sendFile","_file","deleteMessage","_message","message","chain","wait","CHANNEL_MESSAGE","remove","deleteMessages","_messages","Array","map","m","updateMessage","update","getChannelLogs","_channel","qsObject","before","after","around","stringify","getMessage","messageID","pinMessage","CHANNEL_PIN","unpinMessage","pinned","getPinnedMessages","CHANNEL_PINS","getBans","SERVER_BANS","ban","createChannel","SERVER_CHANNELS","deleteChannel","CHANNEL","banMember","resolvedUser","unbanMember","kickMember","SERVER_MEMBERS","moveMember","channel_id","voiceChannel","muteMember","mute","unmuteMember","deafenMember","deaf","undeafenMember","setNickname","nick","setNote","note","ME_NOTES","createRole","SERVER_ROLES","role","roles","updateRole","resolveRole","newData","color","hoist","position","permissions","mentionable","perm","deleteRole","addMemberToRole","member","isArray","r","some","memberMap","roleIDs","indexOf","memberHasRole","roledata","rolesOf","removeMemberFromRole","item","splice","createInvite","chanServ","validate","max_age","maxAge","max_uses","maxUses","temporary","xkcdpass","xkcd","CHANNEL_INVITES","deleteInvite","getInvite","has","res2","getInvites","SERVER_INVITES","overwritePermissions","updated","allow","deny","previousOverwrite","permissionOverwrites","CHANNEL_PERMISSIONS","setStatus","idleStatus","game","packet","idle_since","sendTyping","startTyping","stopTyping","updateDetails","avatar","new_password","newPassword","ME","setAvatar","setUsername","setChannelTopic","topic","updateChannel","setChannelName","setChannelPosition","setChannelUserLimit","userLimit","setChannelBitrate","kbitrate","bitrate","user_limit","ceil","_bitrate","addFriend","discriminator","FRIENDS","removeFriend","getServerWebhooks","SERVER_WEBHOOKS","webhook","webhooks","getChannelWebhooks","CHANNEL_WEBHOOKS","editWebhook","resolveWebhook","WEBHOOK","createWebhook","deleteWebhook","sendWebhookMessage","slack","WEBHOOK_MESSAGE","getOAuthApplication","appID","OAUTH2_APPLICATION","ack","object","JSON","endsWith","onopen","onclose","event","code","err","sequence","onerror","e","onmessage","Buffer","inflateSync","toString","parse","s","processPacket","heartbeatAcked","heartbeat","identify","resume","heartbeat_interval","RESUMED","READY","session_id","guilds","unavailable","forceFetchUsers","members","memberCount","pm","relationships","friend","notes","newUser","MESSAGE_CREATE","lastMessageID","fn","MESSAGE_DELETE","MESSAGE_DELETE_BULK","ids","MESSAGE_UPDATE","attachments","embeds","timestamp","mention_everyone","everyoneMentioned","mentions","nmsg","SERVER_CREATE","large","SERVER_DELETE","found","SERVER_UPDATE","newserver","equalsStrict","CHANNEL_CREATE","is_private","CHANNEL_DELETE","CHANNEL_UPDATE","SERVER_ROLE_CREATE","SERVER_ROLE_DELETE","role_id","SERVER_ROLE_UPDATE","newRole","SERVER_MEMBER_ADD","selfMute","selfDeaf","joinedAt","joined_at","SERVER_MEMBER_REMOVE","SERVER_MEMBER_UPDATE","oldMember","self_mute","self_deaf","PRESENCE_UPDATE","presenceUser","USER_UPDATE","TYPING","user_id","since","SERVER_BAN_ADD","SERVER_BAN_REMOVE","USER_NOTE_UPDATE","oldNote","updatedUser","VOICE_STATE_UPDATE","eventVoiceStateUpdate","eventVoiceLeave","SERVER_MEMBERS_CHUNK","testtime","FRIEND_ADD","inUser","outUser","FRIEND_REMOVE","rejectedUser","incomingCancel","SERVER_SYNC","dataUser","internal","presence","presences","pendingVoiceStates","voiceState","eventVoiceJoin","seq","v","large_threshold","largeThreshold","properties","process","platform"],"mappings":"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","file":"InternalClient.js","sourcesContent":["\"use strict\";\n\nimport request from \"superagent\";\nimport WebSocket from \"ws\";\nimport ConnectionState from \"./ConnectionState\";\nimport qs from \"querystring\";\n\nimport {Endpoints, PacketType, Permissions} from \"../Constants\";\n\nimport Bucket from \"../Util/Bucket\";\nimport Cache from \"../Util/Cache\";\nimport Resolver from \"./Resolver/Resolver\";\n\nimport User from \"../Structures/User\";\nimport Channel from \"../Structures/Channel\";\nimport ServerChannel from \"../Structures/ServerChannel\";\nimport TextChannel from \"../Structures/TextChannel\";\nimport VoiceChannel from \"../Structures/VoiceChannel\";\nimport PMChannel from \"../Structures/PMChannel\";\nimport Server from \"../Structures/Server\";\nimport Message from \"../Structures/Message\";\nimport Role from \"../Structures/Role\";\nimport Invite from \"../Structures/Invite\";\nimport Webhook from \"../Structures/Webhook\";\nimport VoiceConnection from \"../Voice/VoiceConnection\";\nimport TokenCacher from \"../Util/TokenCacher\";\n\nlet GATEWAY_VERSION = 6;\nlet zlib;\n// let libVersion = require('../../package.json').version;\n\nfunction waitFor(condition, value = condition, interval = 20) {\n  return new Promise(resolve => {\n    let int = setInterval(() => {\n      let isDone = condition();\n      if (isDone) {\n        if (condition === value) {\n          resolve(isDone);\n        } else {\n          resolve(value(isDone));\n        }\n        return clearInterval(int);\n      }\n    }, interval);\n  });\n}\n\nfunction delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport default class InternalClient {\n  constructor(discordClient) {\n    this.setupCalled = false;\n    this.setup(discordClient);\n  }\n\n  apiRequest(method, url, useAuth, data, file) {\n    let resolve, reject;\n    let promise = new Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n    let buckets = [];\n    let match = url.match(/\\/channels\\/([0-9]+)\\/messages(\\/[0-9]+)?$/);\n    if (match) {\n      if (method === \"del\" && (match[1] = this.channels.get(\"id\", match[1]) || this.private_channels.get(\"id\", match[1]))) {\n        buckets = [\"dmsg:\" + (match[1].server || {}).id];\n      } else if (this.user.bot) {\n        if (method === \"post\" || method === \"patch\") {\n          if (this.private_channels.get(\"id\", match[1])) {\n            buckets = [\"bot:msg:dm\", \"bot:msg:global\"];\n          } else if ((match[1] = this.channels.get(\"id\", match[1]))) {\n            buckets = [\"bot:msg:guild:\" + match[1].server.id, \"bot:msg:global\"];\n          }\n        }\n      } else {\n        buckets = [\"msg\"];\n      }\n    } else if (method === \"patch\") {\n      if (url === \"/users/@me\" && this.user && data.username && data.username !== this.user.username) {\n        buckets = [\"username\"];\n      } else if ((match = url.match(/\\/guilds\\/([0-9]+)\\/members\\/[0-9]+$/))) {\n        buckets = [\"guild_member:\" + match[1]];\n      } else if ((match = url.match(/\\/guilds\\/([0-9]+)\\/members\\/@me\\/nick$/))) {\n        buckets = [\"guild_member_nick:\" + match[1]];\n      }\n    }\n\n    let self = this;\n\n    let actualCall = function () {\n      let startTime = Date.now();\n      let ret = request[method](url);\n      if (useAuth) {\n        ret.set(\"authorization\", self.token);\n      }\n      if (file) {\n        ret.attach(\"file\", file.file, file.name);\n        if (data) {\n          for (let i in data) {\n            if (data.hasOwnProperty(i)) {\n              if (data[i] !== undefined) {\n                ret.field(i, data[i]);\n              }\n            }\n          }\n        }\n      } else if (data) {\n        ret.send(data);\n      }\n      ret.set('User-Agent', self.userAgentInfo.full);\n      ret.end((error, data) => {\n        if (error) {\n          if (data && data.status === 429) {\n            self.client.emit(\"debug\", \"Encountered 429 at \" + url + \" | \" + self.client.options.shard + \" | Buckets\" + buckets + \" | \" + (Date.now() - startTime) + \"ms latency\");\n          }\n          reject(error);\n        } else {\n          resolve(data.body);\n        }\n      });\n    };\n    let waitFor = 1;\n    let i = 0;\n    let done = function () {\n      if (++i === waitFor) {\n        actualCall();\n      }\n    };\n    for (let bucket of buckets) {\n      ++waitFor;\n      this.buckets[bucket].queue(done);\n    }\n    done();\n    return promise;\n  }\n\n  setup(discordClient) {\n    this.setupCalled = true;\n    discordClient = discordClient || this.client;\n    this.client = discordClient;\n    this.state = ConnectionState.IDLE;\n    this.websocket = null;\n    this.userAgent = {\n      url: 'https://github.com/hydrabolt/discord.js',\n      version: require('../../package.json').version\n    };\n\n    if (this.client.options.compress) {\n      zlib = require(\"zlib\");\n    }\n\n    // creates 4 caches with discriminators based on ID\n    this.users = new Cache();\n    this.friends = new Cache();\n    this.blocked_users = new Cache();\n    this.outgoing_friend_requests = new Cache();\n    this.incoming_friend_requests = new Cache();\n    this.channels = new Cache();\n    this.servers = new Cache();\n    this.unavailableServers = new Cache();\n    this.private_channels = new Cache();\n    this.autoReconnectInterval = 1000;\n    this.unsyncedGuilds = 0;\n    this.guildSyncQueue = [];\n    this.guildSyncQueueLength = 1;\n\n    this.intervals = {\n      typing: [],\n      kai: null,\n      misc: []\n    };\n\n    this.voiceConnections = new Cache();\n    this.resolver = new Resolver(this);\n    this.readyTime = null;\n    this.messageAwaits = {};\n    this.buckets = {\n      \"bot:msg:dm\": new Bucket(5, 5000),\n      \"bot:msg:global\": new Bucket(50, 10000),\n      \"msg\": new Bucket(10, 10000),\n      \"dmsg:undefined\": new Bucket(5, 1000),\n      \"username\": new Bucket(2, 3600000)\n    };\n\n    if (!this.tokenCacher) {\n      this.tokenCacher = new TokenCacher(this.client);\n      this.tokenCacher.init(0);\n    }\n  }\n\n  cleanIntervals() {\n    for (let interval of this.intervals.typing.concat(this.intervals.misc).concat(this.intervals.kai)) {\n      if (interval) {\n        clearInterval(interval);\n      }\n    }\n  }\n\n  disconnected(autoReconnect = false) {\n\n    this.cleanIntervals();\n\n    this.voiceConnections.forEach(vc => {\n      this.leaveVoiceChannel(vc);\n    });\n\n    if (autoReconnect) {\n      this.autoReconnectInterval = Math.min(this.autoReconnectInterval * (Math.random() + 1), 60000);\n      setTimeout(() => {\n        if (!this.email && !this.token) {\n          return;\n        }\n\n        // Check whether the email is set (if not, only a token has been used for login)\n        this.loginWithToken(this.token, this.email, this.password).catch(() => this.disconnected(true));\n      }, this.autoReconnectInterval);\n    }\n\n    this.client.emit(\"disconnected\");\n  }\n\n  get uptime() {\n    return (this.readyTime ? Date.now() - this.readyTime : null);\n  }\n\n  set userAgent(info) {\n    info.full = `DiscordBot (${info.url}, ${info.version})`;\n    this.userAgentInfo = info;\n  }\n\n  get userAgent() {\n    return this.userAgentInfo;\n  }\n\n  //def leaveVoiceChannel\n  leaveVoiceChannel(chann) {\n    if (this.user.bot) {\n      let leave = (connection) => {\n        return new Promise((resolve) => {\n          connection.destroy();\n          resolve();\n        });\n      };\n\n      if (chann instanceof VoiceChannel) {\n        return this.resolver.resolveChannel(chann).then(channel => {\n          if (!channel) {\n            return Promise.reject(new Error(\"voice channel does not exist\"));\n          }\n\n          if (channel.type !== 2) {\n            return Promise.reject(new Error(\"channel is not a voice channel!\"));\n          }\n\n          let connection = this.voiceConnections.get(\"voiceChannel\", channel);\n          if (!connection) {\n            return Promise.reject(new Error(\"not connected to that voice channel\"));\n          }\n          return leave(connection);\n        });\n      } else if (chann instanceof VoiceConnection) {\n        return leave(chann);\n      } else {\n        return Promise.reject(new Error(\"invalid voice channel/connection to leave\"))\n      }\n    } else {\n      // preserve old functionality for non-bots\n      if (this.voiceConnections[0]) {\n        this.voiceConnections[0].destroy();\n      }\n      return Promise.resolve();\n    }\n  }\n\n  //def awaitResponse\n  awaitResponse(msg) {\n    return new Promise((resolve, reject) => {\n\n      msg = this.resolver.resolveMessage(msg);\n\n      if (!msg) {\n        reject(new Error(\"message undefined\"));\n        return;\n      }\n\n      let awaitID = msg.channel.id + msg.author.id;\n\n      if (!this.messageAwaits[awaitID]) {\n        this.messageAwaits[awaitID] = [];\n      }\n\n      this.messageAwaits[awaitID].push(resolve);\n    });\n  }\n\n  //def joinVoiceChannel\n  joinVoiceChannel(chann) {\n    return this.resolver.resolveChannel(chann).then(channel => {\n      if (!channel) {\n        return Promise.reject(new Error(\"voice channel does not exist\"));\n      }\n\n      if (channel.type !== 2) {\n        return Promise.reject(new Error(\"channel is not a voice channel!\"));\n      }\n\n      let joinSendWS = () => {\n        this.sendWS({\n          op: 4,\n          d: {\n            \"guild_id\": channel.server.id,\n            \"channel_id\": channel.id,\n            \"self_mute\": false,\n            \"self_deaf\": false\n          }\n        });\n      };\n\n      let joinVoice = () => {\n        return new Promise((resolve, reject) => {\n          let session = this.sessionID, token, server = channel.server, endpoint;\n\n          let timeout = null;\n\n          let check = data => {\n            if (data.t === \"VOICE_SERVER_UPDATE\") {\n              if (data.d.guild_id !== server.id) return; // ensure it is the right server\n              token = data.d.token;\n              endpoint = data.d.endpoint;\n              if (!token || !endpoint) return;\n              let chan = new VoiceConnection(\n                channel, this.client, session, token, server, endpoint\n              );\n              this.voiceConnections.add(chan);\n\n              chan.on(\"ready\", () => resolve(chan));\n              chan.on(\"error\", reject);\n              chan.on(\"close\", reject);\n\n              if (timeout) {\n                clearTimeout(timeout);\n              }\n              this.client.removeListener(\"raw\", check);\n            }\n          };\n\n          timeout = setTimeout(() => {\n            this.client.removeListener(\"raw\", check);\n            reject(new Error(\"No voice server details within 10 seconds\"));\n          }, 10000);\n\n          this.client.on(\"raw\", check);\n          joinSendWS();\n        });\n      };\n\n      let existingServerConn = this.voiceConnections.get(\"server\", channel.server); // same server connection\n      if (existingServerConn) {\n        joinSendWS(); // Just needs to update by sending via WS, movement in cache will be handled by global handler\n        return Promise.resolve(existingServerConn);\n      }\n\n      if (!this.user.bot && this.voiceConnections.length > 0) { // nonbot, one voiceconn only, just like last time just disconnect\n        return this.leaveVoiceChannel().then(joinVoice);\n      }\n\n      return joinVoice();\n    });\n  }\n\n  // Backwards-compatible utility getter method for the first voice connection\n  // Thanks to #q (@qeled) for suggesting this\n  get voiceConnection() {\n    return this.voiceConnections[0];\n  }\n\n  getGuildMembers(serverID, chunkCount) {\n    this.forceFetchCount[serverID] = chunkCount;\n    if (this.forceFetchLength + 3 + serverID.length > 4000) { // 4096 max, '{\"op\":8,\"d\":{\"guild_id\":[],\"query\":\"\",\"limit\":0}}'.length = 49 plus some leeway\n      this.requestGuildMembers(this.forceFetchQueue);\n      this.forceFetchQueue = [serverID];\n      this.forceFetchLength = 1 + serverID.length + 3;\n    } else {\n      this.forceFetchQueue.push(serverID);\n      this.forceFetchLength += serverID.length + 3;\n    }\n  }\n\n  requestGuildMembers(serverID, query, limit) {\n    this.sendWS({\n      op: 8,\n      d: {\n        guild_id: serverID,\n        query: query || \"\",\n        limit: limit || 0\n      }\n    });\n  }\n\n  syncGuild(guildID) {\n    if (this.guildSyncQueueLength + 3 + guildID.length > 4050) { // 4096 max, '{\"op\":12,\"d\":[]}'.length = 16 plus some leeway\n      this.sendWS({op: 12, d: this.guildSyncQueue});\n      this.guildSyncQueue = [guildID];\n      this.guildSyncQueueLength = 1 + guildID.length + 3;\n    } else {\n      this.guildSyncQueue.push(guildID);\n      this.guildSyncQueueLength += guildID.length + 3;\n    }\n  }\n\n  checkReady() {\n    if (!this.readyTime) {\n      if (this.guildSyncQueue.length > 0) {\n        this.sendWS({op: 12, d: this.guildSyncQueue});\n        this.guildSyncQueue = [];\n        this.guildSyncQueueLength = 1;\n        return;\n      }\n      if (this.unsyncedGuilds > 0) {\n        return;\n      }\n      if (this.forceFetchQueue.length > 0) {\n        this.requestGuildMembers(this.forceFetchQueue);\n        this.forceFetchQueue = [];\n        this.forceFetchLength = 1;\n      } else {\n        for (let key in this.forceFetchCount) {\n          if (this.forceFetchCount.hasOwnProperty(key)) {\n            return;\n          }\n        }\n        this.readyTime = Date.now();\n        this.client.emit(\"ready\");\n      }\n    }\n  }\n\n  restartServerCreateTimeout() {\n    if (this.guildCreateTimeout) {\n      clearTimeout(this.guildCreateTimeout);\n      this.guildCreateTimeout = null;\n    }\n    if (!this.readyTime) {\n      this.guildCreateTimeout = setTimeout(() => {\n        this.checkReady();\n      }, this.client.options.guildCreateTimeout);\n    }\n  }\n\n  // def createServer\n  createServer(name, region = \"london\") {\n    name = this.resolver.resolveString(name);\n\n    return this.apiRequest('post', Endpoints.SERVERS, true, {name, region})\n      .then(res => {\n        // valid server, wait until it is cached\n        return waitFor(() => this.servers.get(\"id\", res.id));\n      });\n  }\n\n  //def joinServer\n  joinServer(invite) {\n    invite = this.resolver.resolveInviteID(invite);\n    if (!invite) {\n      return Promise.reject(new Error(\"Not a valid invite\"));\n    }\n\n    return this.apiRequest(\"post\", Endpoints.INVITE(invite), true)\n      .then(res => {\n        // valid server, wait until it is received via ws and cached\n        return waitFor(() => this.servers.get(\"id\", res.guild.id));\n      });\n  }\n\n  //def updateServer\n  updateServer(server, options) {\n    server = this.resolver.resolveServer(server);\n    if (!server) {\n      return Promise.reject(new Error(\"server did not resolve\"));\n    }\n\n    let newOptions = {\n      name: options.name || server.name,\n      region: options.region || server.region\n    };\n\n    if (options.icon) {\n      newOptions.icon = this.resolver.resolveToBase64(options.icon);\n    }\n    if (options.splash) {\n      newOptions.splash = this.resolver.resolveToBase64(options.splash);\n    }\n    if (options.owner) {\n      let user = this.resolver.resolveUser(options.owner);\n      if (!user) {\n        return Promise.reject(new Error(\"owner could not be resolved\"));\n      }\n      options.owner_id = user.id;\n    }\n    if (options.verificationLevel) {\n      options.verification_level = user.verificationLevel;\n    }\n    if (options.afkChannel) {\n      let channel = this.resolver.resolveUser(options.afkChannel);\n      if (!channel) {\n        return Promise.reject(new Error(\"afkChannel could not be resolved\"));\n      }\n      options.afk_channel_id = channel.id;\n    }\n    if (options.afkTimeout) {\n      options.afk_timeout = options.afkTimeout;\n    }\n\n    return this.apiRequest(\"patch\", Endpoints.SERVER(server.id), true, options)\n      .then(res => {\n        // wait until the name and region are updated\n        return waitFor(() =>\n          (this.servers.get(\"name\", res.name) ? ((this.servers.get(\"name\", res.name).region === res.region) ? this.servers.get(\"id\", res.id) : false) : false));\n      });\n  }\n\n  //def leaveServer\n  leaveServer(srv) {\n    let server = this.resolver.resolveServer(srv);\n    if (!server) {\n      return Promise.reject(new Error(\"server did not resolve\"));\n    }\n\n    return this.apiRequest(\"del\", Endpoints.ME_SERVER(server.id), true);\n  }\n\n  //def deleteServer\n  deleteServer(srv) {\n    let server = this.resolver.resolveServer(srv);\n    if (!server) {\n      return Promise.reject(new Error(\"server did not resolve\"));\n    }\n\n    return this.apiRequest(\"del\", Endpoints.SERVER(server.id), true);\n  }\n\n  // def loginWithToken\n  // email and password are optional\n  loginWithToken(token, email, password) {\n    if (!this.setupCalled) {\n      this.setup();\n    }\n\n    this.state = ConnectionState.LOGGED_IN;\n    this.token = token;\n    this.email = email;\n    this.password = password;\n\n    let self = this;\n    return this.getGateway()\n      .then(url => {\n        self.token = self.client.options.bot && !self.token.startsWith(\"Bot \") ? `Bot ${self.token}` : self.token;\n        self.createWS(url);\n        return self.token;\n      });\n  }\n\n  // def login\n  login(email, password) {\n    let client = this.client;\n\n    if (!this.tokenCacher.done) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.login(email, password).then(resolve).catch(reject);\n        }, 20);\n      });\n    } else {\n      let tk = this.tokenCacher.getToken(email, password);\n      if (tk) {\n        this.client.emit(\"debug\", \"bypassed direct API login, used cached token\");\n        return this.loginWithToken(tk, email, password);\n      }\n    }\n\n    if (this.state !== ConnectionState.DISCONNECTED && this.state !== ConnectionState.IDLE) {\n      return Promise.reject(new Error(\"already logging in/logged in/ready!\"));\n    }\n\n    this.state = ConnectionState.LOGGING_IN;\n\n    return this.apiRequest(\"post\", Endpoints.LOGIN, false, {\n      email,\n      password\n    })\n      .then(res => {\n        this.client.emit(\"debug\", \"direct API login, cached token was unavailable\");\n        let token = res.token;\n        this.tokenCacher.setToken(email, password, token);\n        return this.loginWithToken(token, email, password);\n      }, error => {\n        this.websocket = null;\n        throw error;\n      })\n      .catch(error => {\n        this.websocket = null;\n        this.state = ConnectionState.DISCONNECTED;\n        client.emit(\"disconnected\");\n        throw error;\n      });\n  }\n\n  // def logout\n  logout() {\n    if (this.state === ConnectionState.DISCONNECTED || this.state === ConnectionState.IDLE) {\n      return Promise.reject(new Error(\"Client is not logged in!\"));\n    }\n\n    let disconnect = () => {\n      if (this.websocket) {\n        this.websocket.close(1000);\n        this.websocket = null;\n      }\n      this.token = null;\n      this.email = null;\n      this.password = null;\n      this.state = ConnectionState.DISCONNECTED;\n      return Promise.resolve();\n    };\n\n    if (!this.user.bot) {\n      return this.apiRequest(\"post\", Endpoints.LOGOUT, true)\n        .then(disconnect);\n    } else {\n      return disconnect();\n    }\n  }\n\n  // def startPM\n  startPM(resUser) {\n    let user = this.resolver.resolveUser(resUser);\n    if (!user) {\n      return Promise.reject(new Error(\"Unable to resolve resUser to a User\"));\n    }\n    // start the PM\n    return this.apiRequest(\"post\", Endpoints.ME_CHANNELS, true, {\n      recipient_id: user.id\n    })\n      .then(res => {\n        return this.private_channels.add(new PMChannel(res, this.client));\n      });\n  }\n\n  // def getGateway\n  getGateway() {\n    if (this.gatewayURL) {\n      return Promise.resolve(this.gatewayURL);\n    }\n    return this.apiRequest(\"get\", Endpoints.GATEWAY, true)\n      .then(res => this.gatewayURL = res.url);\n  }\n\n  // def sendMessage\n  sendMessage(where, _content, options = {}) {\n    if (options.file) {\n      if (typeof options.file !== \"object\") {\n        options.file = {\n          file: options.file\n        };\n      }\n      if (!options.file.name) {\n        if (options.file.file instanceof String || typeof options.file.file === \"string\") {\n          options.file.name = require(\"path\").basename(options.file.file);\n        } else if (options.file.file.path) {\n          // fs.createReadStream()'s have .path that give the path. Not sure about other streams though.\n          options.file.name = require(\"path\").basename(options.file.file.path);\n        } else {\n          options.file.name = \"default.png\"; // Just have to go with default filenames.\n        }\n      }\n    }\n\n    return this.resolver.resolveChannel(where)\n      .then(destination => {\n        let content = this.resolver.resolveString(_content);\n\n        if (this.client.options.disableEveryone || options.disableEveryone) {\n          content = content.replace(/(@)(everyone|here)/g, '$1\\u200b$2');\n        }\n\n        if (options.file) {\n          return this.resolver.resolveFile(options.file.file)\n            .then(file =>\n              this.apiRequest(\"post\", Endpoints.CHANNEL_MESSAGES(destination.id), true, {\n                content: content,\n                tts: options.tts,\n                nonce: options.nonce\n              }, {\n                name: options.file.name,\n                file: file\n              }).then(res => destination.messages.add(new Message(res, destination, this.client)))\n            )\n        } else {\n          return this.apiRequest(\"post\", Endpoints.CHANNEL_MESSAGES(destination.id), true, {\n            content: content,\n            tts: options.tts,\n            nonce: options.nonce\n          })\n            .then(res => destination.messages.add(new Message(res, destination, this.client)));\n        }\n      });\n\n  }\n\n  // def sendFile\n  sendFile(where, _file, name, content) {\n    if (!name) {\n      if (_file instanceof String || typeof _file === \"string\") {\n        name = require(\"path\").basename(_file);\n      } else if (_file && _file.path) {\n        // fs.createReadStream()'s have .path that give the path. Not sure about other streams though.\n        name = require(\"path\").basename(_file.path);\n      } else {\n        name = \"default.png\"; // Just have to go with default filenames.\n      }\n    }\n\n    if (content) {\n      content = {\n        content: this.resolver.resolveString(content)\n      };\n      if (this.client.options.disableEveryone) {\n        content.content = content.content.replace(/(@)(everyone|here)/g, '$1\\u200b$2');\n      }\n    }\n\n    return this.resolver.resolveChannel(where)\n      .then(channel =>\n        this.resolver.resolveFile(_file)\n          .then(file =>\n            this.apiRequest(\"post\", Endpoints.CHANNEL_MESSAGES(channel.id), true, content, {\n              name,\n              file\n            }).then(res => channel.messages.add(new Message(res, channel, this.client)))\n          )\n      );\n  }\n\n  // def deleteMessage\n  deleteMessage(_message, options = {}) {\n\n    let message = this.resolver.resolveMessage(_message);\n    if (!message) {\n      return Promise.reject(new Error(\"Supplied message did not resolve to a message!\"));\n    }\n\n    let chain = options.wait ? delay(options.wait) : Promise.resolve();\n    return chain.then(() =>\n      this.apiRequest(\"del\", Endpoints.CHANNEL_MESSAGE(message.channel.id, message.id), true)\n    )\n      .then(() => message.channel.messages.remove(message));\n  }\n\n  // def deleteMessages\n  deleteMessages(_messages) {\n    if (!_messages instanceof Array)\n      return Promise.reject(new Error(\"Messages provided must be in an array\"));\n    if (_messages.length < 1)\n      return Promise.reject(new Error(\"You must provide at least one message to delete\"));\n    else if (_messages.length === 1)\n      return this.deleteMessage(_messages[0]);\n\n\n    let messages = [];\n    let channel;\n    let message;\n    for (let _message of _messages) {\n      message = this.resolver.resolveMessage(_message);\n      if (!message)\n        return Promise.reject(new Error(\"Something other than a message could not be resolved in the array...\"));\n      if (!message.server)\n        return Promise.reject(new Error(\"You can only bulk delete messages on guild channels\"));\n\n      // ensure same channel\n      if (!channel) {\n        channel = message.channel;\n      } else {\n        //noinspection JSUnusedAssignment\n        if (message.channel.id !== channel.id)\n          return Promise.reject(new Error(\"You can only bulk delete messages from the same channel at one time...\"));\n      }\n\n      messages.push(message);\n    }\n\n    return this.apiRequest(\"post\", `${Endpoints.CHANNEL_MESSAGES(channel.id)}/bulk_delete`, true, {\n      messages: messages.map(m => m.id)\n    })\n      .then(() => messages.forEach(m => channel.messages.remove(m)));\n  }\n\n  // def updateMessage\n  updateMessage(msg, _content, options = {}) {\n\n    let message = this.resolver.resolveMessage(msg);\n\n    if (!message) {\n      return Promise.reject(new Error(\"Supplied message did not resolve to a message!\"));\n    }\n\n    let content = this.resolver.resolveString(_content);\n\n    return this.apiRequest(\n      \"patch\",\n      Endpoints.CHANNEL_MESSAGE(message.channel.id, message.id),\n      true,\n      {\n        content: content,\n        tts: options.tts\n      }\n    )\n      .then(res => message.channel.messages.update(\n        message,\n        new Message(res, message.channel, this.client)\n      ));\n  }\n\n  // def getChannelLogs\n  getChannelLogs(_channel, limit = 50, options = {}) {\n    return this.resolver.resolveChannel(_channel)\n      .then(channel => {\n        let qsObject = {limit};\n        if (options.before) {\n          const res = this.resolver.resolveMessage(options.before);\n          if (res) {\n            qsObject.before = res.id;\n          }\n        }\n        if (options.after) {\n          const res = this.resolver.resolveMessage(options.after);\n          if (res) {\n            qsObject.after = res.id;\n          }\n        }\n        if (options.around) {\n          const res = this.resolver.resolveMessage(options.around);\n          if (res) {\n            qsObject.around = res.id\n          }\n        }\n\n        return this.apiRequest(\n          \"get\",\n          `${Endpoints.CHANNEL_MESSAGES(channel.id)}?${qs.stringify(qsObject)}`,\n          true\n        )\n          .then(res => res.map(\n            msg => channel.messages.add(new Message(msg, channel, this.client))\n          ));\n      });\n  }\n\n  // def getMessage\n  getMessage(_channel, messageID) {\n    return this.resolver.resolveChannel(_channel)\n      .then(channel => {\n        if (!this.user.bot) {\n          return Promise.reject(new Error(\"Only OAuth bot accounts can use this function\"));\n        }\n\n        if (!(channel instanceof TextChannel || channel instanceof PMChannel)) {\n          return Promise.reject(new Error(\"Provided channel is not a Text or PMChannel\"));\n        }\n\n        let msg = channel.messages.get(\"id\", messageID);\n        if (msg) {\n          return Promise.resolve(msg);\n        }\n\n        return this.apiRequest(\n          \"get\",\n          `${Endpoints.CHANNEL_MESSAGES(channel.id)}/${messageID}`,\n          true\n        )\n          .then(res => channel.messages.add(\n            new Message(res, channel, this.client)\n          ));\n      });\n  }\n\n  // def pinMessage\n  pinMessage(msg) {\n    let message = this.resolver.resolveMessage(msg);\n\n    if (!message) {\n      return Promise.reject(new Error(\"Supplied message did not resolve to a message\"));\n    }\n\n    return this.apiRequest(\n      \"put\",\n      `${Endpoints.CHANNEL_PIN(msg.channel.id, msg.id)}`,\n      true\n    );\n  }\n\n  // def unpinMessage\n  unpinMessage(msg) {\n    let message = this.resolver.resolveMessage(msg);\n\n    if (!message) {\n      return Promise.reject(new Error(\"Supplied message did not resolve to a message\"));\n    }\n\n    if (!message.pinned) {\n      return Promise.reject(new Error(\"Supplied message is not pinned\"));\n    }\n\n    return this.apiRequest(\n      \"del\",\n      `${Endpoints.CHANNEL_PIN(msg.channel.id, msg.id)}`,\n      true\n    );\n  }\n\n  // def getPinnedMessages\n  getPinnedMessages(_channel) {\n    return this.resolver.resolveChannel(_channel)\n      .then(channel => {\n        return this.apiRequest(\n          \"get\",\n          `${Endpoints.CHANNEL_PINS(channel.id)}`,\n          true\n        )\n          .then(res => res.map(\n            msg => channel.messages.add(new Message(msg, channel, this.client))\n          ));\n      });\n  }\n\n  // def getBans\n  getBans(server) {\n    server = this.resolver.resolveServer(server);\n\n    return this.apiRequest(\"get\", Endpoints.SERVER_BANS(server.id), true)\n      .then(res => res.map(\n        ban => this.users.add(new User(ban.user, this.client))\n      ));\n  }\n\n  // def createChannel\n  createChannel(server, name, type = 0) {\n\n    server = this.resolver.resolveServer(server);\n\n    return this.apiRequest(\"post\", Endpoints.SERVER_CHANNELS(server.id), true, {\n      name,\n      type\n    })\n      .then(res => {\n        let channel;\n        if (res.type === 0) {\n          channel = new TextChannel(res, this.client, server);\n        } else {\n          channel = new VoiceChannel(res, this.client, server);\n        }\n        return server.channels.add(this.channels.add(channel));\n      });\n  }\n\n  // def deleteChannel\n  deleteChannel(_channel) {\n\n    return this.resolver.resolveChannel(_channel)\n      .then(channel =>\n        this.apiRequest(\"del\", Endpoints.CHANNEL(channel.id), true)\n          .then(() => {\n            if (channel.server) {\n              channel.server.channels.remove(channel);\n              this.channels.remove(channel);\n            } else {\n              this.private_channels.remove(channel);\n            }\n          })\n      );\n  }\n\n  // def banMember\n  banMember(user, server, length = 1) {\n    let resolvedUser = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n\n    if (resolvedUser === null && typeof user === \"string\") {\n      user = {id: user};\n    } else {\n      user = resolvedUser;\n    }\n\n    return this.apiRequest(\n      \"put\",\n      `${Endpoints.SERVER_BANS(server.id)}/${user.id}?delete-message-days=${length}`,\n      true\n    );\n  }\n\n  // def unbanMember\n  unbanMember(user, server) {\n\n    server = this.resolver.resolveServer(server);\n    let resolvedUser = this.resolver.resolveUser(user);\n\n    if (resolvedUser === null && typeof user === \"string\") {\n      user = {id: user};\n    } else {\n      user = resolvedUser;\n    }\n\n    return this.apiRequest(\"del\", `${Endpoints.SERVER_BANS(server.id)}/${user.id}`, true)\n  }\n\n  // def kickMember\n  kickMember(user, server) {\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n\n    return this.apiRequest(\"del\", `${Endpoints.SERVER_MEMBERS(server.id) }/${user.id}`, true);\n  }\n\n  // def moveMember\n  moveMember(user, channel) {\n    user = this.resolver.resolveUser(user);\n    return this.resolver.resolveChannel(channel).then(channel => {\n      let server = channel.server;\n\n      // Make sure `channel` is a voice channel\n      if (channel.type !== 2) {\n        throw new Error(\"Can't moveMember into a non-voice channel\");\n      } else {\n        return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, {channel_id: channel.id})\n          .then(res => {\n            user.voiceChannel = channel;\n            return res;\n          });\n      }\n    });\n  }\n\n  // def muteMember\n  muteMember(user, server) {\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, {mute: true});\n  }\n\n  // def unmuteMember\n  unmuteMember(user, server) {\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, {mute: false});\n  }\n\n  // def deafenMember\n  deafenMember(user, server) {\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, {deaf: true});\n  }\n\n  // def undeafenMember\n  undeafenMember(user, server) {\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, {deaf: false});\n  }\n\n  // def setNickname\n  setNickname(server, nick, user) {\n    nick = nick || \"\";\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id === this.user.id ? \"@me/nick\" : user.id}`, true, {nick: nick});\n  }\n\n  //def setNote\n  setNote(user, note) {\n    user = this.resolver.resolveUser(user);\n    note = note || \"\";\n\n    if (!user) {\n      return Promise.reject(new Error(\"Failed to resolve user\"));\n    }\n\n    return this.apiRequest(\"put\", `${Endpoints.ME_NOTES}/${user.id}`, true, {note: note});\n  }\n\n  // def createRole\n  createRole(server, data) {\n    server = this.resolver.resolveServer(server);\n\n    return this.apiRequest(\"post\", Endpoints.SERVER_ROLES(server.id), true)\n      .then(res => {\n        let role = server.roles.add(new Role(res, server, this.client));\n\n        if (data) {\n          return this.updateRole(role, data);\n        }\n        return role;\n      });\n  }\n\n  // def updateRole\n  updateRole(role, data) {\n\n    role = this.resolver.resolveRole(role);\n    let server = this.resolver.resolveServer(role.server);\n\n    let newData = {\n      color: \"color\" in data ? data.color : role.color,\n      hoist: \"hoist\" in data ? data.hoist : role.hoist,\n      name: \"name\" in data ? data.name : role.name,\n      position: \"position\" in data ? data.position : role.position,\n      permissions: \"permissions\" in data ? data.permissions : role.permissions,\n      mentionable: \"mentionable\" in data ? data.mentionable : role.mentionable\n    };\n\n    if (data.permissions) {\n      newData.permissions = 0;\n      for (let perm of data.permissions) {\n        if (perm instanceof String || typeof perm === \"string\") {\n          newData.permissions |= (Permissions[perm] || 0);\n        } else {\n          newData.permissions |= perm;\n        }\n      }\n    }\n\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_ROLES(server.id)}/${role.id}`, true, newData)\n      .then(res => {\n        return server.roles.update(role, new Role(res, server, this.client));\n      });\n  }\n\n  // def deleteRole\n  deleteRole(role) {\n    if (role.server.id === role.id) {\n      return Promise.reject(new Error(\"Stop trying to delete the @everyone role. It is futile\"));\n    } else {\n      return this.apiRequest(\"del\", `${Endpoints.SERVER_ROLES(role.server.id)}/${role.id}`, true);\n    }\n  }\n\n  //def addMemberToRole\n  addMemberToRole(member, roles) {\n    member = this.resolver.resolveUser(member);\n\n    if (!member) {\n      return Promise.reject(new Error(\"user not found\"));\n    }\n\n    if (!Array.isArray(roles) || roles.length === 0) {\n      roles = this.resolver.resolveRole(roles);\n      if (roles) {\n        roles = [roles];\n      } else {\n        return Promise.reject(new Error(\"invalid array of roles\"));\n      }\n    } else {\n      roles = roles.map(r => this.resolver.resolveRole(r));\n    }\n\n    if (roles.some(role => !role.server.memberMap[member.id])) {\n      return Promise.reject(new Error(\"Role does not exist on same server as member\"));\n    }\n\n    let roleIDs = roles[0].server.memberMap[member.id].roles.map(r => (r && r.id) || r);\n\n    for (let i = 0; i < roles.length; i++) {\n      if (!~roleIDs.indexOf(roles[i].id)) {\n        roleIDs.push(roles[i].id);\n      }\n    }\n\n    return this.apiRequest(\n      \"patch\",\n      `${Endpoints.SERVER_MEMBERS(roles[0].server.id)}/${member.id}`,\n      true,\n      {\n        roles: roleIDs\n      }\n    );\n  }\n\n  memberHasRole(member, role) {\n    role = this.resolver.resolveRole(role);\n    member = this.resolver.resolveUser(member);\n\n    if (!role) {\n      throw new Error(\"invalid role\");\n    }\n    if (!member) {\n      throw new Error(\"user not found\");\n    }\n\n    let roledata = role.server.rolesOf(member);\n    if (roledata) {\n      for (let r of roledata) {\n        if (r.id == role.id) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  //def removeMemberFromRole\n  removeMemberFromRole(member, roles) {\n    member = this.resolver.resolveUser(member);\n\n    if (!member) {\n      return Promise.reject(new Error(\"user not found\"));\n    }\n\n    if (!Array.isArray(roles) || roles.length === 0) {\n      roles = this.resolver.resolveRole(roles);\n      if (roles) {\n        roles = [roles];\n      } else {\n        return Promise.reject(new Error(\"invalid array of roles\"));\n      }\n    } else {\n      roles = roles.map(r => this.resolver.resolveRole(r));\n    }\n\n    let roleIDs = roles[0].server.memberMap[member.id].roles.map(r => (r && r.id) || r);\n\n    for (let role of roles) {\n      if (!role.server.memberMap[member.id]) {\n        return Promise.reject(new Error(\"member not in server\"));\n      }\n      for (let item in roleIDs) {\n        if (roleIDs.hasOwnProperty(item)) {\n          if (roleIDs[item] === role.id) {\n            roleIDs.splice(item, 1);\n            break;\n          }\n        }\n      }\n    }\n\n    return this.apiRequest(\n      \"patch\",\n      `${Endpoints.SERVER_MEMBERS(roles[0].server.id)}/${member.id}`,\n      true,\n      {\n        roles: roleIDs\n      }\n    );\n  }\n\n  // def createInvite\n  createInvite(chanServ, options) {\n    return this.resolver.resolveChannel(chanServ)\n      .then(channel => {\n        if (!options) {\n          options = {\n            validate: null\n          };\n        } else {\n          options.max_age = options.maxAge || 0;\n          options.max_uses = options.maxUses || 0;\n          options.temporary = options.temporary || false;\n          options.xkcdpass = options.xkcd || false;\n        }\n\n        return this.apiRequest(\"post\", Endpoints.CHANNEL_INVITES(channel.id), true, options)\n          .then(res => new Invite(res, this.channels.get(\"id\", res.channel.id), this.client));\n      });\n  }\n\n  //def deleteInvite\n  deleteInvite(invite) {\n    invite = this.resolver.resolveInviteID(invite);\n    if (!invite) {\n      throw new Error(\"Not a valid invite\");\n    }\n    return this.apiRequest(\"del\", Endpoints.INVITE(invite), true);\n  }\n\n  //def getInvite\n  getInvite(invite) {\n    invite = this.resolver.resolveInviteID(invite);\n    if (!invite) {\n      return Promise.reject(new Error(\"Not a valid invite\"));\n    }\n\n    return this.apiRequest(\"get\", Endpoints.INVITE(invite), true)\n      .then(res => {\n        if (!this.channels.has(\"id\", res.channel.id)) {\n          return new Invite(res, null, this.client);\n        }\n        return this.apiRequest(\"post\", Endpoints.CHANNEL_INVITES(res.channel.id), true, {validate: invite})\n          .then(res2 => new Invite(res2, this.channels.get(\"id\", res.channel.id), this.client));\n      });\n  }\n\n  //def getInvites\n  getInvites(channel) {\n    if (!(channel instanceof Channel)) {\n      let server = this.resolver.resolveServer(channel);\n      if (server) {\n        return this.apiRequest(\"get\", Endpoints.SERVER_INVITES(server.id), true)\n          .then(res => {\n            return res.map(data => new Invite(data, this.channels.get(\"id\", data.channel.id), this.client));\n          });\n      }\n    }\n    return this.resolver.resolveChannel(channel)\n      .then(channel => {\n        return this.apiRequest(\"get\", Endpoints.CHANNEL_INVITES(channel.id), true)\n          .then(res => {\n            return res.map(data => new Invite(data, this.channels.get(\"id\", data.channel.id), this.client));\n          });\n      });\n  }\n\n  //def overwritePermissions\n  overwritePermissions(channel, role, updated) {\n    return this.resolver.resolveChannel(channel)\n      .then(channel => {\n        if (!channel instanceof ServerChannel) {\n          return Promise.reject(new Error(\"Not a server channel\"));\n        }\n\n        let data = {\n          allow: 0,\n          deny: 0\n        };\n\n        if (role instanceof String || typeof role === \"string\") {\n          role = this.resolver.resolveUser(role) || this.resolver.resolveRole(role);\n        }\n\n        if (role instanceof User) {\n          data.id = role.id;\n          data.type = \"member\";\n        } else if (role instanceof Role) {\n          data.id = role.id;\n          data.type = \"role\";\n        } else {\n          return Promise.reject(new Error(\"Role could not be resolved\"));\n        }\n\n        let previousOverwrite = channel.permissionOverwrites.get(\"id\", data.id);\n\n        if (previousOverwrite) {\n          data.allow |= previousOverwrite.allow;\n          data.deny |= previousOverwrite.deny;\n        }\n\n        for (let perm in updated) {\n          if (updated.hasOwnProperty(perm)) {\n            if (updated[perm] === true) {\n              data.allow |= (Permissions[perm] || 0);\n              data.deny &= ~(Permissions[perm] || 0);\n            } else if (updated[perm] === false) {\n              data.allow &= ~(Permissions[perm] || 0);\n              data.deny |= (Permissions[perm] || 0);\n            } else {\n              data.allow &= ~(Permissions[perm] || 0);\n              data.deny &= ~(Permissions[perm] || 0);\n            }\n          }\n        }\n\n        return this.apiRequest(\n          \"put\",\n          `${Endpoints.CHANNEL_PERMISSIONS(channel.id)}/${data.id}`,\n          true,\n          data\n        );\n      });\n  }\n\n  //def setStatus\n  setStatus(idleStatus, game) {\n\n    if (idleStatus === \"online\" || idleStatus === \"here\" || idleStatus === \"available\") {\n      this.idleStatus = null;\n    }\n    else if (idleStatus === \"idle\" || idleStatus === \"away\") {\n      this.idleStatus = Date.now();\n    }\n    else {\n      this.idleStatus = this.idleStatus || null; //undefined\n    }\n\n    // convert undefined and empty string to null\n    if (typeof game === \"string\" && !game.length) game = null;\n\n    this.game = game === null ? null : !game ? this.game || null : typeof game === \"string\" ? {name: game} : game;\n\n    let packet = {\n      op: 3,\n      d: {\n        idle_since: this.idleStatus,\n        game: this.game\n      }\n    };\n\n    this.sendWS(packet);\n\n    this.user.status = this.idleStatus ? \"idle\" : \"online\";\n    this.user.game = this.game;\n\n    return Promise.resolve();\n\n  }\n\n  //def sendTyping\n  sendTyping(channel) {\n    return this.resolver.resolveChannel(channel).then(channel =>\n      this.apiRequest(\"post\", Endpoints.CHANNEL(channel.id) + \"/typing\", true)\n    );\n  }\n\n  //def startTyping\n  startTyping(channel) {\n    return this.resolver.resolveChannel(channel)\n      .then(channel => {\n\n        if (this.intervals.typing[channel.id]) {\n          // typing interval already exists, leave it alone\n          throw new Error(\"Already typing in that channel\");\n        }\n\n        this.intervals.typing[channel.id] = setInterval(\n          () => this.sendTyping(channel)\n            .catch(error => this.client.emit(\"error\", error)),\n          4000\n        );\n\n        return this.sendTyping(channel);\n      });\n\n  }\n\n  //def stopTyping\n  stopTyping(channel) {\n    return this.resolver.resolveChannel(channel)\n      .then(channel => {\n\n        if (!this.intervals.typing[channel.id]) {\n          // typing interval doesn\"t exist\n          throw new Error(\"Not typing in that channel\");\n        }\n\n        clearInterval(this.intervals.typing[channel.id]);\n        this.intervals.typing[channel.id] = false;\n\n      });\n  }\n\n  //def updateDetails\n  updateDetails(data) {\n    if (!this.user.bot && !(this.email || data.email)) {\n      throw new Error(\"Must provide email since a token was used to login\");\n    }\n\n    let options = {};\n\n    if (data.username) {\n      options.username = data.username;\n    } else {\n      options.username = this.user.username;\n    }\n\n    if (data.avatar) {\n      options.avatar = this.resolver.resolveToBase64(data.avatar);\n    }\n\n    if (this.email || data.email) {\n      options.email = data.email || this.email;\n      options.new_password = data.newPassword || null;\n      options.password = data.password || this.password;\n    }\n\n    return this.apiRequest(\"patch\", Endpoints.ME, true, options);\n  }\n\n  //def setAvatar\n  setAvatar(avatar) {\n    return this.updateDetails({avatar});\n  }\n\n  //def setUsername\n  setUsername(username) {\n    return this.updateDetails({username});\n  }\n\n  //def setChannelTopic\n  setChannelTopic(channel, topic = \"\") {\n    topic = topic || \"\";\n\n    return this.updateChannel(channel, {topic: topic});\n  }\n\n  //def setChannelName\n  setChannelName(channel, name) {\n    name = name || \"unnamed-channel\";\n\n    return this.updateChannel(channel, {name: name});\n  }\n\n  //def setChannelPosition\n  setChannelPosition(channel, position) {\n    position = position || 0;\n\n    return this.updateChannel(channel, {position: position});\n  }\n\n  //def setChannelUserLimit\n  setChannelUserLimit(channel, limit) {\n    limit = limit || 0; // default 0 = no limit\n\n    return this.updateChannel(channel, {userLimit: limit})\n  }\n\n  //def setChannelBitrate\n  setChannelBitrate(channel, kbitrate) {\n    kbitrate = kbitrate || 64; // default 64kbps\n\n    return this.updateChannel(channel, {bitrate: kbitrate});\n  }\n\n  //def updateChannel\n  updateChannel(channel, data) {\n    return this.resolver.resolveChannel(channel).then(channel => {\n      if (!channel) {\n        return Promise.reject(new Error(\"Failed to resolve channel\"));\n      }\n\n      data = {\n        name: data.name || channel.name,\n        topic: data.topic || channel.topic,\n        position: (data.position ? data.position : channel.position),\n        user_limit: (data.userLimit ? data.userLimit : channel.userLimit),\n        bitrate: (data.bitrate ? data.bitrate : channel.bitrate ? channel.bitrate : undefined)\n      };\n\n      if (data.position < 0) {\n        return Promise.reject(new Error(\"Position cannot be less than 0\"));\n      }\n\n      if (data.user_limit < 0 || data.user_limit > 99) {\n        return Promise.reject(new Error(\"User limit must be between 0-99\"));\n      }\n\n      if (data.kbitrate < 8 || data.kbitrate > 96) {\n        return Promise.reject(new Error(\"Bitrate must be between 8-96kbps\"));\n      }\n\n      if (data.bitrate) {\n        data.bitrate *= 1000; // convert to bits before sending\n      }\n\n      return this.apiRequest(\"patch\", Endpoints.CHANNEL(channel.id), true, data)\n        .then(res => {\n          channel.name = data.name;\n          channel.topic = data.topic;\n          channel.position = data.position;\n          channel.userLimit = data.user_limit;\n          channel.bitrate = Math.ceil(data.bitrate / 1000);\n          channel._bitrate = data.bitrate;\n        });\n    });\n  }\n\n  //def addFriend\n  addFriend(user) {\n    if (this.user.bot) return Promise.reject(new Error(\"user is a bot, bot's do not have friends support\"));\n\n    let id;\n    if (user instanceof String || typeof user === \"string\")\n      id = user;\n    else if (user instanceof User) {\n      user = this.resolver.resolveUser(user);\n      id = user.id\n    } else {\n      if (user.username && user.discriminator) // add by username and discriminator (pass in an object)\n        return this.apiRequest(\"put\", Endpoints.FRIENDS, true, user);\n      else\n        return Promise.reject(\"invalid user\")\n    }\n\n    return this.apiRequest(\"put\", `${Endpoints.FRIENDS}/${id}`, true, {});\n  }\n\n  //def removeFriend\n  removeFriend(user) {\n    if (this.user.bot) return Promise.reject(new Error(\"user is a bot, bot's do not have friends support\"));\n\n    user = this.resolver.resolveUser(user);\n\n    return this.apiRequest(\"delete\", `${Endpoints.FRIENDS}/${user.id}`, true);\n  }\n\n  getServerWebhooks(server) {\n    server = this.resolver.resolveServer(server);\n\n    if (!server) {\n      return Promise.reject(new Error(\"Failed to resolve server\"));\n    }\n\n    return this.apiRequest(\"get\", Endpoints.SERVER_WEBHOOKS(server.id), true)\n      .then(res => res.map(\n        webhook => {\n          let channel = this.channels.get(\"id\", webhook.channel_id);\n          return channel.webhooks.add(new Webhook(\n            webhook,\n            server,\n            channel,\n            this.users.get(\"id\", webhook.user.id)\n          ))\n        }\n      ));\n  }\n\n  getChannelWebhooks(channel) {\n    return this.resolver.resolveChannel(channel).then(channel => {\n      if (!channel) {\n        return Promise.reject(new Error(\"Failed to resolve channel\"));\n      }\n\n      return this.apiRequest(\"get\", Endpoints.CHANNEL_WEBHOOKS(channel.id), true)\n        .then(res => res.map(\n          webhook => channel.webhooks.add(new Webhook(\n            webhook,\n            this.servers.get(\"id\", webhook.guild_id),\n            channel,\n            this.users.get(\"id\", webhook.user.id)\n          ))\n        ));\n    })\n  }\n\n  editWebhook(webhook, options = {}) {\n    return this.resolver.resolveWebhook(webhook).then(webhook => {\n      if (!webhook) {\n        return Promise.reject(new Error(\" Failed to resolve webhook\"))\n      }\n\n      if (options.hasOwnProperty(\"avatar\")) {\n        options.avatar = this.resolver.resolveToBase64(options.avatar);\n      }\n\n      return this.apiRequest(\"patch\", Endpoints.WEBHOOK(webhook.id), true, options)\n        .then(res => {\n          webhook.name = res.name;\n          webhook.avatar = res.hasOwnProperty('avatar') ? res.avatar : webhook.avatar;\n        });\n    })\n  }\n\n  createWebhook(channel, options = {}) {\n    return this.resolver.resolveChannel(channel)\n      .then(destination => {\n        if (!channel) {\n          return Promise.reject(new Error(\" Failed to resolve channel\"))\n        }\n\n        if (options.hasOwnProperty(\"avatar\")) {\n          options.avatar = this.resolver.resolveToBase64(options.avatar);\n        }\n\n        return this.apiRequest(\"post\", Endpoints.CHANNEL_WEBHOOKS(destination.id), true, options)\n          .then(webhook => channel.webhooks.add(new Webhook(\n            webhook,\n            this.servers.get(\"id\", webhook.guild_id),\n            channel,\n            this.users.get(\"id\", webhook.user.id)\n          )));\n      });\n  }\n\n  deleteWebhook(webhook) {\n    return this.resolver.resolveWebhook(webhook).then(webhook => {\n      if (!webhook) {\n        return Promise.reject(new Error(\" Failed to resolve webhook\"))\n      }\n\n      return this.apiRequest(\"delete\", Endpoints.WEBHOOK(webhook.id), true)\n        .then(() => {\n          webhook.channel.webhooks.remove(webhook);\n        });\n    })\n  }\n\n  sendWebhookMessage(webhook, _content, options = {}) {\n    return this.resolver.resolveWebhook(webhook)\n      .then(destination => {\n        let content = this.resolver.resolveString(_content);\n\n        if (this.client.options.disableEveryone || options.disableEveryone) {\n          content = content.replace(/(@)(everyone|here)/g, '$1\\u200b$2');\n        }\n\n        if (!options.hasOwnProperty(\"username\")) {\n          options.username = this.user.username;\n        }\n\n        let slack;\n        if (options.hasOwnProperty(\"slack\")) {\n          slack = options.slack;\n          delete options[\"slack\"];\n        }\n\n        options.content = content;\n\n        return this.apiRequest(\n          \"post\",\n          `${Endpoints.WEBHOOK_MESSAGE(destination.id, destination.token)}${slack ? \"/slack\" : \"\"}?wait=true`,\n          true,\n          options\n        )\n      });\n\n  }\n\n  //def getOAuthApplication\n  getOAuthApplication(appID) {\n    appID = appID || \"@me\";\n    return this.apiRequest(\"get\", Endpoints.OAUTH2_APPLICATION(appID), true);\n  }\n\n  //def ack\n  ack(msg) {\n    msg = this.resolver.resolveMessage(msg);\n\n    if (!msg) {\n      return Promise.reject(new Error(\"Message does not exist\"));\n    }\n\n    return this.apiRequest(\"post\", Endpoints.CHANNEL_MESSAGE(msg.channel.id, msg.id) + \"/ack\", true);\n  }\n\n  sendWS(object) {\n    if (this.websocket) {\n      //noinspection NodeModulesDependencies,NodeModulesDependencies\n      this.websocket.send(JSON.stringify(object));\n    }\n  }\n\n  createWS(url) {\n    if (this.websocket) {\n      return false;\n    }\n    if (!url.endsWith(\"/\")) {\n      url += \"/\";\n    }\n    url += \"?encoding=json&v=\" + GATEWAY_VERSION;\n\n    this.websocket = new WebSocket(url);\n\n    this.websocket.onopen = () => {\n    };\n\n    this.websocket.onclose = (event) => {\n      this.websocket = null;\n      this.state = ConnectionState.DISCONNECTED;\n      if (event && event.code) {\n        this.client.emit(\"warn\", \"WS close: \" + event.code);\n        let err;\n        if (event.code === 4001) {\n          err = new Error(\"Gateway received invalid OP code\");\n        } else if (event.code === 4005) {\n          err = new Error(\"Gateway received invalid message\");\n        } else if (event.code === 4003) {\n          err = new Error(\"Not authenticated\");\n        } else if (event.code === 4004) {\n          err = new Error(\"Authentication failed\");\n        } else if (event.code === 4005) {\n          err = new Error(\"Already authenticated\");\n        }\n        if (event.code === 4006 || event.code === 4009) {\n          err = new Error(\"Invalid session\");\n        } else if (event.code === 4007) {\n          this.sequence = 0;\n          err = new Error(\"Invalid sequence number\");\n        } else if (event.code === 4008) {\n          err = new Error(\"Gateway connection was ratelimited\");\n        } else if (event.code === 4010) {\n          err = new Error(\"Invalid shard key\");\n        }\n        if (err) {\n          this.client.emit(\"error\", err);\n        }\n      }\n      this.disconnected(this.client.options.autoReconnect);\n    };\n\n    this.websocket.onerror = e => {\n      this.client.emit(\"error\", e);\n      this.websocket = null;\n      this.state = ConnectionState.DISCONNECTED;\n      this.disconnected(this.client.options.autoReconnect);\n    };\n\n    this.websocket.onmessage = e => {\n      if (e.data instanceof Buffer) {\n        if (!zlib) zlib = require(\"zlib\");\n        e.data = zlib.inflateSync(e.data).toString();\n      }\n\n      let packet;\n      try {\n        packet = JSON.parse(e.data);\n      } catch (e) {\n        this.client.emit(\"error\", e);\n        return;\n      }\n\n      this.client.emit(\"raw\", packet);\n\n      if (packet.s) {\n        this.sequence = packet.s;\n      }\n\n      switch (packet.op) {\n        case 0:\n          this.processPacket(packet);\n          break;\n        case 1:\n          this.heartbeatAcked = true;\n          this.heartbeat();\n          break;\n        case 7:\n          this.disconnected(true);\n          break;\n        case 9:\n          this.sessionID = null;\n          this.sequence = 0;\n          this.identify();\n          break;\n        case 10:\n          if (this.sessionID) {\n            this.resume();\n          } else {\n            this.identify();\n          }\n          this.heartbeatAcked = true; // start off without assuming we didn't get a missed heartbeat acknowledge right away;\n          this.heartbeat();\n          this.heartbeatAcked = true;\n          this.intervals.kai = setInterval(() => this.heartbeat(), packet.d.heartbeat_interval);\n          break;\n        case 11:\n          this.heartbeatAcked = true;\n          break;\n        default:\n          this.client.emit(\"unknown\", packet);\n          break;\n      }\n    };\n  }\n\n  processPacket(packet) {\n    let client = this.client;\n    let data = packet.d;\n    switch (packet.t) {\n      case PacketType.RESUMED:\n      case PacketType.READY: {\n        this.autoReconnectInterval = 1000;\n        this.state = ConnectionState.READY;\n\n        if (packet.t === PacketType.RESUMED) {\n          break;\n        }\n\n        this.sessionID = data.session_id;\n        let startTime = Date.now();\n\n        this.user = this.users.add(new User(data.user, client));\n\n        this.forceFetchCount = {};\n        this.forceFetchQueue = [];\n        this.forceFetchLength = 1;\n\n        data.guilds.forEach(server => {\n          if (!server.unavailable) {\n            server = this.servers.add(new Server(server, client));\n            if (client.options.bot === false) {\n              this.unsyncedGuilds++;\n              this.syncGuild(server.id);\n            }\n            if (this.client.options.forceFetchUsers && server.members && server.members.length < server.memberCount) {\n              this.getGuildMembers(server.id, Math.ceil(server.memberCount / 1000));\n            }\n          } else {\n            client.emit(\"debug\", \"server \" + server.id + \" was unavailable, could not create (ready)\");\n            this.unavailableServers.add(server);\n          }\n        });\n        data.private_channels.forEach(pm => {\n          this.private_channels.add(new PMChannel(pm, client));\n        });\n        if (!data.user.bot) { // bots dont have friends\n          data.relationships.forEach(friend => {\n            if (friend.type === 1) { // is a friend\n              this.friends.add(new User(friend.user, client));\n            } else if (friend.type === 2) { // incoming friend requests\n              this.blocked_users.add(new User(friend.user, client));\n            } else if (friend.type === 3) { // incoming friend requests\n              this.incoming_friend_requests.add(new User(friend.user, client));\n            } else if (friend.type === 4) { // outgoing friend requests\n              this.outgoing_friend_requests.add(new User(friend.user, client));\n            } else {\n              client.emit(\"warn\", \"unknown friend type \" + friend.type);\n            }\n          });\n        } else {\n          this.friends = null;\n          this.blocked_users = null;\n          this.incoming_friend_requests = null;\n          this.outgoing_friend_requests = null;\n        }\n\n        // add notes to users\n        if (data.notes) {\n          for (let note in data.notes) {\n            if (data.notes.hasOwnProperty(note)) {\n              let user = this.users.get(\"id\", note);\n              if (user) {\n                let newUser = user;\n                newUser.note = data.notes[note];\n\n                this.users.update(user, newUser);\n              } else {\n                client.emit(\"warn\", \"note in ready packet but user not cached\");\n              }\n            }\n          }\n        }\n\n        client.emit(\"debug\", `ready packet took ${Date.now() - startTime}ms to process`);\n        client.emit(\"debug\", `ready with ${this.servers.length} servers, ${this.unavailableServers.length} unavailable servers, ${this.channels.length} channels and ${this.users.length} users cached.`);\n\n        this.restartServerCreateTimeout();\n\n        break;\n      }\n      case PacketType.MESSAGE_CREATE: {\n        // format: https://discordapi.readthedocs.org/en/latest/reference/channels/messages.html#message-format\n        let channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n        if (channel) {\n          let msg = channel.messages.add(new Message(data, channel, client));\n          channel.lastMessageID = msg.id;\n          if (this.messageAwaits[channel.id + msg.author.id]) {\n            this.messageAwaits[channel.id + msg.author.id].map(fn => fn(msg));\n            this.messageAwaits[channel.id + msg.author.id] = null;\n            client.emit(\"message\", msg, true); //2nd param is isAwaitedMessage\n          } else {\n            client.emit(\"message\", msg);\n          }\n        } else {\n          client.emit(\"warn\", \"message created but channel is not cached\");\n        }\n        break;\n      }\n      case PacketType.MESSAGE_DELETE: {\n        let channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n        if (channel) {\n          // potentially blank\n          let msg = channel.messages.get(\"id\", data.id);\n          client.emit(\"messageDeleted\", msg, channel);\n          if (msg) {\n            channel.messages.remove(msg);\n          } else {\n            client.emit(\"debug\", \"message was deleted but message is not cached\");\n          }\n        } else {\n          client.emit(\"warn\", \"message was deleted but channel is not cached\");\n        }\n        break;\n      }\n      case PacketType.MESSAGE_DELETE_BULK: {\n        let channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n        if (channel) {\n          data.ids.forEach((id) => {\n            // potentially blank\n            let msg = channel.messages.get(\"id\", id);\n            client.emit(\"messageDeleted\", msg, channel);\n            if (msg) {\n              channel.messages.remove(msg);\n            } else {\n              client.emit(\"debug\", \"message was deleted but message is not cached\");\n            }\n          });\n        } else {\n          client.emit(\"warn\", \"message was deleted but channel is not cached\");\n        }\n        break;\n      }\n      case PacketType.MESSAGE_UPDATE: {\n        // format https://discordapi.readthedocs.org/en/latest/reference/channels/messages.html#message-format\n        let channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n        if (channel) {\n          // potentially blank\n          let msg = channel.messages.get(\"id\", data.id);\n\n          if (msg) {\n            // old message exists\n            data.nonce = data.nonce !== undefined ? data.nonce : msg.nonce;\n            data.attachments = data.attachments !== undefined ? data.attachments : msg.attachments;\n            data.tts = data.tts !== undefined ? data.tts : msg.tts;\n            data.embeds = data.embeds !== undefined ? data.embeds : msg.embeds;\n            data.timestamp = data.timestamp !== undefined ? data.timestamp : msg.timestamp;\n            data.mention_everyone = data.mention_everyone !== undefined ? data.mention_everyone : msg.everyoneMentioned;\n            data.content = data.content !== undefined ? data.content : msg.content;\n            data.mentions = data.mentions !== undefined ? data.mentions : msg.mentions;\n            data.author = data.author !== undefined ? data.author : msg.author;\n            msg = new Message(msg, channel, client);\n          } else if (!data.author || !data.content) {\n            break;\n          }\n          let nmsg = new Message(data, channel, client);\n          client.emit(\"messageUpdated\", msg, nmsg);\n          if (msg) {\n            channel.messages.update(msg, nmsg);\n          }\n        } else {\n          client.emit(\"warn\", \"message was updated but channel is not cached\");\n        }\n        break;\n      }\n      case PacketType.SERVER_CREATE: {\n        let server = this.servers.get(\"id\", data.id);\n        if (!server) {\n          if (!data.unavailable) {\n            server = this.servers.add(new Server(data, client));\n            if (client.options.bot === false) {\n              this.unsyncedGuilds++;\n              this.syncGuild(server.id);\n            }\n            if (client.readyTime) {\n              client.emit(\"serverCreated\", server);\n            }\n            if (this.client.options.forceFetchUsers && server.large && server.members.length < server.memberCount) {\n              this.getGuildMembers(server.id, Math.ceil(server.memberCount / 1000));\n            }\n            let unavailable = this.unavailableServers.get(\"id\", server.id);\n            if (unavailable) {\n              this.unavailableServers.remove(unavailable);\n            }\n            this.restartServerCreateTimeout();\n          } else {\n            client.emit(\"debug\", \"server was unavailable, could not create\");\n          }\n        }\n        break;\n      }\n      case PacketType.SERVER_DELETE: {\n        let server = this.servers.get(\"id\", data.id);\n        if (server) {\n          if (!data.unavailable) {\n            client.emit(\"serverDeleted\", server);\n\n            for (let channel of server.channels) {\n              this.channels.remove(channel);\n            }\n\n            this.servers.remove(server);\n\n            for (let user of server.members) {\n              let found = false;\n              for (let s of this.servers) {\n                if (s.members.get(\"id\", user.id)) {\n                  found = true;\n                  break;\n                }\n              }\n              if (!found) {\n                this.users.remove(user);\n              }\n            }\n          } else {\n            client.emit(\"debug\", \"server was unavailable, could not update\");\n          }\n          this.buckets[\"bot:msg:guild:\" + packet.d.id] =\n            this.buckets[\"dmsg:\" + packet.d.id] =\n              this.buckets[\"bdmsg:\" + packet.d.id] =\n                this.buckets[\"guild_member:\" + packet.d.id] =\n                  this.buckets[\"guild_member_nick:\" + packet.d.id] = undefined;\n        } else {\n          client.emit(\"warn\", \"server was deleted but it was not in the cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_UPDATE: {\n        let server = this.servers.get(\"id\", data.id);\n        if (server) {\n          // server exists\n          data.members = data.members || [];\n          data.channels = data.channels || [];\n          let newserver = new Server(data, client);\n          newserver.members = server.members;\n          newserver.memberMap = server.memberMap;\n          newserver.channels = server.channels;\n          if (newserver.equalsStrict(server)) {\n            // already the same don't do anything\n            client.emit(\"debug\", \"received server update but server already updated\");\n          } else {\n            client.emit(\"serverUpdated\", new Server(server, client), newserver);\n            this.servers.update(server, newserver);\n          }\n        } else if (!server) {\n          client.emit(\"warn\", \"server was updated but it was not in the cache\");\n        }\n        break;\n      }\n      case PacketType.CHANNEL_CREATE: {\n\n        let channel = this.channels.get(\"id\", data.id);\n\n        if (!channel) {\n\n          let server = this.servers.get(\"id\", data.guild_id);\n          if (server) {\n            let chan = null;\n            if (data.type === 0) {\n              chan = this.channels.add(new TextChannel(data, client, server));\n            } else {\n              chan = this.channels.add(new VoiceChannel(data, client, server));\n            }\n            client.emit(\"channelCreated\", server.channels.add(chan));\n          } else if (data.is_private) {\n            client.emit(\"channelCreated\", this.private_channels.add(new PMChannel(data, client)));\n          } else {\n            client.emit(\"warn\", \"channel created but server does not exist\");\n          }\n\n        } else {\n          client.emit(\"warn\", \"channel created but already in cache\");\n        }\n\n        break;\n      }\n      case PacketType.CHANNEL_DELETE: {\n        let channel = this.channels.get(\"id\", data.id) || this.private_channels.get(\"id\", data.id);\n        if (channel) {\n\n          if (channel.server) { // accounts for PMs\n            channel.server.channels.remove(channel);\n            this.channels.remove(channel);\n          } else {\n            this.private_channels.remove(channel);\n          }\n\n          client.emit(\"channelDeleted\", channel);\n\n        } else {\n          client.emit(\"warn\", \"channel deleted but already out of cache?\");\n        }\n        break;\n      }\n      case PacketType.CHANNEL_UPDATE: {\n        let channel = this.channels.get(\"id\", data.id) || this.private_channels.get(\"id\", data.id);\n        if (channel) {\n\n          if (channel instanceof PMChannel) {\n            //PM CHANNEL\n            client.emit(\"channelUpdated\", new PMChannel(channel, client),\n              this.private_channels.update(channel, new PMChannel(data, client)));\n          } else {\n            if (channel.server) {\n              if (channel.type === 0) {\n                //TEXT CHANNEL\n                let chan = new TextChannel(data, client, channel.server);\n                chan.messages = channel.messages;\n                client.emit(\"channelUpdated\", channel, chan);\n                channel.server.channels.update(channel, chan);\n                this.channels.update(channel, chan);\n              } else {\n                //VOICE CHANNEL\n                data.members = channel.members;\n                let chan = new VoiceChannel(data, client, channel.server);\n                client.emit(\"channelUpdated\", channel, chan);\n                channel.server.channels.update(channel, chan);\n                this.channels.update(channel, chan);\n              }\n            } else {\n              client.emit(\"warn\", \"channel updated but server non-existant\");\n            }\n          }\n\n        } else {\n          client.emit(\"warn\", \"channel updated but not in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_ROLE_CREATE: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n          client.emit(\"serverRoleCreated\", server.roles.add(new Role(data.role, server, client)), server);\n        } else {\n          client.emit(\"warn\", \"server role made but server not in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_ROLE_DELETE: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n          let role = server.roles.get(\"id\", data.role_id);\n          if (role) {\n            server.roles.remove(role);\n            client.emit(\"serverRoleDeleted\", role);\n          } else {\n            client.emit(\"warn\", \"server role deleted but role not in cache\");\n          }\n        } else {\n          client.emit(\"warn\", \"server role deleted but server not in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_ROLE_UPDATE: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n          let role = server.roles.get(\"id\", data.role.id);\n          if (role) {\n            let newRole = new Role(data.role, server, client);\n            client.emit(\"serverRoleUpdated\", new Role(role, server, client), newRole);\n            server.roles.update(role, newRole);\n          } else {\n            client.emit(\"warn\", \"server role updated but role not in cache\");\n          }\n        } else {\n          client.emit(\"warn\", \"server role updated but server not in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_MEMBER_ADD: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n\n          server.memberMap[data.user.id] = {\n            roles: data.roles,\n            mute: false,\n            selfMute: false,\n            deaf: false,\n            selfDeaf: false,\n            joinedAt: Date.parse(data.joined_at),\n            nick: data.nick || null\n          };\n\n          server.memberCount++;\n\n          client.emit(\n            \"serverNewMember\",\n            server,\n            server.members.add(this.users.add(new User(data.user, client)))\n          );\n\n        } else {\n          client.emit(\"warn\", \"server member added but server doesn't exist in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_MEMBER_REMOVE: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n          let user = this.users.get(\"id\", data.user.id);\n          if (user) {\n            client.emit(\"serverMemberRemoved\", server, user);\n            server.memberMap[data.user.id] = null;\n            server.members.remove(user);\n            server.memberCount--;\n          } else {\n            client.emit(\"warn\", \"server member removed but user doesn't exist in cache\");\n          }\n        } else {\n          client.emit(\"warn\", \"server member removed but server doesn't exist in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_MEMBER_UPDATE: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n          let user = this.users.add(new User(data.user, client));\n          if (user) {\n            let oldMember = null;\n            if (server.memberMap[data.user.id]) {\n              oldMember = {\n                roles: server.memberMap[data.user.id].roles,\n                mute: server.memberMap[data.user.id].mute,\n                selfMute: server.memberMap[data.user.id].selfMute,\n                deaf: server.memberMap[data.user.id].deaf,\n                selfDeaf: server.memberMap[data.user.id].selfDeaf,\n                nick: server.memberMap[data.user.id].nick\n              };\n            } else {\n              server.memberMap[data.user.id] = {};\n            }\n            server.memberMap[data.user.id].roles = data.roles ? data.roles : server.memberMap[data.user.id].roles;\n            server.memberMap[data.user.id].mute = data.mute || server.memberMap[data.user.id].mute;\n            server.memberMap[data.user.id].selfMute = data.self_mute === undefined ? server.memberMap[data.user.id].selfMute : data.self_mute;\n            server.memberMap[data.user.id].deaf = data.deaf || server.memberMap[data.user.id].deaf;\n            server.memberMap[data.user.id].selfDeaf = data.self_deaf === undefined ? server.memberMap[data.user.id].selfDeaf : data.self_deaf;\n            server.memberMap[data.user.id].nick = data.nick === undefined ? server.memberMap[data.user.id].nick : data.nick || null;\n            client.emit(\"serverMemberUpdated\", server, user, oldMember);\n          } else {\n            client.emit(\"warn\", \"server member removed but user doesn't exist in cache\");\n          }\n        } else {\n          client.emit(\"warn\", \"server member updated but server doesn't exist in cache\");\n        }\n        break;\n      }\n      case PacketType.PRESENCE_UPDATE: {\n\n        let user = this.users.add(new User(data.user, client));\n        let server = this.servers.get(\"id\", data.guild_id);\n\n        if (user && server) {\n\n          server.members.add(user);\n\n          data.user.username = data.user.username || user.username;\n          data.user.id = data.user.id || user.id;\n          data.user.avatar = data.user.avatar !== undefined ? data.user.avatar : user.avatar;\n          data.user.discriminator = data.user.discriminator || user.discriminator;\n          data.user.status = data.status || user.status;\n          data.user.game = data.game !== undefined ? data.game : user.game;\n          data.user.bot = data.user.bot !== undefined ? data.user.bot : user.bot;\n\n          let presenceUser = new User(data.user, client);\n\n          if (!presenceUser.equalsStrict(user)) {\n            client.emit(\"presence\", user, presenceUser);\n            this.users.update(user, presenceUser);\n          }\n\n        } else {\n          client.emit(\"warn\", \"presence update but user/server not in cache\");\n        }\n\n        break;\n      }\n      case PacketType.USER_UPDATE: {\n\n        let user = this.users.get(\"id\", data.id);\n\n        if (user) {\n\n          data.username = data.username || user.username;\n          data.id = data.id || user.id;\n          data.avatar = data.avatar || user.avatar;\n          data.discriminator = data.discriminator || user.discriminator;\n          this.email = data.email || this.email;\n\n          let presenceUser = new User(data, client);\n\n          client.emit(\"presence\", user, presenceUser);\n          this.users.update(user, presenceUser);\n\n        } else {\n          client.emit(\"warn\", \"user update but user not in cache (this should never happen)\");\n        }\n\n        break;\n      }\n      case PacketType.TYPING: {\n\n        let user = this.users.get(\"id\", data.user_id);\n        let channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n\n        if (user && channel) {\n          if (user.typing.since) {\n            user.typing.since = Date.now();\n            user.typing.channel = channel;\n          } else {\n            user.typing.since = Date.now();\n            user.typing.channel = channel;\n            client.emit(\"userTypingStarted\", user, channel);\n          }\n          setTimeout(() => {\n            if (Date.now() - user.typing.since > 5500) {\n              // they haven't typed since\n              user.typing.since = null;\n              user.typing.channel = null;\n              client.emit(\"userTypingStopped\", user, channel);\n            }\n          }, 6000);\n\n        } else {\n          client.emit(\"warn\", \"user typing but user or channel not existant in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_BAN_ADD: {\n        let user = this.users.get(\"id\", data.user.id);\n        let server = this.servers.get(\"id\", data.guild_id);\n\n        if (user && server) {\n          client.emit(\"userBanned\", user, server);\n        } else {\n          client.emit(\"warn\", \"user banned but user/server not in cache.\");\n        }\n        break;\n      }\n      case PacketType.SERVER_BAN_REMOVE: {\n        let user = this.users.get(\"id\", data.user.id);\n        let server = this.servers.get(\"id\", data.guild_id);\n\n        if (user && server) {\n          client.emit(\"userUnbanned\", user, server);\n        } else {\n          client.emit(\"warn\", \"user unbanned but user/server not in cache.\");\n        }\n        break;\n      }\n      case PacketType.USER_NOTE_UPDATE: {\n        if (this.user.bot) {\n          return;\n        }\n        let user = this.users.get(\"id\", data.id);\n        let oldNote = user.note;\n        let note = data.note || null;\n\n        // user in cache\n        if (user) {\n          let updatedUser = user;\n          updatedUser.note = note;\n\n          client.emit(\"noteUpdated\", user, oldNote);\n\n          this.users.update(user, updatedUser);\n\n        } else {\n          client.emit(\"warn\", \"note updated but user not in cache\");\n        }\n        break;\n      }\n      case PacketType.VOICE_STATE_UPDATE: {\n        let user = this.users.get(\"id\", data.user_id);\n        let server = this.servers.get(\"id\", data.guild_id);\n\n        if (user && server) {\n\n          if (data.channel_id) {\n            // in voice channel\n            let channel = this.channels.get(\"id\", data.channel_id);\n            if (channel && channel.type === 2) {\n              server.eventVoiceStateUpdate(channel, user, data);\n            } else {\n              client.emit(\"warn\", \"voice state channel not in cache\");\n            }\n          } else {\n            // not in voice channel\n            client.emit(\"voiceLeave\", server.eventVoiceLeave(user), user);\n          }\n\n        } else {\n          client.emit(\"warn\", \"voice state update but user or server not in cache\");\n        }\n\n        if (user && user.id === this.user.id) { // only for detecting self user movements for connections.\n          let connection = this.voiceConnections.get(\"server\", server);\n          // existing connection, perhaps channel moved\n          if (connection && connection.voiceChannel && connection.voiceChannel.id !== data.channel_id) {\n            // moved, update info\n            connection.voiceChannel = this.channels.get(\"id\", data.channel_id);\n            client.emit(\"voiceMoved\", connection.voiceChannel); // Moved to a new channel\n          }\n        }\n\n        break;\n      }\n      case PacketType.SERVER_MEMBERS_CHUNK: {\n\n        let server = this.servers.get(\"id\", data.guild_id);\n\n        if (server) {\n\n          let testtime = Date.now();\n\n          for (let user of data.members) {\n            server.memberMap[user.user.id] = {\n              roles: user.roles,\n              mute: user.mute,\n              selfMute: false,\n              deaf: user.deaf,\n              selfDeaf: false,\n              joinedAt: Date.parse(user.joined_at),\n              nick: user.nick || null\n            };\n            server.members.add(this.users.add(new User(user.user, client)));\n          }\n\n          if (this.forceFetchCount.hasOwnProperty(server.id)) {\n            if (this.forceFetchCount[server.id] <= 1) {\n              delete this.forceFetchCount[server.id];\n              this.restartServerCreateTimeout();\n            } else {\n              this.forceFetchCount[server.id]--;\n            }\n          }\n\n          client.emit(\"debug\", (Date.now() - testtime) + \"ms for \" + data.members.length + \" user chunk for server with id \" + server.id);\n\n        } else {\n          client.emit(\"warn\", \"chunk update received but server not in cache\");\n        }\n\n        break;\n      }\n      case PacketType.FRIEND_ADD: {\n        if (this.user.bot) {\n          return;\n        }\n        if (data.type === 1) { // accepted/got accepted a friend request\n          let inUser = this.incoming_friend_requests.get(\"id\", data.id);\n          if (inUser) {\n            // client accepted another user\n            this.incoming_friend_requests.remove(this.friends.add(new User(data.user, client)));\n            return;\n          }\n\n          let outUser = this.outgoing_friend_requests.get(\"id\", data.id);\n          if (outUser) {\n            // another user accepted the client\n            this.outgoing_friend_requests.remove(this.friends.add(new User(data.user, client)));\n            client.emit(\"friendRequestAccepted\", outUser);\n            return;\n          }\n        } else if (data.type === 2) {\n          // client received block\n          this.blocked_users.add(new User(data.user, client));\n        } else if (data.type === 3) {\n          // client received friend request\n          client.emit(\"friendRequestReceived\", this.incoming_friend_requests.add(new User(data.user, client)));\n        } else if (data.type === 4) {\n          // client sent friend request\n          this.outgoing_friend_requests.add(new User(data.user, client));\n        }\n        break;\n      }\n      case PacketType.FRIEND_REMOVE: {\n        if (this.user.bot) {\n          return;\n        }\n        let user = this.friends.get(\"id\", data.id);\n        if (user) {\n          this.friends.remove(user);\n          client.emit(\"friendRemoved\", user);\n          return;\n        }\n\n        user = this.blocked_users.get(\"id\", data.id);\n        if (user) { // they rejected friend request\n          this.blocked_users.remove(user);\n          return;\n        }\n\n        user = this.incoming_friend_requests.get(\"id\", data.id);\n        if (user) { // they rejected outgoing friend request OR client user manually deleted incoming through web client/other clients\n          let rejectedUser = this.outgoing_friend_requests.get(\"id\", user.id);\n          if (rejectedUser) {\n            // other person rejected outgoing\n            client.emit(\"friendRequestRejected\", this.outgoing_friend_requests.remove(rejectedUser));\n            return;\n          }\n\n          // incoming deleted manually\n          this.incoming_friend_requests.remove(user);\n          return;\n        }\n\n        user = this.outgoing_friend_requests.get(\"id\", data.id);\n        if (user) { // client cancelled incoming friend request OR client user manually deleted outgoing through web client/other clients\n          let incomingCancel = this.incoming_friend_requests.get(\"id\", user.id);\n          if (incomingCancel) {\n            // client cancelled incoming\n            this.incoming_friend_requests.remove(user);\n            return;\n          }\n\n          // outgoing deleted manually\n          this.outgoing_friend_requests.remove(user);\n          return;\n        }\n        break;\n      }\n      case PacketType.SERVER_SYNC: {\n        let guild = this.servers.get(data.id);\n        data.members.forEach((dataUser) => {\n          guild.memberMap[dataUser.user.id] = {\n            roles: dataUser.roles,\n            mute: dataUser.mute,\n            selfMute: dataUser.self_mute,\n            deaf: dataUser.deaf,\n            selfDeaf: dataUser.self_deaf,\n            joinedAt: Date.parse(dataUser.joined_at),\n            nick: dataUser.nick || null\n          };\n          guild.members.add(client.internal.users.add(new User(dataUser.user, client)));\n        });\n        for (let presence of data.presences) {\n          let user = client.internal.users.get(\"id\", presence.user.id);\n          if (user) {\n            user.status = presence.status;\n            user.game = presence.game;\n          }\n        }\n        if (guild.pendingVoiceStates && guild.pendingVoiceStates.length > 0) {\n          for (let voiceState of guild.pendingVoiceStates) {\n            let user = guild.members.get(\"id\", voiceState.user_id);\n            if (user) {\n              guild.memberMap[user.id] = guild.memberMap[user.id] || {};\n              guild.memberMap[user.id].mute = voiceState.mute || guild.memberMap[user.id].mute;\n              guild.memberMap[user.id].selfMute = voiceState.self_mute === undefined ? guild.memberMap[user.id].selfMute : voiceState.self_mute;\n              guild.memberMap[user.id].deaf = voiceState.deaf || guild.memberMap[user.id].deaf;\n              guild.memberMap[user.id].selfDeaf = voiceState.self_deaf === undefined ? guild.memberMap[user.id].selfDeaf : voiceState.self_deaf;\n              let channel = guild.channels.get(\"id\", voiceState.channel_id);\n              if (channel) {\n                guild.eventVoiceJoin(user, channel);\n              } else {\n                guild.client.emit(\"warn\", \"channel doesn't exist even though GUILD_SYNC expects them to\");\n              }\n            } else {\n              guild.client.emit(\"warn\", \"user doesn't exist even though GUILD_SYNC expects them to\");\n            }\n          }\n        }\n        guild.pendingVoiceStates = null;\n        this.unsyncedGuilds--;\n        this.restartServerCreateTimeout();\n        break;\n      }\n      default: {\n        client.emit(\"unknown\", packet);\n        break;\n      }\n    }\n  }\n\n  resume() {\n    let data = {\n      op: 6,\n      d: {\n        token: this.token,\n        session_id: this.sessionID,\n        seq: this.sequence\n      }\n    };\n\n    this.sendWS(data);\n  }\n\n  identify() {\n    let data = {\n      op: 2,\n      d: {\n        token: this.token,\n        v: GATEWAY_VERSION,\n        compress: this.client.options.compress,\n        large_threshold: this.client.options.largeThreshold,\n        properties: {\n          \"$os\": process.platform,\n          \"$browser\": \"discord.js\",\n          \"$device\": \"discord.js\",\n          \"$referrer\": \"\",\n          \"$referring_domain\": \"\"\n        }\n      }\n    };\n\n    if (this.client.options.shard) {\n      data.d.shard = this.client.options.shard;\n    }\n\n    this.sendWS(data);\n  }\n\n  heartbeat() {\n    if (!this.heartbeatAcked) this.disconnected(true);\n    this.heartbeatAcked = false;\n    this.sendWS({op: 1, d: Date.now()});\n  }\n}\n"]}
+=======
+{"version":3,"sources":["../../src/Client/InternalClient.js"],"names":["GATEWAY_VERSION","zlib","libVersion","require","version","waitFor","condition","value","interval","Promise","resolve","int","setInterval","isDone","clearInterval","delay","ms","setTimeout","InternalClient","constructor","discordClient","setup","apiRequest","method","url","useAuth","data","file","reject","promise","res","rej","buckets","match","channels","get","private_channels","server","id","user","bot","username","self","actualCall","startTime","Date","now","ret","set","token","attach","name","i","undefined","field","send","userAgentInfo","full","end","error","status","client","emit","options","shard","body","done","bucket","queue","state","IDLE","websocket","userAgent","compress","users","friends","blocked_users","outgoing_friend_requests","incoming_friend_requests","servers","unavailableServers","autoReconnectInterval","unsyncedGuilds","guildSyncQueue","guildSyncQueueLength","intervals","typing","kai","misc","voiceConnections","resolver","readyTime","messageAwaits","tokenCacher","init","cleanIntervals","concat","disconnected","autoReconnect","forEach","vc","leaveVoiceChannel","Math","min","random","email","loginWithToken","password","catch","uptime","info","chann","leave","connection","destroy","resolveChannel","then","channel","Error","type","awaitResponse","msg","resolveMessage","awaitID","author","push","joinVoiceChannel","joinSendWS","sendWS","op","d","joinVoice","session","sessionID","endpoint","timeout","check","t","guild_id","clearTimeout","removeListener","on","existingServerConn","length","voiceConnection","getGuildMembers","serverID","chunkCount","forceFetchCount","forceFetchLength","requestGuildMembers","forceFetchQueue","query","limit","syncGuild","guildID","checkReady","key","hasOwnProperty","restartServerCreateTimeout","guildCreateTimeout","createServer","region","resolveString","SERVERS","joinServer","invite","resolveInviteID","INVITE","guild","updateServer","resolveServer","newOptions","icon","resolveToBase64","splash","owner","resolveUser","owner_id","verificationLevel","verification_level","afkChannel","afk_channel_id","afkTimeout","afk_timeout","SERVER","leaveServer","srv","ME_SERVER","deleteServer","LOGGED_IN","getGateway","startsWith","createWS","login","tk","getToken","DISCONNECTED","LOGGING_IN","LOGIN","setToken","logout","disconnect","close","LOGOUT","startPM","resUser","ME_CHANNELS","recipient_id","add","gatewayURL","GATEWAY","sendMessage","where","_content","String","basename","path","destination","content","disableEveryone","replace","resolveFile","CHANNEL_MESSAGES","tts","nonce","messages","sendFile","_file","deleteMessage","_message","message","chain","wait","CHANNEL_MESSAGE","remove","deleteMessages","_messages","Array","map","m","updateMessage","update","getChannelLogs","_channel","qsObject","before","after","around","stringify","getMessage","messageID","pinMessage","CHANNEL_PIN","unpinMessage","pinned","getPinnedMessages","CHANNEL_PINS","getBans","SERVER_BANS","ban","createChannel","SERVER_CHANNELS","deleteChannel","CHANNEL","banMember","resolvedUser","unbanMember","kickMember","SERVER_MEMBERS","moveMember","channel_id","voiceChannel","muteMember","mute","unmuteMember","deafenMember","deaf","undeafenMember","setNickname","nick","setNote","note","ME_NOTES","createRole","SERVER_ROLES","role","roles","updateRole","resolveRole","newData","color","hoist","position","permissions","mentionable","perm","deleteRole","addMemberToRole","member","isArray","r","some","memberMap","roleIDs","indexOf","memberHasRole","roledata","rolesOf","removeMemberFromRole","item","splice","createInvite","chanServ","validate","max_age","maxAge","max_uses","maxUses","temporary","xkcdpass","xkcd","CHANNEL_INVITES","deleteInvite","getInvite","has","res2","getInvites","SERVER_INVITES","overwritePermissions","updated","allow","deny","previousOverwrite","permissionOverwrites","CHANNEL_PERMISSIONS","setStatus","idleStatus","game","packet","idle_since","sendTyping","startTyping","stopTyping","updateDetails","avatar","new_password","newPassword","ME","setAvatar","setUsername","setChannelTopic","topic","updateChannel","setChannelName","setChannelPosition","setChannelUserLimit","userLimit","setChannelBitrate","kbitrate","bitrate","user_limit","ceil","_bitrate","addFriend","discriminator","FRIENDS","removeFriend","getServerWebhooks","SERVER_WEBHOOKS","webhook","webhooks","getChannelWebhooks","CHANNEL_WEBHOOKS","editWebhook","resolveWebhook","WEBHOOK","createWebhook","deleteWebhook","sendWebhookMessage","slack","WEBHOOK_MESSAGE","getOAuthApplication","appID","OAUTH2_APPLICATION","ack","object","JSON","endsWith","onopen","onclose","event","code","err","sequence","onerror","e","onmessage","Buffer","inflateSync","toString","parse","s","processPacket","console","log","heartbeatAcked","heartbeat","identify","resume","heartbeat_interval","RESUME","READY","session_id","guilds","unavailable","forceFetchUsers","members","memberCount","pm","relationships","friend","notes","newUser","MESSAGE_CREATE","lastMessageID","fn","MESSAGE_DELETE","MESSAGE_DELETE_BULK","ids","MESSAGE_UPDATE","attachments","embeds","timestamp","mention_everyone","everyoneMentioned","mentions","nmsg","SERVER_CREATE","large","SERVER_DELETE","found","SERVER_UPDATE","newserver","equalsStrict","CHANNEL_CREATE","chan","is_private","CHANNEL_DELETE","CHANNEL_UPDATE","SERVER_ROLE_CREATE","SERVER_ROLE_DELETE","role_id","SERVER_ROLE_UPDATE","newRole","SERVER_MEMBER_ADD","selfMute","selfDeaf","joinedAt","joined_at","SERVER_MEMBER_REMOVE","SERVER_MEMBER_UPDATE","oldMember","self_mute","self_deaf","PRESENCE_UPDATE","presenceUser","USER_UPDATE","TYPING","user_id","since","SERVER_BAN_ADD","SERVER_BAN_REMOVE","USER_NOTE_UPDATE","oldNote","updatedUser","VOICE_STATE_UPDATE","eventVoiceStateUpdate","eventVoiceLeave","SERVER_MEMBERS_CHUNK","testtime","FRIEND_ADD","inUser","outUser","FRIEND_REMOVE","rejectedUser","incomingCancel","SERVER_SYNC","dataUser","internal","presence","presences","pendingVoiceStates","voiceState","eventVoiceJoin","seq","v","large_threshold","largeThreshold","properties","process","platform"],"mappings":"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","file":"InternalClient.js","sourcesContent":["\"use strict\";\n\nimport request from \"superagent\";\nimport WebSocket from \"ws\";\nimport ConnectionState from \"./ConnectionState\";\nimport qs from \"querystring\";\n\nimport {Endpoints, PacketType, Permissions} from \"../Constants\";\n\nimport Bucket from \"../Util/Bucket\";\nimport Cache from \"../Util/Cache\";\nimport Resolver from \"./Resolver/Resolver\";\n\nimport User from \"../Structures/User\";\nimport Channel from \"../Structures/Channel\";\nimport ServerChannel from \"../Structures/ServerChannel\";\nimport TextChannel from \"../Structures/TextChannel\";\nimport VoiceChannel from \"../Structures/VoiceChannel\";\nimport PMChannel from \"../Structures/PMChannel\";\nimport Server from \"../Structures/Server\";\nimport Message from \"../Structures/Message\";\nimport Role from \"../Structures/Role\";\nimport Invite from \"../Structures/Invite\";\nimport Webhook from \"../Structures/Webhook\";\nimport VoiceConnection from \"../Voice/VoiceConnection\";\nimport TokenCacher from \"../Util/TokenCacher\";\n\nvar GATEWAY_VERSION = 6;\nvar zlib;\nvar libVersion = require('../../package.json').version;\n\nfunction waitFor(condition, value = condition, interval = 20) {\n\treturn new Promise(resolve => {\n\t\tvar int = setInterval(() => {\n\t\t\tvar isDone = condition();\n\t\t\tif (isDone) {\n\t\t\t\tif (condition === value) {\n\t\t\t\t\tresolve(isDone);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(value(isDone));\n\t\t\t\t}\n\t\t\t\treturn clearInterval(int);\n\t\t\t}\n\t\t}, interval);\n\t});\n}\n\nfunction delay(ms) {\n\treturn new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport default class InternalClient {\n\tconstructor(discordClient) {\n\t\tthis.setup(discordClient);\n\t}\n\n\tapiRequest(method, url, useAuth, data, file) {\n\t\tvar resolve, reject;\n\t\tvar promise = new Promise((res, rej) => {\n\t\t\tresolve = res;\n\t\t\treject = rej;\n\t\t});\n\t\tvar buckets = [];\n        var match = url.match(/\\/channels\\/([0-9]+)\\/messages(\\/[0-9]+)?$/);\n        if(match) {\n            if(method === \"del\" && (match[1] = this.channels.get(\"id\", match[1]) || this.private_channels.get(\"id\", match[1]))) {\n                buckets = [\"dmsg:\" + (match[1].server || {}).id];\n            } else if(this.user.bot) {\n                if(method === \"post\" || method === \"patch\") {\n                    if(this.private_channels.get(\"id\", match[1])) {\n                        buckets = [\"bot:msg:dm\", \"bot:msg:global\"];\n                    } else if((match[1] = this.channels.get(\"id\", match[1]))) {\n                        buckets = [\"bot:msg:guild:\" + match[1].server.id, \"bot:msg:global\"];\n                    }\n                }\n            } else {\n                buckets = [\"msg\"];\n            }\n        } else if(method === \"patch\") {\n            if(url === \"/users/@me\" && this.user && data.username && data.username !== this.user.username) {\n                buckets = [\"username\"];\n            } else if((match = url.match(/\\/guilds\\/([0-9]+)\\/members\\/[0-9]+$/))) {\n                buckets = [\"guild_member:\" + match[1]];\n            } else if((match = url.match(/\\/guilds\\/([0-9]+)\\/members\\/@me\\/nick$/))) {\n                buckets = [\"guild_member_nick:\" + match[1]];\n            }\n        }\n\n        var self = this;\n\n\t\tvar actualCall = function() {\n\t\t\tvar startTime = Date.now();\n\t\t\tvar ret = request[method](url);\n\t\t\tif (useAuth) {\n\t\t\t\tret.set(\"authorization\", self.token);\n\t\t\t}\n\t\t\tif (file) {\n\t\t\t\tret.attach(\"file\", file.file, file.name);\n\t\t\t\tif (data) {\n\t\t\t\t\tfor (var i in data) {\n\t\t\t\t\t\tif (data[i] !== undefined) {\n\t\t\t\t\t\t\tret.field(i, data[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (data) {\n\t\t\t\tret.send(data);\n\t\t\t}\n\t\t\tret.set('User-Agent', self.userAgentInfo.full);\n\t\t\tret.end((error, data) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tif (data && data.status === 429) {\n\t\t\t\t\t\tself.client.emit(\"debug\", \"Encountered 429 at \" + url + \" | \" + self.client.options.shard + \" | Buckets\" + buckets + \" | \" + (Date.now() - startTime) + \"ms latency\");\n\t\t\t\t\t}\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(data.body);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n        var waitFor = 1;\n        var i = 0;\n        var done = function() {\n            if(++i === waitFor) {\n                actualCall();\n            }\n        };\n        for(var bucket of buckets) {\n            ++waitFor;\n            this.buckets[bucket].queue(done);\n        }\n        done();\n        return promise;\n\t}\n\n\tsetup(discordClient) {\n\t\tdiscordClient = discordClient || this.client;\n\t\tthis.client = discordClient;\n\t\tthis.state = ConnectionState.IDLE;\n\t\tthis.websocket = null;\n\t\tthis.userAgent = {\n\t\t\turl: 'https://github.com/hydrabolt/discord.js',\n\t\t\tversion: require('../../package.json').version\n\t\t};\n\n\t\tif (this.client.options.compress) {\n\t\t\tzlib = require(\"zlib\");\n\t\t}\n\n\t\t// creates 4 caches with discriminators based on ID\n\t\tthis.users = new Cache();\n\t\tthis.friends = new Cache();\n\t\tthis.blocked_users = new Cache();\n\t\tthis.outgoing_friend_requests = new Cache();\n\t\tthis.incoming_friend_requests = new Cache();\n\t\tthis.channels = new Cache();\n\t\tthis.servers = new Cache();\n\t\tthis.unavailableServers = new Cache();\n\t\tthis.private_channels = new Cache();\n\t\tthis.autoReconnectInterval = 1000;\n\t\tthis.unsyncedGuilds = 0;\n        this.guildSyncQueue = [];\n        this.guildSyncQueueLength = 1;\n\n\t\tthis.intervals = {\n\t\t\ttyping : [],\n\t\t\tkai : null,\n\t\t\tmisc : []\n\t\t};\n\n\t\tthis.voiceConnections = new Cache();\n\t\tthis.resolver = new Resolver(this);\n\t\tthis.readyTime = null;\n\t\tthis.messageAwaits = {};\n\t\tthis.buckets = {\n            \"bot:msg:dm\": new Bucket(5, 5000),\n            \"bot:msg:global\": new Bucket(50, 10000),\n            \"msg\": new Bucket(10, 10000),\n            \"dmsg:undefined\": new Bucket(5, 1000),\n            \"username\": new Bucket(2, 3600000)\n        };\n\n\t\tif (!this.tokenCacher) {\n\t\t\tthis.tokenCacher = new TokenCacher(this.client);\n\t\t\tthis.tokenCacher.init(0);\n\t\t}\n\t}\n\n\tcleanIntervals() {\n\t\tfor (let interval of this.intervals.typing.concat(this.intervals.misc).concat(this.intervals.kai)) {\n\t\t\tif (interval) {\n\t\t\t\tclearInterval(interval);\n\t\t\t}\n\t\t}\n\t}\n\n\tdisconnected(autoReconnect = false) {\n\n\t\tthis.cleanIntervals();\n\n\t\tthis.voiceConnections.forEach(vc => {\n\t\t\tthis.leaveVoiceChannel(vc);\n\t\t});\n\n\t\tif (autoReconnect) {\n\t\t\tthis.autoReconnectInterval = Math.min(this.autoReconnectInterval * (Math.random() + 1), 60000);\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (!this.email && !this.token) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check whether the email is set (if not, only a token has been used for login)\n\t\t\t\tthis.loginWithToken(this.token, this.email, this.password).catch(() => this.disconnected(true));\n\t\t\t}, this.autoReconnectInterval);\n\t\t}\n\n\t\tthis.client.emit(\"disconnected\");\n\t}\n\n\tget uptime() {\n\t\treturn (this.readyTime ? Date.now() - this.readyTime : null);\n\t}\n\n\tset userAgent(info) {\n\t\tinfo.full = `DiscordBot (${info.url}, ${info.version})`;\n\t\tthis.userAgentInfo = info;\n\t}\n\n\tget userAgent() {\n\t\treturn this.userAgentInfo;\n\t}\n\n\t//def leaveVoiceChannel\n\tleaveVoiceChannel(chann) {\n\t\tif (this.user.bot) {\n\t\t\tvar leave = (connection) => {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\tconnection.destroy();\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tif (chann instanceof VoiceChannel) {\n\t\t\t\treturn this.resolver.resolveChannel(chann).then(channel => {\n\t\t\t\t\tif (!channel) {\n\t\t\t\t\t\treturn Promise.reject(new Error(\"voice channel does not exist\"));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (channel.type !== 2) {\n\t\t\t\t\t\treturn Promise.reject(new Error(\"channel is not a voice channel!\"));\n\t\t\t\t\t}\n\n\t\t\t\t\tvar connection = this.voiceConnections.get(\"voiceChannel\", channel);\n\t\t\t\t\tif (!connection) {\n\t\t\t\t\t\treturn Promise.reject(new Error(\"not connected to that voice channel\"));\n\t\t\t\t\t}\n\t\t\t\t\treturn leave(connection);\n\t\t\t\t});\n\t\t\t} else if (chann instanceof VoiceConnection) {\n\t\t\t\treturn leave(chann);\n\t\t\t} else {\n\t\t\t\treturn Promise.reject(new Error(\"invalid voice channel/connection to leave\"))\n\t\t\t}\n\t\t} else {\n\t\t\t// preserve old functionality for non-bots\n\t\t\tif (this.voiceConnections[0]) {\n\t\t\t\tthis.voiceConnections[0].destroy();\n\t\t\t}\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t//def awaitResponse\n\tawaitResponse(msg) {\n\t\treturn new Promise((resolve, reject) => {\n\n\t\t\tmsg = this.resolver.resolveMessage(msg);\n\n\t\t\tif (!msg) {\n\t\t\t\treject(new Error(\"message undefined\"));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar awaitID = msg.channel.id + msg.author.id;\n\n\t\t\tif ( !this.messageAwaits[awaitID] ) {\n\t\t\t\tthis.messageAwaits[awaitID] = [];\n\t\t\t}\n\n\t\t\tthis.messageAwaits[awaitID].push(resolve);\n\t\t});\n\t}\n\n\t//def joinVoiceChannel\n\tjoinVoiceChannel(chann) {\n\t\treturn this.resolver.resolveChannel(chann).then(channel => {\n\t\t\tif (!channel) {\n\t\t\t\treturn Promise.reject(new Error(\"voice channel does not exist\"));\n\t\t\t}\n\n\t\t\tif (channel.type !== 2) {\n\t\t\t\treturn Promise.reject(new Error(\"channel is not a voice channel!\"));\n\t\t\t}\n\n\t\t\tvar joinSendWS = () => {\n\t\t\t\tthis.sendWS({\n\t\t\t\t\top: 4,\n\t\t\t\t\td: {\n\t\t\t\t\t\t\"guild_id\": channel.server.id,\n\t\t\t\t\t\t\"channel_id\": channel.id,\n\t\t\t\t\t\t\"self_mute\": false,\n\t\t\t\t\t\t\"self_deaf\": false\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tvar joinVoice = () => {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\tvar session = this.sessionID, token, server = channel.server, endpoint;\n\n\t\t\t\t\tvar timeout = null;\n\n\t\t\t\t\tvar check = data => {\n\t\t\t\t\t\tif (data.t === \"VOICE_SERVER_UPDATE\") {\n\t\t\t\t\t\t\tif (data.d.guild_id !== server.id) return; // ensure it is the right server\n\t\t\t\t\t\t\ttoken = data.d.token;\n\t\t\t\t\t\t\tendpoint = data.d.endpoint;\n\t\t\t\t\t\t\tif (!token || !endpoint) return;\n\t\t\t\t\t\t\t/* var chan = new VoiceConnection(\n\t\t\t\t\t\t\t\tchannel, this.client, session, token, server, endpoint\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis.voiceConnections.add(chan);\n\n\t\t\t\t\t\t\tchan.on(\"ready\", () => resolve(chan));\n\t\t\t\t\t\t\tchan.on(\"error\", reject);\n\t\t\t\t\t\t\tchan.on(\"close\", reject); */\n\n\t\t\t\t\t\t\tresolve({ channel, client: this.client, session, token,  server, endpoint });\n\n\t\t\t\t\t\t\tif (timeout) {\n\t\t\t\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.client.removeListener(\"raw\", check);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\ttimeout = setTimeout(() => {\n\t\t\t\t\t\tthis.client.removeListener(\"raw\", check);\n\t\t\t\t\t\treject(new Error(\"No voice server details within 10 seconds\"));\n\t\t\t\t\t}, 10000);\n\n\t\t\t\t\tthis.client.on(\"raw\", check);\n\t\t\t\t\tjoinSendWS();\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tvar existingServerConn = this.voiceConnections.get(\"server\", channel.server); // same server connection\n\t\t\tif (existingServerConn) {\n\t\t\t\tjoinSendWS(); // Just needs to update by sending via WS, movement in cache will be handled by global handler\n\t\t\t\treturn Promise.resolve(existingServerConn);\n\t\t\t}\n\n\t\t\tif (!this.user.bot && this.voiceConnections.length > 0) { // nonbot, one voiceconn only, just like last time just disconnect\n\t\t\t\treturn this.leaveVoiceChannel().then(joinVoice);\n\t\t\t}\n\n\t\t\treturn joinVoice();\n\t\t});\n\t}\n\n\t// Backwards-compatible utility getter method for the first voice connection\n\t// Thanks to #q (@qeled) for suggesting this\n\tget voiceConnection() {\n\t\treturn this.voiceConnections[0];\n\t}\n\n\tgetGuildMembers(serverID, chunkCount) {\n\t\tthis.forceFetchCount[serverID] = chunkCount;\n\t\tif (this.forceFetchLength + 3 + serverID.length > 4000) { // 4096 max, '{\"op\":8,\"d\":{\"guild_id\":[],\"query\":\"\",\"limit\":0}}'.length = 49 plus some leeway\n\t\t\tthis.requestGuildMembers(this.forceFetchQueue);\n\t\t\tthis.forceFetchQueue = [serverID];\n\t\t\tthis.forceFetchLength = 1 + serverID.length + 3;\n\t\t} else {\n\t\t\tthis.forceFetchQueue.push(serverID);\n\t\t\tthis.forceFetchLength += serverID.length + 3;\n\t\t}\n\t}\n\n\trequestGuildMembers(serverID, query, limit) {\n\t\tthis.sendWS({op: 8,\n\t\t\td: {\n\t\t\t\tguild_id: serverID,\n\t\t\t\tquery: query || \"\",\n\t\t\t\tlimit: limit || 0\n\t\t\t}\n\t\t});\n\t}\n\n\tsyncGuild(guildID) {\n        if(this.guildSyncQueueLength + 3 + guildID.length > 4050) { // 4096 max, '{\"op\":12,\"d\":[]}'.length = 16 plus some leeway\n            this.sendWS({op: 12, d: this.guildSyncQueue});\n            this.guildSyncQueue = [guildID];\n            this.guildSyncQueueLength = 1 + guildID.length + 3;\n        } else {\n            this.guildSyncQueue.push(guildID);\n            this.guildSyncQueueLength += guildID.length + 3;\n        }\n\t}\n\n\tcheckReady() {\n\t\tif (!this.readyTime) {\n            if(this.guildSyncQueue.length > 0) {\n            \tthis.sendWS({op: 12, d: this.guildSyncQueue});\n                this.guildSyncQueue = [];\n                this.guildSyncQueueLength = 1;\n                return;\n            }\n            if(this.unsyncedGuilds > 0) {\n                return;\n            }\n\t\t\tif (this.forceFetchQueue.length > 0) {\n\t\t\t\tthis.requestGuildMembers(this.forceFetchQueue);\n\t\t\t\tthis.forceFetchQueue = [];\n\t\t\t\tthis.forceFetchLength = 1;\n\t\t\t} else {\n\t\t\t\tfor (var key in this.forceFetchCount) {\n\t\t\t\t\tif (this.forceFetchCount.hasOwnProperty(key)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.readyTime = Date.now();\n\t\t\t\tthis.client.emit(\"ready\");\n\t\t\t}\n\t\t}\n\t}\n\n\trestartServerCreateTimeout() {\n\t\tif (this.guildCreateTimeout) {\n\t\t\tclearTimeout(this.guildCreateTimeout);\n\t\t\tthis.guildCreateTimeout = null;\n\t\t}\n\t\tif (!this.readyTime) {\n\t\t\tthis.guildCreateTimeout = setTimeout(() => {\n\t\t\t\tthis.checkReady();\n\t\t\t}, this.client.options.guildCreateTimeout);\n\t\t}\n\t}\n\n\t// def createServer\n\tcreateServer(name, region = \"london\") {\n\t\tname = this.resolver.resolveString(name);\n\n\t\treturn this.apiRequest('post', Endpoints.SERVERS, true, { name, region })\n\t\t.then(res => {\n\t\t\t// valid server, wait until it is cached\n\t\t\treturn waitFor(() => this.servers.get(\"id\", res.id));\n\t\t});\n\t}\n\n\t//def joinServer\n\tjoinServer(invite) {\n\t\tinvite = this.resolver.resolveInviteID(invite);\n\t\tif (!invite) {\n\t\t\treturn Promise.reject(new Error(\"Not a valid invite\"));\n\t\t}\n\n\t\treturn this.apiRequest(\"post\", Endpoints.INVITE(invite), true)\n\t\t.then(res => {\n\t\t\t// valid server, wait until it is received via ws and cached\n\t\t\treturn waitFor(() => this.servers.get(\"id\", res.guild.id));\n\t\t});\n\t}\n\n\t//def updateServer\n\tupdateServer(server, options) {\n\t\tvar server = this.resolver.resolveServer(server);\n\t\tif (!server) {\n\t\t\treturn Promise.reject(new Error(\"server did not resolve\"));\n\t\t}\n\n\t\tvar newOptions = {\n\t\t\tname: options.name || server.name,\n\t\t\tregion: options.region || server.region\n\t\t};\n\n\t\tif (options.icon) {\n\t\t\tnewOptions.icon = this.resolver.resolveToBase64(options.icon);\n\t\t}\n\t\tif (options.splash) {\n\t\t\tnewOptions.splash = this.resolver.resolveToBase64(options.splash);\n\t\t}\n\t\tif (options.owner) {\n\t\t\tvar user = this.resolver.resolveUser(options.owner);\n\t\t\tif (!user) {\n\t\t\t\treturn Promise.reject(new Error(\"owner could not be resolved\"));\n\t\t\t}\n\t\t\toptions.owner_id = user.id;\n\t\t}\n\t\tif (options.verificationLevel) {\n\t\t\toptions.verification_level = user.verificationLevel;\n\t\t}\n\t\tif (options.afkChannel) {\n\t\t\tvar channel = this.resolver.resolveUser(options.afkChannel);\n\t\t\tif (!channel) {\n\t\t\t\treturn Promise.reject(new Error(\"afkChannel could not be resolved\"));\n\t\t\t}\n\t\t\toptions.afk_channel_id = channel.id;\n\t\t}\n\t\tif (options.afkTimeout) {\n\t\t\toptions.afk_timeout = user.afkTimeout;\n\t\t}\n\n\t\treturn this.apiRequest(\"patch\", Endpoints.SERVER(server.id), true, options)\n\t\t.then(res => {\n\t\t\t// wait until the name and region are updated\n\t\t\treturn waitFor(() =>\n\t\t\t\t(this.servers.get(\"name\", res.name) ? ((this.servers.get(\"name\", res.name).region === res.region) ? this.servers.get(\"id\", res.id) : false) : false));\n\t\t});\n\t}\n\n\t//def leaveServer\n\tleaveServer(srv) {\n\t\tvar server = this.resolver.resolveServer(srv);\n\t\tif (!server) {\n\t\t\treturn Promise.reject(new Error(\"server did not resolve\"));\n\t\t}\n\n\t\treturn this.apiRequest(\"del\", Endpoints.ME_SERVER(server.id), true);\n\t}\n\n\t//def deleteServer\n\tdeleteServer(srv) {\n\t\tvar server = this.resolver.resolveServer(srv);\n\t\tif (!server) {\n\t\t\treturn Promise.reject(new Error(\"server did not resolve\"));\n\t\t}\n\n\t\treturn this.apiRequest(\"del\", Endpoints.SERVER(server.id), true);\n\t}\n\n\t// def loginWithToken\n\t// email and password are optional\n\tloginWithToken(token, email, password) {\n\t\tthis.setup();\n\n\t\tthis.state = ConnectionState.LOGGED_IN;\n\t\tthis.token = token;\n\t\tthis.email = email;\n\t\tthis.password = password;\n\n\t\tvar self = this;\n\t\treturn this.getGateway()\n\t\t.then(url => {\n\t\t\tself.token = self.client.options.bot && !self.token.startsWith(\"Bot \") ? `Bot ${self.token}` : self.token;\n\t\t\tself.createWS(url);\n\t\t\treturn self.token;\n\t\t});\n\t}\n\n\t// def login\n\tlogin(email, password) {\n\t\tvar client = this.client;\n\n\t\tif (!this.tokenCacher.done) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.login(email, password).then(resolve).catch(reject);\n\t\t\t\t}, 20);\n\t\t\t});\n\t\t} else {\n\t\t\tvar tk = this.tokenCacher.getToken(email, password);\n\t\t\tif ( tk ) {\n\t\t\t\tthis.client.emit(\"debug\", \"bypassed direct API login, used cached token\");\n\t\t\t\treturn this.loginWithToken(tk, email, password);\n\t\t\t}\n\t\t}\n\n\t\tif (this.state !== ConnectionState.DISCONNECTED && this.state !== ConnectionState.IDLE) {\n\t\t\treturn Promise.reject(new Error(\"already logging in/logged in/ready!\"));\n\t\t}\n\n\t\tthis.state = ConnectionState.LOGGING_IN;\n\n\t\treturn this.apiRequest(\"post\", Endpoints.LOGIN, false, {\n\t\t\temail,\n\t\t\tpassword\n\t\t})\n\t\t.then(res => {\n\t\t\tthis.client.emit(\"debug\", \"direct API login, cached token was unavailable\");\n\t\t\tvar token = res.token;\n\t\t\tthis.tokenCacher.setToken(email, password, token);\n\t\t\treturn this.loginWithToken(token, email, password);\n\t\t}, error => {\n\t\t\tthis.websocket = null;\n\t\t\tthrow error;\n\t\t})\n\t\t.catch(error => {\n\t\t\tthis.websocket = null;\n\t\t\tthis.state = ConnectionState.DISCONNECTED;\n\t\t\tclient.emit(\"disconnected\");\n\t\t\tthrow error;\n\t\t});\n\t}\n\n\t// def logout\n\tlogout() {\n\t\tif (this.state === ConnectionState.DISCONNECTED || this.state === ConnectionState.IDLE) {\n\t\t\treturn Promise.reject(new Error(\"Client is not logged in!\"));\n\t\t}\n\n\t\tvar disconnect = () => {\n\t\t\tif (this.websocket) {\n\t\t\t\tthis.websocket.close(1000);\n\t\t\t\tthis.websocket = null;\n\t\t\t}\n\t\t\tthis.token = null;\n\t\t\tthis.email = null;\n\t\t\tthis.password = null;\n\t\t\tthis.state = ConnectionState.DISCONNECTED;\n\t\t\treturn Promise.resolve();\n\t\t};\n\n\t\tif(!this.user.bot) {\n\t\t\treturn this.apiRequest(\"post\", Endpoints.LOGOUT, true)\n\t\t\t.then(disconnect);\n\t\t} else {\n\t\t\treturn disconnect();\n\t\t}\n\t}\n\n\t// def startPM\n\tstartPM(resUser) {\n\t\tvar user = this.resolver.resolveUser(resUser);\n\t\tif (!user) {\n\t\t\treturn Promise.reject(new Error(\"Unable to resolve resUser to a User\"));\n\t\t}\n\t\t\t\t// start the PM\n\t\treturn this.apiRequest(\"post\", Endpoints.ME_CHANNELS, true, {\n\t\t\trecipient_id: user.id\n\t\t})\n\t\t.then(res => {\n\t\t\treturn this.private_channels.add(new PMChannel(res, this.client));\n\t\t});\n\t}\n\n\t// def getGateway\n\tgetGateway() {\n\t\tif (this.gatewayURL) {\n\t\t\treturn Promise.resolve(this.gatewayURL);\n\t\t}\n\t\treturn this.apiRequest(\"get\", Endpoints.GATEWAY, true)\n\t\t.then(res => this.gatewayURL = res.url);\n\t}\n\n\t// def sendMessage\n\tsendMessage(where, _content, options = {}) {\n\t\tif (options.file) {\n\t\t\tif (typeof options.file !== \"object\") {\n\t\t\t\toptions.file = {\n\t\t\t\t\tfile: options.file\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (!options.file.name) {\n\t\t\t\tif (options.file.file instanceof String || typeof options.file.file === \"string\") {\n\t\t\t\t\toptions.file.name = require(\"path\").basename(options.file.file);\n\t\t\t\t} else if (options.file.file.path) {\n\t\t\t\t\t// fs.createReadStream()'s have .path that give the path. Not sure about other streams though.\n\t\t\t\t\toptions.file.name = require(\"path\").basename(options.file.file.path);\n\t\t\t\t} else {\n\t\t\t\t\toptions.file.name = \"default.png\"; // Just have to go with default filenames.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.resolver.resolveChannel(where)\n\t\t.then(destination => {\n\t\t\tvar content = this.resolver.resolveString(_content);\n\n\t\t\tif (this.client.options.disableEveryone || options.disableEveryone) {\n\t\t\t\tcontent = content.replace(/(@)(everyone|here)/g, '$1\\u200b$2');\n\t\t\t}\n\n\t\t\tif (options.file) {\n\t\t\t\treturn this.resolver.resolveFile(options.file.file)\n\t\t\t\t.then(file =>\n\t\t\t\t\tthis.apiRequest(\"post\", Endpoints.CHANNEL_MESSAGES(destination.id), true, {\n\t\t\t\t\t\tcontent: content,\n\t\t\t\t\t\ttts: options.tts,\n\t\t\t\t\t\tnonce: options.nonce\n\t\t\t\t\t}, {\n\t\t\t\t\t\tname: options.file.name,\n\t\t\t\t\t\tfile: file\n\t\t\t\t\t}).then(res => destination.messages.add(new Message(res, destination, this.client)))\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\treturn this.apiRequest(\"post\", Endpoints.CHANNEL_MESSAGES(destination.id), true, {\n\t\t\t\t\tcontent: content,\n\t\t\t\t\ttts: options.tts,\n\t\t\t\t\tnonce: options.nonce\n\t\t\t\t})\n\t\t\t\t.then(res => destination.messages.add(new Message(res, destination, this.client)));\n\t\t\t}\n\t\t});\n\n\t}\n\n\t// def sendFile\n\tsendFile(where, _file, name, content) {\n\t\tif (!name) {\n\t\t\tif (_file instanceof String || typeof _file === \"string\") {\n\t\t\t\tname = require(\"path\").basename(_file);\n\t\t\t} else if (_file && _file.path) {\n\t\t\t\t// fs.createReadStream()'s have .path that give the path. Not sure about other streams though.\n\t\t\t\tname = require(\"path\").basename(_file.path);\n\t\t\t} else {\n\t\t\t\tname = \"default.png\"; // Just have to go with default filenames.\n\t\t\t}\n\t\t}\n\n\t\tif (content) {\n\t\t\tcontent = {\n\t\t\t\tcontent: this.resolver.resolveString(content)\n\t\t\t};\n\t\t\tif (this.client.options.disableEveryone) {\n\t\t\t\tcontent.content = content.content.replace(/(@)(everyone|here)/g, '$1\\u200b$2');\n\t\t\t}\n\t\t}\n\n\t\treturn this.resolver.resolveChannel(where)\n\t\t.then(channel =>\n\t\t\tthis.resolver.resolveFile(_file)\n\t\t\t.then(file =>\n\t\t\t\tthis.apiRequest(\"post\", Endpoints.CHANNEL_MESSAGES(channel.id), true, content, {\n\t\t\t\t\tname,\n\t\t\t\t\tfile\n\t\t\t\t}).then(res => channel.messages.add(new Message(res, channel, this.client)))\n\t\t\t)\n\t\t);\n\t}\n\n\t// def deleteMessage\n\tdeleteMessage(_message, options = {}) {\n\n\t\tvar message = this.resolver.resolveMessage(_message);\n\t\tif (!message) {\n\t\t\treturn Promise.reject(new Error(\"Supplied message did not resolve to a message!\"));\n\t\t}\n\n\t\tvar chain = options.wait ? delay(options.wait) : Promise.resolve();\n\t\treturn chain.then(() =>\n\t\t\tthis.apiRequest(\"del\", Endpoints.CHANNEL_MESSAGE(message.channel.id, message.id), true)\n\t\t)\n\t\t.then(() => message.channel.messages.remove(message));\n\t}\n\n\t// def deleteMessages\n\tdeleteMessages(_messages) {\n\t\tif (!_messages instanceof Array)\n\t\t\treturn Promise.reject(new Error(\"Messages provided must be in an array\"));\n\t\tif (_messages.length < 1)\n\t\t\treturn Promise.reject(new Error(\"You must provide at least one message to delete\"));\n\t\telse if (_messages.length === 1)\n\t\t\treturn this.deleteMessage(_messages[0]);\n\n\n\t\tvar messages = [];\n\t\tvar channel;\n\t\tfor (var _message of _messages) {\n\t\t\tvar message = this.resolver.resolveMessage(_message);\n\t\t\tif (!message)\n\t\t\t\treturn Promise.reject(new Error(\"Something other than a message could not be resolved in the array...\"));\n\t\t\tif (!message.server)\n\t\t\t\treturn Promise.reject(new Error(\"You can only bulk delete messages on guild channels\"));\n\n\t\t\t// ensure same channel\n\t\t\tif (!channel) {\n\t\t\t\tchannel = message.channel;\n\t\t\t} else {\n\t\t\t\tif (message.channel.id !== channel.id)\n\t\t\t\t\treturn Promise.reject(new Error(\"You can only bulk delete messages from the same channel at one time...\"));\n\t\t\t}\n\n\t\t\tmessages.push(message);\n\t\t}\n\n\t\treturn this.apiRequest(\"post\", `${Endpoints.CHANNEL_MESSAGES(channel.id)}/bulk_delete`, true, {\n\t\t\tmessages: messages.map(m => m.id)\n\t\t})\n\t\t.then(() => messages.forEach(m => channel.messages.remove(m)));\n\t}\n\n\t// def updateMessage\n\tupdateMessage(msg, _content, options = {}) {\n\n\t\tvar message = this.resolver.resolveMessage(msg);\n\n\t\tif (!message) {\n\t\t\treturn Promise.reject(new Error(\"Supplied message did not resolve to a message!\"));\n\t\t}\n\n\t\tvar content = this.resolver.resolveString(_content);\n\n\t\treturn this.apiRequest(\n\t\t\t\"patch\",\n\t\t\tEndpoints.CHANNEL_MESSAGE(message.channel.id, message.id),\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\tcontent: content,\n\t\t\t\ttts: options.tts\n\t\t\t}\n\t\t)\n\t\t.then(res => message.channel.messages.update(\n\t\t\tmessage,\n\t\t\tnew Message(res, message.channel, this.client)\n\t\t));\n\t}\n\n\t// def getChannelLogs\n\tgetChannelLogs(_channel, limit = 50, options = {}) {\n\t\treturn this.resolver.resolveChannel(_channel)\n\t\t.then(channel => {\n\t\t\tvar qsObject = {limit};\n\t\t\tif (options.before) {\n\t\t\t\tconst res = this.resolver.resolveMessage(options.before);\n\t\t\t\tif (res) {\n\t\t\t\t\tqsObject.before = res.id;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (options.after) {\n\t\t\t\tconst res = this.resolver.resolveMessage(options.after);\n\t\t\t\tif (res) {\n\t\t\t\t\tqsObject.after = res.id;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (options.around) {\n\t\t\t\tconst res = this.resolver.resolveMessage(options.around);\n\t\t\t\tif (res) {\n\t\t\t\t\tqsObject.around = res.id\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.apiRequest(\n\t\t\t\t\"get\",\n\t\t\t\t`${Endpoints.CHANNEL_MESSAGES(channel.id)}?${qs.stringify(qsObject)}`,\n\t\t\t\ttrue\n\t\t\t)\n\t\t\t.then(res => res.map(\n\t\t\t\tmsg => channel.messages.add(new Message(msg, channel, this.client))\n\t\t\t));\n\t\t});\n\t}\n\n\t// def getMessage\n\tgetMessage(_channel, messageID) {\n\t\treturn this.resolver.resolveChannel(_channel)\n\t\t.then(channel => {\n\t\t\tif(!this.user.bot) {\n\t\t\t\treturn Promise.reject(new Error(\"Only OAuth bot accounts can use this function\"));\n\t\t\t}\n\n\t\t\tif(!(channel instanceof TextChannel || channel instanceof PMChannel)) {\n\t\t\t\treturn Promise.reject(new Error(\"Provided channel is not a Text or PMChannel\"));\n\t\t\t}\n\n\t\t\tvar msg = channel.messages.get(\"id\", messageID);\n\t\t\tif(msg) {\n\t\t\t\treturn Promise.resolve(msg);\n\t\t\t}\n\n\t\t\treturn this.apiRequest(\n\t\t\t\t\"get\",\n\t\t\t\t`${Endpoints.CHANNEL_MESSAGES(channel.id)}/${messageID}`,\n\t\t\t\ttrue\n\t\t\t)\n\t\t\t.then(res => channel.messages.add(\n\t\t\t\tnew Message(res, channel, this.client)\n\t\t\t));\n\t\t});\n\t}\n\n\t// def pinMessage\n\tpinMessage(msg) {\n\t\tvar message = this.resolver.resolveMessage(msg);\n\n\t\tif(!message) {\n\t\t\treturn Promise.reject(new Error(\"Supplied message did not resolve to a message\"));\n\t\t}\n\n\t\treturn this.apiRequest(\n\t\t\t\"put\",\n\t\t\t`${Endpoints.CHANNEL_PIN(msg.channel.id, msg.id)}`,\n\t\t\ttrue\n\t\t);\n\t}\n\n\t// def unpinMessage\n\tunpinMessage(msg) {\n\t\tvar message = this.resolver.resolveMessage(msg);\n\n\t\tif(!message) {\n\t\t\treturn Promise.reject(new Error(\"Supplied message did not resolve to a message\"));\n\t\t}\n\n\t\tif(!message.pinned) {\n\t\t\treturn Promise.reject(new Error(\"Supplied message is not pinned\"));\n\t\t}\n\n\t\treturn this.apiRequest(\n\t\t\t\"del\",\n\t\t\t`${Endpoints.CHANNEL_PIN(msg.channel.id, msg.id)}`,\n\t\t\ttrue\n\t\t);\n\t}\n\n\t// def getPinnedMessages\n\tgetPinnedMessages(_channel) {\n\t\treturn this.resolver.resolveChannel(_channel)\n\t\t.then(channel => {\n\t\t\treturn this.apiRequest(\n\t\t\t\t\"get\",\n\t\t\t\t`${Endpoints.CHANNEL_PINS(channel.id)}`,\n\t\t\t\ttrue\n\t\t\t)\n\t\t\t.then(res => res.map(\n\t\t\t\tmsg => channel.messages.add(new Message(msg, channel, this.client))\n\t\t\t));\n\t\t});\n\t}\n\n\t// def getBans\n\tgetBans(server) {\n\t\tserver = this.resolver.resolveServer(server);\n\n\t\treturn this.apiRequest(\"get\", Endpoints.SERVER_BANS(server.id), true)\n\t\t\t.then(res => res.map(\n\t\t\t\tban => this.users.add(new User(ban.user, this.client))\n\t\t\t));\n\t}\n\n\t// def createChannel\n\tcreateChannel(server, name, type = 0) {\n\n\t\tserver = this.resolver.resolveServer(server);\n\n\t\treturn this.apiRequest(\"post\", Endpoints.SERVER_CHANNELS(server.id), true, {\n\t\t\tname,\n\t\t\ttype\n\t\t})\n\t\t.then(res => {\n\t\t\tvar channel;\n\t\t\tif (res.type === 0) {\n\t\t\t\tchannel = new TextChannel(res, this.client, server);\n\t\t\t} else {\n\t\t\t\tchannel = new VoiceChannel(res, this.client, server);\n\t\t\t}\n\t\t\treturn server.channels.add(this.channels.add(channel));\n\t\t});\n\t}\n\n\t// def deleteChannel\n\tdeleteChannel(_channel) {\n\n\t\treturn this.resolver.resolveChannel(_channel)\n\t\t.then(channel =>\n\t\t\tthis.apiRequest(\"del\", Endpoints.CHANNEL(channel.id), true)\n\t\t\t.then(() => {\n\t\t\t\tif(channel.server) {\n\t\t\t\t\tchannel.server.channels.remove(channel);\n\t\t\t\t\tthis.channels.remove(channel);\n\t\t\t\t} else {\n\t\t\t\t\tthis.private_channels.remove(channel);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\t// def banMember\n\tbanMember(user, server, length = 1) {\n\t\tlet resolvedUser = this.resolver.resolveUser(user);\n\t\tserver = this.resolver.resolveServer(server);\n\n\t\tif (resolvedUser === null && typeof user === \"string\") {\n\t\t\tuser = {id: user};\n\t\t} else {\n\t\t\tuser = resolvedUser;\n\t\t}\n\n\t\treturn this.apiRequest(\n\t\t\t\"put\",\n\t\t\t`${Endpoints.SERVER_BANS(server.id)}/${user.id}?delete-message-days=${length}`,\n\t\t\ttrue\n\t\t);\n\t}\n\n\t// def unbanMember\n\tunbanMember(user, server) {\n\n\t\tserver = this.resolver.resolveServer(server);\n\t\tlet resolvedUser = this.resolver.resolveUser(user);\n\n    if (resolvedUser === null && typeof user === \"string\") {\n      user = {id: user};\n    } else {\n      user = resolvedUser;\n    }\n\n\t\treturn this.apiRequest(\"del\", `${Endpoints.SERVER_BANS(server.id)}/${user.id}`, true)\n\t}\n\n\t// def kickMember\n\tkickMember(user, server) {\n\t\tuser = this.resolver.resolveUser(user);\n\t\tserver = this.resolver.resolveServer(server);\n\n\t\treturn this.apiRequest(\"del\", `${Endpoints.SERVER_MEMBERS(server.id) }/${user.id}`, true);\n\t}\n\n\t// def moveMember\n\tmoveMember(user, channel) {\n\t\tuser = this.resolver.resolveUser(user);\n\t\treturn this.resolver.resolveChannel(channel).then(channel => {\n\t\t\tvar server = channel.server;\n\n\t\t\t// Make sure `channel` is a voice channel\n\t\t\tif (channel.type !== 2) {\n\t\t\t\tthrow new Error(\"Can't moveMember into a non-voice channel\");\n\t\t\t} else {\n\t\t\t\treturn this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, { channel_id: channel.id })\n\t\t\t\t.then(res => {\n\t\t\t\t\tuser.voiceChannel = channel;\n\t\t\t\t\treturn res;\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t// def muteMember\n\tmuteMember(user, server) {\n\t\tuser = this.resolver.resolveUser(user);\n\t\tserver = this.resolver.resolveServer(server);\n\t\treturn this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, { mute: true });\n\t}\n\n\t// def unmuteMember\n\tunmuteMember(user, server) {\n\t\tuser = this.resolver.resolveUser(user);\n\t\tserver = this.resolver.resolveServer(server);\n\t\treturn this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, { mute: false });\n\t}\n\n\t// def deafenMember\n\tdeafenMember(user, server) {\n\t\tuser = this.resolver.resolveUser(user);\n\t\tserver = this.resolver.resolveServer(server);\n\t\treturn this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, { deaf: true });\n\t}\n\n\t// def undeafenMember\n\tundeafenMember(user, server) {\n\t\tuser = this.resolver.resolveUser(user);\n\t\tserver = this.resolver.resolveServer(server);\n\t\treturn this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, { deaf: false });\n\t}\n\n\t// def setNickname\n\tsetNickname(server, nick, user) {\n\t\tnick = nick || \"\";\n\t\tuser = this.resolver.resolveUser(user);\n\t\tserver = this.resolver.resolveServer(server);\n\t\treturn this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id === this.user.id ? \"@me/nick\" : user.id}`, true, { nick: nick });\n\t}\n\n\t//def setNote\n\tsetNote(user, note) {\n\t\tuser = this.resolver.resolveUser(user);\n\t\tnote = note || \"\";\n\n\t\tif(!user) {\n\t\t\treturn Promise.reject(new Error(\"Failed to resolve user\"));\n\t\t}\n\n\t\treturn this.apiRequest(\"put\", `${Endpoints.ME_NOTES}/${user.id}`, true, { note: note });\n\t}\n\n\t// def createRole\n\tcreateRole(server, data) {\n\t\tserver = this.resolver.resolveServer(server);\n\n\t\treturn this.apiRequest(\"post\", Endpoints.SERVER_ROLES(server.id), true)\n\t\t.then(res => {\n\t\t\tvar role = server.roles.add(new Role(res, server, this.client));\n\n\t\t\tif (data) {\n\t\t\t\treturn this.updateRole(role, data);\n\t\t\t}\n\t\t\treturn role;\n\t\t});\n\t}\n\t// def updateRole\n\tupdateRole(role, data) {\n\n\t\trole = this.resolver.resolveRole(role);\n\t\tvar server = this.resolver.resolveServer(role.server);\n\n\t\tvar newData = {\n\t\t\tcolor: \"color\" in data ? data.color : role.color,\n\t\t\thoist: \"hoist\" in data ? data.hoist : role.hoist,\n\t\t\tname: \"name\" in data ? data.name : role.name,\n\t\t\tposition: \"position\" in data ? data.position : role.position,\n\t\t\tpermissions: \"permissions\" in data ? data.permissions : role.permissions,\n\t\t\tmentionable: \"mentionable\" in data ? data.mentionable : role.mentionable\n\t\t};\n\n\t\tif (data.permissions) {\n\t\t\tnewData.permissions = 0;\n\t\t\tfor (var perm of data.permissions) {\n\t\t\t\tif (perm instanceof String || typeof perm === \"string\") {\n\t\t\t\t\tnewData.permissions |= (Permissions[perm] || 0);\n\t\t\t\t} else {\n\t\t\t\t\tnewData.permissions |= perm;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.apiRequest(\"patch\", `${Endpoints.SERVER_ROLES(server.id)}/${role.id}`, true, newData)\n\t\t.then(res => {\n\t\t\treturn server.roles.update(role, new Role(res, server, this.client));\n\t\t});\n\t}\n\n\t// def deleteRole\n\tdeleteRole(role) {\n\t\tif (role.server.id === role.id) {\n\t\t\treturn Promise.reject(new Error(\"Stop trying to delete the @everyone role. It is futile\"));\n\t\t} else {\n\t\t\treturn this.apiRequest(\"del\", `${Endpoints.SERVER_ROLES(role.server.id)}/${role.id}`, true);\n\t\t}\n\t}\n\n\t//def addMemberToRole\n\taddMemberToRole(member, roles) {\n\t\tmember = this.resolver.resolveUser(member);\n\n\t\tif (!member) {\n\t\t\treturn Promise.reject(new Error(\"user not found\"));\n\t\t}\n\n\t\tif (!Array.isArray(roles) || roles.length === 0) {\n\t\t\troles = this.resolver.resolveRole(roles);\n\t\t\tif (roles) {\n\t\t\t\troles = [roles];\n\t\t\t} else {\n\t\t\t\treturn Promise.reject(new Error(\"invalid array of roles\"));\n\t\t\t}\n\t\t} else {\n\t\t\troles = roles.map(r => this.resolver.resolveRole(r));\n\t\t}\n\n\t\tif (roles.some(role => !role.server.memberMap[member.id])) {\n\t\t\treturn Promise.reject(new Error(\"Role does not exist on same server as member\"));\n\t\t}\n\n\t\tvar roleIDs = roles[0].server.memberMap[member.id].roles.map(r => (r && r.id) || r);\n\n\t\tfor (var i = 0; i < roles.length; i++) {\n\t\t\tif (!~roleIDs.indexOf(roles[i].id)) {\n\t\t\t\troleIDs.push(roles[i].id);\n\t\t\t};\n\t\t};\n\n\t\treturn this.apiRequest(\n\t\t\t\"patch\",\n\t\t\t`${Endpoints.SERVER_MEMBERS(roles[0].server.id)}/${member.id}`,\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\troles: roleIDs\n\t\t\t}\n\t\t);\n\t}\n\n\tmemberHasRole(member, role) {\n\t\trole = this.resolver.resolveRole(role);\n\t\tmember = this.resolver.resolveUser(member);\n\n\t\tif (!role) {\n\t\t\tthrow new Error(\"invalid role\");\n\t\t}\n\t\tif (!member) {\n\t\t\tthrow new Error(\"user not found\");\n\t\t}\n\n\t\tvar roledata = role.server.rolesOf(member);\n\t\tif (roledata) {\n\t\t\tfor (var r of roledata) {\n\t\t\t\tif (r.id == role.id) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t//def removeMemberFromRole\n\tremoveMemberFromRole(member, roles) {\n\t\tmember = this.resolver.resolveUser(member);\n\n\t\tif (!member) {\n\t\t\treturn Promise.reject(new Error(\"user not found\"));\n\t\t}\n\n\t\tif (!Array.isArray(roles) || roles.length === 0) {\n\t\t\troles = this.resolver.resolveRole(roles);\n\t\t\tif (roles) {\n\t\t\t\troles = [roles];\n\t\t\t} else {\n\t\t\t\treturn Promise.reject(new Error(\"invalid array of roles\"));\n\t\t\t}\n\t\t} else {\n\t\t\troles = roles.map(r => this.resolver.resolveRole(r));\n\t\t}\n\n\t\tvar roleIDs = roles[0].server.memberMap[member.id].roles.map(r => (r && r.id) || r);\n\n\t\tfor (var role of roles) {\n\t\t\tif (!role.server.memberMap[member.id]) {\n\t\t\t\treturn Promise.reject(new Error(\"member not in server\"));\n\t\t\t}\n\t\t\tfor (var item in roleIDs) {\n\t\t\t\tif (roleIDs[item] === role.id) {\n\t\t\t\t\troleIDs.splice(item, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.apiRequest(\n\t\t\t\"patch\",\n\t\t\t`${Endpoints.SERVER_MEMBERS(roles[0].server.id)}/${member.id}`,\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\troles: roleIDs\n\t\t\t}\n\t\t);\n\t}\n\n\t// def createInvite\n\tcreateInvite(chanServ, options) {\n\t\treturn this.resolver.resolveChannel(chanServ)\n\t\t.then(channel => {\n\t\t\tif (!options) {\n\t\t\t\toptions = {\n\t\t\t\t\tvalidate: null\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\toptions.max_age = options.maxAge || 0;\n\t\t\t\toptions.max_uses = options.maxUses || 0;\n\t\t\t\toptions.temporary = options.temporary || false;\n\t\t\t\toptions.xkcdpass = options.xkcd || false;\n\t\t\t}\n\n\t\t\treturn this.apiRequest(\"post\", Endpoints.CHANNEL_INVITES(channel.id), true, options)\n\t\t\t.then(res => new Invite(res, this.channels.get(\"id\", res.channel.id), this.client));\n\t\t});\n\t}\n\n\t//def deleteInvite\n\tdeleteInvite(invite) {\n\t\tinvite = this.resolver.resolveInviteID(invite);\n\t\tif (!invite) {\n\t\t\tthrow new Error(\"Not a valid invite\");\n\t\t}\n\t\treturn this.apiRequest(\"del\", Endpoints.INVITE(invite), true);\n\t}\n\n\t//def getInvite\n\tgetInvite(invite) {\n\t\tinvite = this.resolver.resolveInviteID(invite);\n\t\tif (!invite) {\n\t\t\treturn Promise.reject(new Error(\"Not a valid invite\"));\n\t\t}\n\n\t\treturn this.apiRequest(\"get\", Endpoints.INVITE(invite), true)\n\t\t.then(res => {\n\t\t\tif (!this.channels.has(\"id\", res.channel.id)) {\n\t\t\t\treturn new Invite(res, null, this.client);\n\t\t\t}\n\t\t\treturn this.apiRequest(\"post\", Endpoints.CHANNEL_INVITES(res.channel.id), true, {validate: invite})\n\t\t\t.then(res2 => new Invite(res2, this.channels.get(\"id\", res.channel.id), this.client));\n\t\t});\n\t}\n\n\t//def getInvites\n\tgetInvites(channel) {\n\t\tif (!(channel instanceof Channel)) {\n\t\t\tvar server = this.resolver.resolveServer(channel);\n\t\t\tif (server) {\n\t\t\t\treturn this.apiRequest(\"get\", Endpoints.SERVER_INVITES(server.id), true)\n\t\t\t\t.then(res => {\n\t\t\t\t\treturn res.map(data => new Invite(data, this.channels.get(\"id\", data.channel.id), this.client));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn this.resolver.resolveChannel(channel)\n\t\t.then(channel => {\n\t\t\treturn this.apiRequest(\"get\", Endpoints.CHANNEL_INVITES(channel.id), true)\n\t\t\t.then(res => {\n\t\t\t\treturn res.map(data => new Invite(data, this.channels.get(\"id\", data.channel.id), this.client));\n\t\t\t});\n\t\t});\n\t}\n\n\t//def overwritePermissions\n\toverwritePermissions(channel, role, updated) {\n\t\treturn this.resolver.resolveChannel(channel)\n\t\t.then(channel => {\n\t\t\tif (!channel instanceof ServerChannel) {\n\t\t\t\treturn Promise.reject(new Error(\"Not a server channel\"));\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tallow: 0,\n\t\t\t\tdeny: 0\n\t\t\t};\n\n\t\t\tif (role instanceof String || typeof role === \"string\") {\n\t\t\t\trole = this.resolver.resolveUser(role) || this.resolver.resolveRole(role);\n\t\t\t}\n\n\t\t\tif (role instanceof User) {\n\t\t\t\tdata.id = role.id;\n\t\t\t\tdata.type = \"member\";\n\t\t\t} else if (role instanceof Role) {\n\t\t\t\tdata.id = role.id;\n\t\t\t\tdata.type = \"role\";\n\t\t\t} else {\n\t\t\t\treturn Promise.reject(new Error(\"Role could not be resolved\"));\n\t\t\t}\n\n\t\t\tvar previousOverwrite = channel.permissionOverwrites.get(\"id\", data.id);\n\n\t\t\tif (previousOverwrite) {\n\t\t\t\tdata.allow |= previousOverwrite.allow;\n\t\t\t\tdata.deny |= previousOverwrite.deny;\n\t\t\t}\n\n\t\t\tfor (var perm in updated) {\n\t\t\t\tif (updated[perm] === true) {\n\t\t\t\t\tdata.allow |= (Permissions[perm] || 0);\n\t\t\t\t\tdata.deny &= ~(Permissions[perm] || 0);\n\t\t\t\t} else if (updated[perm] === false) {\n\t\t\t\t\tdata.allow &= ~(Permissions[perm] || 0);\n\t\t\t\t\tdata.deny |= (Permissions[perm] || 0);\n\t\t\t\t} else {\n\t\t\t\t\tdata.allow &= ~(Permissions[perm] || 0);\n\t\t\t\t\tdata.deny &= ~(Permissions[perm] || 0);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.apiRequest(\n\t\t\t\t\"put\",\n\t\t\t\t`${Endpoints.CHANNEL_PERMISSIONS(channel.id)}/${data.id}`,\n\t\t\t\ttrue,\n\t\t\t\tdata\n\t\t\t);\n\t\t});\n\t}\n\n\t//def setStatus\n\tsetStatus(idleStatus, game) {\n\n\t\tif (idleStatus === \"online\" || idleStatus === \"here\" || idleStatus === \"available\") {\n\t\t\tthis.idleStatus = null;\n\t\t}\n\t\telse if (idleStatus === \"idle\" || idleStatus === \"away\") {\n\t\t\tthis.idleStatus = Date.now();\n\t\t}\n\t\telse {\n\t\t\tthis.idleStatus = this.idleStatus || null; //undefined\n\t\t}\n\n\t\t// convert undefined and empty string to null\n\t\tif (typeof game === \"string\" && !game.length) game = null;\n\n\t\tthis.game = game === null ? null : !game ? this.game || null : typeof game === \"string\" ? {name: game} : game;\n\n\t\tvar packet = {\n\t\t\top: 3,\n\t\t\td: {\n\t\t\t\tidle_since: this.idleStatus,\n\t\t\t\tgame: this.game\n\t\t\t}\n\t\t};\n\n\t\tthis.sendWS(packet);\n\n\t\tthis.user.status = this.idleStatus ? \"idle\" : \"online\";\n\t\tthis.user.game = this.game;\n\n\t\treturn Promise.resolve();\n\n\t}\n\n\t//def sendTyping\n\tsendTyping(channel) {\n\t\treturn this.resolver.resolveChannel(channel).then(channel =>\n\t\t\tthis.apiRequest(\"post\", Endpoints.CHANNEL(channel.id) + \"/typing\", true)\n\t\t);\n\t}\n\n\t//def startTyping\n\tstartTyping(channel) {\n\t\treturn this.resolver.resolveChannel(channel)\n\t\t.then(channel => {\n\n\t\t\tif (this.intervals.typing[channel.id]) {\n\t\t\t\t// typing interval already exists, leave it alone\n\t\t\t\tthrow new Error(\"Already typing in that channel\");\n\t\t\t}\n\n\t\t\tthis.intervals.typing[channel.id] = setInterval(\n\t\t\t\t() => this.sendTyping(channel)\n\t\t\t\t.catch(error => this.client.emit(\"error\", error)),\n\t\t\t\t4000\n\t\t\t);\n\n\t\t\treturn this.sendTyping(channel);\n\t\t});\n\n\t}\n\n\t//def stopTyping\n\tstopTyping(channel) {\n\t\treturn this.resolver.resolveChannel(channel)\n\t\t.then(channel => {\n\n\t\t\tif (!this.intervals.typing[channel.id]) {\n\t\t\t\t// typing interval doesn\"t exist\n\t\t\t\tthrow new Error(\"Not typing in that channel\");\n\t\t\t}\n\n\t\t\tclearInterval(this.intervals.typing[channel.id]);\n\t\t\tthis.intervals.typing[channel.id] = false;\n\n\t\t});\n\t}\n\n\t//def updateDetails\n\tupdateDetails(data) {\n\t\tif (!this.user.bot && !(this.email || data.email)) {\n\t\t\tthrow new Error(\"Must provide email since a token was used to login\");\n\t\t}\n\n\t\tlet options = {};\n\n\t\tif (data.username) {\n\t\t\toptions.username = data.username;\n\t\t} else {\n\t\t\toptions.username = this.user.username;\n\t\t}\n\n\t\tif (data.avatar) {\n\t\t\toptions.avatar = this.resolver.resolveToBase64(data.avatar);\n\t\t}\n\n\t\tif (this.email || data.email) {\n\t\t\toptions.email = data.email || this.email;\n\t\t\toptions.new_password = data.newPassword || null;\n\t\t\toptions.password = data.password || this.password;\n\t\t}\n\n\t\treturn this.apiRequest(\"patch\", Endpoints.ME, true, options);\n\t}\n\n\t//def setAvatar\n\tsetAvatar(avatar) {\n\t\treturn this.updateDetails({avatar});\n\t}\n\n\t//def setUsername\n\tsetUsername(username) {\n\t\treturn this.updateDetails({username});\n\t}\n\n\t//def setChannelTopic\n\tsetChannelTopic(channel, topic = \"\") {\n\t\ttopic = topic || \"\";\n\n\t\treturn this.updateChannel(channel, {topic: topic});\n\t}\n\n\t//def setChannelName\n\tsetChannelName(channel, name) {\n\t\tname = name || \"unnamed-channel\";\n\n\t\treturn this.updateChannel(channel, {name: name});\n\t}\n\n\t//def setChannelPosition\n\tsetChannelPosition(channel, position) {\n\t\tposition = position || 0;\n\n\t\treturn this.updateChannel(channel, {position: position});\n\t}\n\n\t//def setChannelUserLimit\n\tsetChannelUserLimit(channel, limit) {\n\t\tlimit = limit || 0; // default 0 = no limit\n\n\t\treturn this.updateChannel(channel, {userLimit: limit})\n\t}\n\n\t//def setChannelBitrate\n\tsetChannelBitrate(channel, kbitrate) {\n\t\tkbitrate = kbitrate || 64; // default 64kbps\n\n\t\treturn this.updateChannel(channel, {bitrate: kbitrate});\n\t}\n\n\t//def updateChannel\n\tupdateChannel(channel, data) {\n\t\treturn this.resolver.resolveChannel(channel).then(channel => {\n\t\t\tif (!channel) {\n\t\t\t\treturn Promise.reject(new Error(\"Failed to resolve channel\"));\n\t\t\t}\n\n\t\t\tdata = {\n\t\t\t\tname: data.name || channel.name,\n\t\t\t\ttopic: data.topic || channel.topic,\n\t\t\t\tposition: (data.position ? data.position : channel.position),\n\t\t\t\tuser_limit: (data.userLimit ? data.userLimit : channel.userLimit),\n\t\t\t\tbitrate: (data.bitrate ? data.bitrate : channel.bitrate ? channel.bitrate : undefined)\n\t\t\t};\n\n\t\t\tif (data.position < 0) {\n\t\t\t\treturn Promise.reject(new Error(\"Position cannot be less than 0\"));\n\t\t\t}\n\n\t\t\tif (data.user_limit < 0 || data.user_limit > 99) {\n\t\t\t\treturn Promise.reject(new Error(\"User limit must be between 0-99\"));\n\t\t\t}\n\n\t\t\tif (data.kbitrate < 8 || data.kbitrate > 96) {\n\t\t\t\treturn Promise.reject(new Error(\"Bitrate must be between 8-96kbps\"));\n\t\t\t}\n\n\t\t\tif (data.bitrate) {\n\t\t\t\tdata.bitrate *= 1000; // convert to bits before sending\n\t\t\t}\n\n\t\t\treturn this.apiRequest(\"patch\", Endpoints.CHANNEL(channel.id), true, data)\n\t\t\t.then(res => {\n\t\t\t\tchannel.name = data.name;\n\t\t\t\tchannel.topic = data.topic;\n\t\t\t\tchannel.position = data.position;\n\t\t\t\tchannel.userLimit = data.user_limit;\n\t\t\t\tchannel.bitrate = Math.ceil(data.bitrate / 1000);\n\t\t\t\tchannel._bitrate = data.bitrate;\n\t\t\t});\n\t\t});\n\t}\n\n\t//def addFriend\n\taddFriend(user) {\n\t\tif (this.user.bot) return Promise.reject(new Error(\"user is a bot, bot's do not have friends support\"));\n\n\t\tvar id;\n\t\tif (user instanceof String || typeof user === \"string\")\n\t\t\tid = user;\n\t\telse if (user instanceof User) {\n\t\t\tuser = this.resolver.resolveUser(user);\n\t\t\tid = user.id\n\t\t} else {\n\t\t\tif (user.username && user.discriminator) // add by username and discriminator (pass in an object)\n\t\t\t\treturn this.apiRequest(\"put\", Endpoints.FRIENDS, true, user);\n\t\t\telse\n\t\t\t\treturn Promise.reject(\"invalid user\")\n\t\t}\n\n\t\treturn this.apiRequest(\"put\", `${Endpoints.FRIENDS}/${id}`, true, {});\n\t}\n\n\t//def removeFriend\n\tremoveFriend(user) {\n\t\tif (this.user.bot) return Promise.reject(new Error(\"user is a bot, bot's do not have friends support\"));\n\n\t\tuser = this.resolver.resolveUser(user);\n\n\t\treturn this.apiRequest(\"delete\", `${Endpoints.FRIENDS}/${user.id}`, true);\n\t}\n\n\tgetServerWebhooks(server) {\n\t\tserver = this.resolver.resolveServer(server);\n\n\t\tif (!server) {\n\t\t\treturn Promise.reject(new Error(\"Failed to resolve server\"));\n\t\t}\n\n\t\treturn this.apiRequest(\"get\", Endpoints.SERVER_WEBHOOKS(server.id), true)\n\t\t\t.then(res => res.map(\n\t\t\t\twebhook => {\n\t\t\t\t\tlet channel = this.channels.get(\"id\", webhook.channel_id);\n\t\t\t\t\treturn channel.webhooks.add(new Webhook(\n\t\t\t\t\t\twebhook,\n\t\t\t\t\t\tserver,\n\t\t\t\t\t\tchannel,\n\t\t\t\t\t\tthis.users.get(\"id\", webhook.user.id)\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t));\n\t}\n\n\tgetChannelWebhooks(channel) {\n\t\treturn this.resolver.resolveChannel(channel).then(channel => {\n\t\t\tif (!channel) {\n\t\t\t\treturn Promise.reject(new Error(\"Failed to resolve channel\"));\n\t\t\t}\n\n\t\t\treturn this.apiRequest(\"get\", Endpoints.CHANNEL_WEBHOOKS(channel.id), true)\n\t\t\t\t.then(res => res.map(\n\t\t\t\t\twebhook => channel.webhooks.add(new Webhook(\n\t\t\t\t\t\twebhook,\n\t\t\t\t\t\tthis.servers.get(\"id\", webhook.guild_id),\n\t\t\t\t\t\tchannel,\n\t\t\t\t\t\tthis.users.get(\"id\", webhook.user.id)\n\t\t\t\t\t))\n\t\t\t\t));\n\t\t})\n\t}\n\n\teditWebhook(webhook, options = {}) {\n\t\treturn this.resolver.resolveWebhook(webhook).then(webhook => {\n\t\t\tif (!webhook) {\n\t\t\t\treturn Promise.reject(new Error(\" Failed to resolve webhook\"))\n\t\t\t}\n\n\t\t\tif (options.hasOwnProperty(\"avatar\")) {\n\t\t\t\toptions.avatar = this.resolver.resolveToBase64(options.avatar);\n\t\t\t}\n\n\t\t\treturn this.apiRequest(\"patch\", Endpoints.WEBHOOK(webhook.id), true, options)\n\t\t\t\t.then(res => {\n\t\t\t\t\twebhook.name = res.name;\n\t\t\t\t\twebhook.avatar = res.hasOwnProperty('avatar') ? res.avatar : webhook.avatar;\n\t\t\t\t});\n\t\t})\n\t}\n\n\tcreateWebhook(channel, options = {}) {\n\t\treturn this.resolver.resolveChannel(channel)\n\t\t\t.then(destination => {\n\t\t\t\tif (!channel) {\n\t\t\t\t\treturn Promise.reject(new Error(\" Failed to resolve channel\"))\n\t\t\t\t}\n\n\t\t\t\tif (options.hasOwnProperty(\"avatar\")) {\n\t\t\t\t\toptions.avatar = this.resolver.resolveToBase64(options.avatar);\n\t\t\t\t}\n\n\t\t\t\treturn this.apiRequest(\"post\", Endpoints.CHANNEL_WEBHOOKS(destination.id), true, options)\n\t\t\t\t\t.then(webhook => channel.webhooks.add(new Webhook(\n\t\t\t\t\t\twebhook,\n\t\t\t\t\t\tthis.servers.get(\"id\", webhook.guild_id),\n\t\t\t\t\t\tchannel,\n\t\t\t\t\t\tthis.users.get(\"id\", webhook.user.id)\n\t\t\t\t\t)));\n\t\t\t});\n\t}\n\n\tdeleteWebhook(webhook) {\n\t\treturn this.resolver.resolveWebhook(webhook).then(webhook => {\n\t\t\tif (!webhook) {\n\t\t\t\treturn Promise.reject(new Error(\" Failed to resolve webhook\"))\n\t\t\t}\n\n\t\t\treturn this.apiRequest(\"delete\", Endpoints.WEBHOOK(webhook.id), true)\n\t\t\t\t.then(() => {\n\t\t\t\t\twebhook.channel.webhooks.remove(webhook);\n\t\t\t\t});\n\t\t})\n\t}\n\n\tsendWebhookMessage(webhook, _content, options = {}) {\n\t\treturn this.resolver.resolveWebhook(webhook)\n\t\t\t.then(destination => {\n\t\t\t\tvar content = this.resolver.resolveString(_content);\n\n\t\t\t\tif (this.client.options.disableEveryone || options.disableEveryone) {\n\t\t\t\t\tcontent = content.replace(/(@)(everyone|here)/g, '$1\\u200b$2');\n\t\t\t\t}\n\n\t\t\t\tif (!options.hasOwnProperty(\"username\")) {\n\t\t\t\t\toptions.username = this.user.username;\n\t\t\t\t}\n\n\t\t\t\tlet slack;\n\t\t\t\tif (options.hasOwnProperty(\"slack\")) {\n\t\t\t\t\tslack = options.slack;\n\t\t\t\t\tdelete options[\"slack\"];\n\t\t\t\t}\n\n\t\t\t\toptions.content = _content;\n\n\t\t\t\treturn this.apiRequest(\n\t\t\t\t\t\"post\",\n\t\t\t\t\t`${Endpoints.WEBHOOK_MESSAGE(destination.id, destination.token)}${slack ? \"/slack\" : \"\"}?wait=true`,\n\t\t\t\t\ttrue,\n\t\t\t\t\toptions\n\t\t\t\t)\n\t\t\t});\n\n\t}\n\n\t//def getOAuthApplication\n\tgetOAuthApplication(appID) {\n\t\tappID = appID || \"@me\";\n\t\treturn this.apiRequest(\"get\", Endpoints.OAUTH2_APPLICATION(appID), true);\n\t}\n\n\t//def ack\n\tack(msg) {\n\t\tmsg = this.resolver.resolveMessage(msg);\n\n\t\tif (!msg) {\n\t\t\tPromise.reject(new Error(\"Message does not exist\"));\n\t\t}\n\n\t\treturn this.apiRequest(\"post\", Endpoints.CHANNEL_MESSAGE(msg.channel.id, msg.id) + \"/ack\", true);\n\t}\n\n\tsendWS(object) {\n\t\tif (this.websocket) {\n\t\t\tthis.websocket.send(JSON.stringify(object));\n\t\t}\n\t}\n\n\tcreateWS(url) {\n\t\tif (this.websocket) {\n\t\t\treturn false;\n\t\t}\n\t\tif(!url.endsWith(\"/\")) {\n\t\t\turl += \"/\";\n\t\t}\n\t\turl += \"?encoding=json&v=\" + GATEWAY_VERSION;\n\n\t\tthis.websocket = new WebSocket(url);\n\n\t\tthis.websocket.onopen = () => {\n\t\t};\n\n\t\tthis.websocket.onclose = (event) => {\n\t\t\tthis.websocket = null;\n\t\t\tthis.state = ConnectionState.DISCONNECTED;\n\t\t\tif(event && event.code) {\n                this.client.emit(\"warn\", \"WS close: \" + event.code);\n                var err;\n                if(event.code === 4001) {\n                    err = new Error(\"Gateway received invalid OP code\");\n                } else if(event.code === 4005) {\n                    err = new Error(\"Gateway received invalid message\");\n                } else if(event.code === 4003) {\n                    err = new Error(\"Not authenticated\");\n                } else if(event.code === 4004) {\n                    err = new Error(\"Authentication failed\");\n                } else if(event.code === 4005) {\n                    err = new Error(\"Already authenticated\");\n                } if(event.code === 4006 || event.code === 4009) {\n                    err = new Error(\"Invalid session\");\n                } else if(event.code === 4007) {\n                    this.sequence = 0;\n                    err = new Error(\"Invalid sequence number\");\n                } else if(event.code === 4008) {\n                    err = new Error(\"Gateway connection was ratelimited\");\n                } else if(event.code === 4010) {\n                    err = new Error(\"Invalid shard key\");\n                }\n                if(err) {\n                \tthis.client.emit(\"error\", err);\n                }\n            }\n\t\t\tthis.disconnected(this.client.options.autoReconnect);\n\t\t};\n\n\t\tthis.websocket.onerror = e => {\n\t\t\tthis.client.emit(\"error\", e);\n\t\t\tthis.websocket = null;\n\t\t\tthis.state = ConnectionState.DISCONNECTED;\n\t\t\tthis.disconnected(this.client.options.autoReconnect);\n\t\t};\n\n\t\tthis.websocket.onmessage = e => {\n\t\t\tif (e.data instanceof Buffer) {\n\t\t\t\tif (!zlib) zlib = require(\"zlib\");\n\t\t\t\te.data = zlib.inflateSync(e.data).toString();\n\t\t\t}\n\n\t\t\tvar packet;\n\t\t\ttry {\n\t\t\t\tpacket = JSON.parse(e.data);\n\t\t\t} catch (e) {\n\t\t\t\tthis.client.emit(\"error\", e);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.client.emit(\"raw\", packet);\n\n\t\t\tif(packet.s) {\n                this.sequence = packet.s;\n            }\n\n\t\t\tswitch(packet.op) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.processPacket(packet);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tconsole.log(\"set it to true 1\");\n          this.heartbeatAcked = true;\n\t\t\t\t\tthis.heartbeat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 7:\n\t\t\t\t\tthis.disconnected(true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 9:\n\t\t\t\t\tthis.sessionID = null;\n\t\t\t\t\tthis.sequence = 0;\n\t\t\t\t\tthis.identify();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 10:\n\t\t\t\t\tif(this.sessionID) {\n\t\t\t\t\t\tthis.resume();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.identify();\n\t\t\t\t\t}\n\t\t\t\t\tconsole.log(\"set it to true 10 1\");\n\t\t\t\t\tthis.heartbeatAcked = true; // start off without assuming we didn't get a missed heartbeat acknowledge right away;\n\t\t\t\t\tthis.heartbeat();\n\t\t\t\t\tconsole.log(\"set it to true 10 2\");\n\t\t\t\t\tthis.heartbeatAcked = true;\n\t\t\t\t\tthis.intervals.kai = setInterval(() => this.heartbeat(), packet.d.heartbeat_interval);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 11:\n\t\t\t\t\tconsole.log(\"set heartbeatAcked to true because heartbeat was acked.\");\n\t\t\t\t\tthis.heartbeatAcked = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.client.emit(\"unknown\", packet);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\t}\n\n\tprocessPacket(packet) {\n\t\tvar client = this.client;\n\t\tvar data = packet.d;\n\t\tswitch (packet.t) {\n\t\t\tcase PacketType.RESUME:\n\t\t\tcase PacketType.READY:\n\t\t\t\tthis.autoReconnectInterval = 1000;\n\t\t\t\tthis.state = ConnectionState.READY;\n\n\t\t\t\tif(packet.t === PacketType.RESUME) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tthis.sessionID = data.session_id;\n\t\t\t\tvar startTime = Date.now();\n\n\t\t\t\tthis.user = this.users.add(new User(data.user, client));\n\n\t\t\t\tthis.forceFetchCount = {};\n\t\t\t\tthis.forceFetchQueue = [];\n\t\t\t\tthis.forceFetchLength = 1;\n\n\t\t\t\tdata.guilds.forEach(server => {\n\t\t\t\t\tif (!server.unavailable) {\n\t\t\t\t\t\tserver = this.servers.add(new Server(server, client));\n\t                    if(client.options.bot === false) {\n\t                        this.unsyncedGuilds++;\n\t                        this.syncGuild(server.id);\n\t                    }\n\t\t\t\t\t\tif (this.client.options.forceFetchUsers && server.members && server.members.length < server.memberCount) {\n\t\t\t\t\t\t\tthis.getGuildMembers(server.id, Math.ceil(server.memberCount / 1000));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclient.emit(\"debug\", \"server \" + server.id + \" was unavailable, could not create (ready)\");\n\t\t\t\t\t\tthis.unavailableServers.add(server);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tdata.private_channels.forEach(pm => {\n\t\t\t\t\tthis.private_channels.add(new PMChannel(pm, client));\n\t\t\t\t});\n\t\t\t\tif (!data.user.bot) { // bots dont have friends\n\t\t\t\t\tdata.relationships.forEach(friend => {\n\t\t\t\t\t\tif (friend.type === 1) { // is a friend\n\t\t\t\t\t\t\tthis.friends.add(new User(friend.user, client));\n\t\t\t\t\t\t} else if (friend.type === 2) { // incoming friend requests\n\t\t\t\t\t\t\tthis.blocked_users.add(new User(friend.user, client));\n\t\t\t\t\t\t} else if (friend.type === 3) { // incoming friend requests\n\t\t\t\t\t\t\tthis.incoming_friend_requests.add(new User(friend.user, client));\n\t\t\t\t\t\t} else if (friend.type === 4) { // outgoing friend requests\n\t\t\t\t\t\t\tthis.outgoing_friend_requests.add(new User(friend.user, client));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclient.emit(\"warn\", \"unknown friend type \" + friend.type);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis.friends = null;\n\t\t\t\t\tthis.blocked_users = null;\n\t\t\t\t\tthis.incoming_friend_requests = null;\n\t\t\t\t\tthis.outgoing_friend_requests = null;\n\t\t\t\t}\n\n\t\t\t\t// add notes to users\n\t\t\t\tif(data.notes) {\n\t\t\t\t\tfor(note in data.notes) {\n\t\t\t\t\t\tvar user = this.users.get(\"id\", note);\n\t\t\t\t\t\tif(user) {\n\t\t\t\t\t\t\tvar newUser = user;\n\t\t\t\t\t\t\tnewUser.note = data.notes[note];\n\n\t\t\t\t\t\t\tthis.users.update(user, newUser);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclient.emit(\"warn\", \"note in ready packet but user not cached\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tclient.emit(\"debug\", `ready packet took ${Date.now() - startTime}ms to process`);\n\t\t\t\tclient.emit(\"debug\", `ready with ${this.servers.length} servers, ${this.unavailableServers.length} unavailable servers, ${this.channels.length} channels and ${this.users.length} users cached.`);\n\n\t\t\t\tthis.restartServerCreateTimeout();\n\n\t\t\t\tbreak;\n\n\t\t\tcase PacketType.MESSAGE_CREATE:\n\t\t\t\t// format: https://discordapi.readthedocs.org/en/latest/reference/channels/messages.html#message-format\n\t\t\t\tvar channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n\t\t\t\tif (channel) {\n\t\t\t\t\tvar msg = channel.messages.add(new Message(data, channel, client));\n\t\t\t\t\tchannel.lastMessageID = msg.id;\n\n\t\t\t\t\tif (this.messageAwaits[channel.id + msg.author.id]) {\n\t\t\t\t\t\tthis.messageAwaits[channel.id + msg.author.id].map( fn => fn(msg) );\n\t\t\t\t\t\tthis.messageAwaits[channel.id + msg.author.id] = null;\n\t\t\t\t\t\tclient.emit(\"message\", msg, true); //2nd param is isAwaitedMessage\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclient.emit(\"message\", msg);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"message created but channel is not cached\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PacketType.MESSAGE_DELETE:\n\t\t\t\tvar channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n\t\t\t\tif (channel) {\n\t\t\t\t\t// potentially blank\n\t\t\t\t\tvar msg = channel.messages.get(\"id\", data.id);\n\t\t\t\t\tclient.emit(\"messageDeleted\", msg, channel);\n\t\t\t\t\tif (msg) {\n\t\t\t\t\t\tchannel.messages.remove(msg);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclient.emit(\"debug\", \"message was deleted but message is not cached\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"message was deleted but channel is not cached\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PacketType.MESSAGE_DELETE_BULK:\n\t\t\t\tvar channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n\t\t\t\tif (channel) {\n\t\t\t\t\tdata.ids.forEach((id) => {\n\t\t\t\t\t\t// potentially blank\n\t\t\t\t\t\tvar msg = channel.messages.get(\"id\", id);\n\t\t\t\t\t\tclient.emit(\"messageDeleted\", msg, channel);\n\t\t\t\t\t\tif (msg) {\n\t\t\t\t\t\t\tchannel.messages.remove(msg);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclient.emit(\"debug\", \"message was deleted but message is not cached\");\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"message was deleted but channel is not cached\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PacketType.MESSAGE_UPDATE:\n\t\t\t\t// format https://discordapi.readthedocs.org/en/latest/reference/channels/messages.html#message-format\n\t\t\t\tvar channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n\t\t\t\tif (channel) {\n\t\t\t\t\t// potentially blank\n\t\t\t\t\tvar msg = channel.messages.get(\"id\", data.id);\n\n\t\t\t\t\tif (msg) {\n\t\t\t\t\t\t// old message exists\n\t\t\t\t\t\tdata.nonce = data.nonce !== undefined ? data.nonce : msg.nonce;\n\t\t\t\t\t\tdata.attachments = data.attachments !== undefined ? data.attachments : msg.attachments;\n\t\t\t\t\t\tdata.tts = data.tts !== undefined ? data.tts : msg.tts;\n\t\t\t\t\t\tdata.embeds = data.embeds !== undefined ? data.embeds : msg.embeds;\n\t\t\t\t\t\tdata.timestamp = data.timestamp !== undefined ? data.timestamp : msg.timestamp;\n\t\t\t\t\t\tdata.mention_everyone = data.mention_everyone !== undefined ? data.mention_everyone : msg.everyoneMentioned;\n\t\t\t\t\t\tdata.content = data.content !== undefined ? data.content : msg.content;\n\t\t\t\t\t\tdata.mentions = data.mentions !== undefined ? data.mentions : msg.mentions;\n\t\t\t\t\t\tdata.author = data.author !== undefined ? data.author : msg.author;\n\t\t\t\t\t\tmsg = new Message(msg, channel, client);\n\t\t\t\t\t} else if (!data.author || !data.content) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tvar nmsg = new Message(data, channel, client);\n\t\t\t\t\tclient.emit(\"messageUpdated\", msg, nmsg);\n\t\t\t\t\tif (msg) {\n\t\t\t\t\t\tchannel.messages.update(msg, nmsg);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"message was updated but channel is not cached\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PacketType.SERVER_CREATE:\n\t\t\t\tvar server = this.servers.get(\"id\", data.id);\n\t\t\t\tif (!server) {\n\t\t\t\t\tif (!data.unavailable) {\n\t\t\t\t\t\tserver = this.servers.add(new Server(data, client));\n\t                    if(client.options.bot === false) {\n\t                        this.unsyncedGuilds++;\n\t                        this.syncGuild(server.id);\n\t                    }\n\t\t\t\t\t\tif (client.readyTime) {\n\t\t\t\t\t\t\tclient.emit(\"serverCreated\", server);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.client.options.forceFetchUsers && server.large && server.members.length < server.memberCount) {\n\t\t\t\t\t\t\tthis.getGuildMembers(server.id, Math.ceil(server.memberCount / 1000));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar unavailable = this.unavailableServers.get(\"id\", server.id);\n\t\t\t\t\t\tif (unavailable) {\n\t\t\t\t\t\t\tthis.unavailableServers.remove(unavailable);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.restartServerCreateTimeout();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclient.emit(\"debug\", \"server was unavailable, could not create\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PacketType.SERVER_DELETE:\n\t\t\t\tvar server = this.servers.get(\"id\", data.id);\n\t\t\t\tif (server) {\n\t\t\t\t\tif (!data.unavailable) {\n\t\t\t\t\t\tclient.emit(\"serverDeleted\", server);\n\n\t\t\t\t\t\tfor (var channel of server.channels) {\n\t\t\t\t\t\t\tthis.channels.remove(channel);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.servers.remove(server);\n\n\t\t\t\t\t\tfor (var user of server.members) {\n\t\t\t\t\t\t\tvar found = false;\n\t\t\t\t\t\t\tfor (var s of this.servers) {\n\t\t\t\t\t\t\t\tif (s.members.get(\"id\", user.id)) {\n\t\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!found) {\n\t\t\t\t\t\t\t\tthis.users.remove(user);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclient.emit(\"debug\", \"server was unavailable, could not update\");\n\t\t\t\t\t}\n                \tthis.buckets[\"bot:msg:guild:\" + packet.d.id] =\n\t                    this.buckets[\"dmsg:\" + packet.d.id] =\n\t                    this.buckets[\"bdmsg:\" + packet.d.id] =\n\t                    this.buckets[\"guild_member:\" + packet.d.id] =\n\t                    this.buckets[\"guild_member_nick:\" + packet.d.id] = undefined;\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"server was deleted but it was not in the cache\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PacketType.SERVER_UPDATE:\n\t\t\t\tvar server = this.servers.get(\"id\", data.id);\n\t\t\t\tif (server) {\n\t\t\t\t\t// server exists\n\t\t\t\t\tdata.members = data.members || [];\n\t\t\t\t\tdata.channels = data.channels || [];\n\t\t\t\t\tvar newserver = new Server(data, client);\n\t\t\t\t\tnewserver.members = server.members;\n\t\t\t\t\tnewserver.memberMap = server.memberMap;\n\t\t\t\t\tnewserver.channels = server.channels;\n\t\t\t\t\tif (newserver.equalsStrict(server)) {\n\t\t\t\t\t\t// already the same don't do anything\n\t\t\t\t\t\tclient.emit(\"debug\", \"received server update but server already updated\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclient.emit(\"serverUpdated\", new Server(server, client), newserver);\n\t\t\t\t\t\tthis.servers.update(server, newserver);\n\t\t\t\t\t}\n\t\t\t\t} else if (!server) {\n\t\t\t\t\tclient.emit(\"warn\", \"server was updated but it was not in the cache\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PacketType.CHANNEL_CREATE:\n\n\t\t\t\tvar channel = this.channels.get(\"id\", data.id);\n\n\t\t\t\tif (!channel) {\n\n\t\t\t\t\tvar server = this.servers.get(\"id\", data.guild_id);\n\t\t\t\t\tif (server) {\n\t\t\t\t\t\tvar chan = null;\n\t\t\t\t\t\tif (data.type === 0) {\n\t\t\t\t\t\t\tchan = this.channels.add(new TextChannel(data, client, server));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tchan = this.channels.add(new VoiceChannel(data, client, server));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclient.emit(\"channelCreated\", server.channels.add(chan));\n\t\t\t\t\t} else if (data.is_private) {\n\t\t\t\t\t\tclient.emit(\"channelCreated\", this.private_channels.add(new PMChannel(data, client)));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclient.emit(\"warn\", \"channel created but server does not exist\");\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"channel created but already in cache\");\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase PacketType.CHANNEL_DELETE:\n\t\t\t\tvar channel = this.channels.get(\"id\", data.id) || this.private_channels.get(\"id\", data.id);\n\t\t\t\tif (channel) {\n\n\t\t\t\t\tif (channel.server) { // accounts for PMs\n\t\t\t\t\t\tchannel.server.channels.remove(channel);\n\t\t\t\t\t\tthis.channels.remove(channel);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.private_channels.remove(channel);\n\t\t\t\t\t}\n\n\t\t\t\t\tclient.emit(\"channelDeleted\", channel);\n\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"channel deleted but already out of cache?\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PacketType.CHANNEL_UPDATE:\n\t\t\t\tvar channel = this.channels.get(\"id\", data.id) || this.private_channels.get(\"id\", data.id);\n\t\t\t\tif (channel) {\n\n\t\t\t\t\tif (channel instanceof PMChannel) {\n\t\t\t\t\t\t//PM CHANNEL\n\t\t\t\t\t\tclient.emit(\"channelUpdated\", new PMChannel(channel, client),\n\t\t\t\t\t\t\tthis.private_channels.update(channel, new PMChannel(data, client)));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (channel.server) {\n\t\t\t\t\t\t\tif (channel.type === 0) {\n\t\t\t\t\t\t\t\t//TEXT CHANNEL\n\t\t\t\t\t\t\t\tvar chan = new TextChannel(data, client, channel.server);\n\t\t\t\t\t\t\t\tchan.messages = channel.messages;\n\t\t\t\t\t\t\t\tclient.emit(\"channelUpdated\", channel, chan);\n\t\t\t\t\t\t\t\tchannel.server.channels.update(channel, chan);\n\t\t\t\t\t\t\t\tthis.channels.update(channel, chan);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t//VOICE CHANNEL\n\t\t\t\t\t\t\t\tdata.members = channel.members;\n\t\t\t\t\t\t\t\tvar chan = new VoiceChannel(data, client, channel.server);\n\t\t\t\t\t\t\t\tclient.emit(\"channelUpdated\", channel, chan);\n\t\t\t\t\t\t\t\tchannel.server.channels.update(channel, chan);\n\t\t\t\t\t\t\t\tthis.channels.update(channel, chan);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclient.emit(\"warn\", \"channel updated but server non-existant\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"channel updated but not in cache\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PacketType.SERVER_ROLE_CREATE:\n\t\t\t\tvar server = this.servers.get(\"id\", data.guild_id);\n\t\t\t\tif (server) {\n\t\t\t\t\tclient.emit(\"serverRoleCreated\", server.roles.add(new Role(data.role, server, client)), server);\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"server role made but server not in cache\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PacketType.SERVER_ROLE_DELETE:\n\t\t\t\tvar server = this.servers.get(\"id\", data.guild_id);\n\t\t\t\tif (server) {\n\t\t\t\t\tvar role = server.roles.get(\"id\", data.role_id);\n\t\t\t\t\tif (role) {\n\t\t\t\t\t\tserver.roles.remove(role);\n\t\t\t\t\t\tclient.emit(\"serverRoleDeleted\", role);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclient.emit(\"warn\", \"server role deleted but role not in cache\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"server role deleted but server not in cache\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PacketType.SERVER_ROLE_UPDATE:\n\t\t\t\tvar server = this.servers.get(\"id\", data.guild_id);\n\t\t\t\tif (server) {\n\t\t\t\t\tvar role = server.roles.get(\"id\", data.role.id);\n\t\t\t\t\tif (role) {\n\t\t\t\t\t\tvar newRole = new Role(data.role, server, client);\n\t\t\t\t\t\tclient.emit(\"serverRoleUpdated\", new Role(role, server, client), newRole);\n\t\t\t\t\t\tserver.roles.update(role, newRole);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclient.emit(\"warn\", \"server role updated but role not in cache\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"server role updated but server not in cache\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PacketType.SERVER_MEMBER_ADD:\n\t\t\t\tvar server = this.servers.get(\"id\", data.guild_id);\n\t\t\t\tif (server) {\n\n\t\t\t\t\tserver.memberMap[data.user.id] = {\n\t\t\t\t\t\troles: data.roles,\n\t\t\t\t\t\tmute: false,\n\t\t\t\t\t\tselfMute: false,\n\t\t\t\t\t\tdeaf: false,\n\t\t\t\t\t\tselfDeaf: false,\n\t\t\t\t\t\tjoinedAt: Date.parse(data.joined_at),\n\t\t\t\t\t\tnick: data.nick || null\n\t\t\t\t\t};\n\n\t\t\t\t\tserver.memberCount++;\n\n\t\t\t\t\tclient.emit(\n\t\t\t\t\t\t\"serverNewMember\",\n\t\t\t\t\t\tserver,\n\t\t\t\t\t\tserver.members.add(this.users.add(new User(data.user, client)))\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"server member added but server doesn't exist in cache\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PacketType.SERVER_MEMBER_REMOVE:\n\t\t\t\tvar server = this.servers.get(\"id\", data.guild_id);\n\t\t\t\tif (server) {\n\t\t\t\t\tvar user = this.users.get(\"id\", data.user.id);\n\t\t\t\t\tif (user) {\n\t\t\t\t\t\tclient.emit(\"serverMemberRemoved\", server, user);\n\t\t\t\t\t\tserver.memberMap[data.user.id] = null;\n\t\t\t\t\t\tserver.members.remove(user);\n\t\t\t\t\t\tserver.memberCount--;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclient.emit(\"warn\", \"server member removed but user doesn't exist in cache\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"server member removed but server doesn't exist in cache\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PacketType.SERVER_MEMBER_UPDATE:\n\t\t\t\tvar server = this.servers.get(\"id\", data.guild_id);\n\t\t\t\tif (server) {\n\t\t\t\t\tvar user = this.users.add(new User(data.user, client));\n\t\t\t\t\tif (user) {\n\t\t\t\t\t\tvar oldMember = null;\n\t\t\t\t\t\tif (server.memberMap[data.user.id]) {\n\t\t\t\t\t\t\toldMember = {\n\t\t\t\t\t\t\t\troles: server.memberMap[data.user.id].roles,\n\t\t\t\t\t\t\t\tmute: server.memberMap[data.user.id].mute,\n\t\t\t\t\t\t\t\tselfMute: server.memberMap[data.user.id].selfMute,\n\t\t\t\t\t\t\t\tdeaf: server.memberMap[data.user.id].deaf,\n\t\t\t\t\t\t\t\tselfDeaf: server.memberMap[data.user.id].selfDeaf,\n\t\t\t\t\t\t\t\tnick: server.memberMap[data.user.id].nick\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tserver.memberMap[data.user.id] = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tserver.memberMap[data.user.id].roles = data.roles ? data.roles : server.memberMap[data.user.id].roles;\n\t\t\t\t\t\tserver.memberMap[data.user.id].mute = data.mute || server.memberMap[data.user.id].mute;\n\t\t\t\t\t\tserver.memberMap[data.user.id].selfMute = data.self_mute === undefined ? server.memberMap[data.user.id].selfMute : data.self_mute;\n\t\t\t\t\t\tserver.memberMap[data.user.id].deaf = data.deaf || server.memberMap[data.user.id].deaf;\n\t\t\t\t\t\tserver.memberMap[data.user.id].selfDeaf = data.self_deaf === undefined ? server.memberMap[data.user.id].selfDeaf : data.self_deaf;\n\t\t\t\t\t\tserver.memberMap[data.user.id].nick = data.nick === undefined ? server.memberMap[data.user.id].nick : data.nick || null;\n\t\t\t\t\t\tclient.emit(\"serverMemberUpdated\", server, user, oldMember);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclient.emit(\"warn\", \"server member removed but user doesn't exist in cache\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"server member updated but server doesn't exist in cache\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PacketType.PRESENCE_UPDATE:\n\n\t\t\t\tvar user = this.users.add(new User(data.user, client));\n\t\t\t\tvar server = this.servers.get(\"id\", data.guild_id);\n\n\t\t\t\tif (user && server) {\n\n\t\t\t\t\tserver.members.add(user);\n\n\t\t\t\t\tdata.user.username = data.user.username || user.username;\n\t\t\t\t\tdata.user.id = data.user.id || user.id;\n\t\t\t\t\tdata.user.avatar = data.user.avatar !== undefined ? data.user.avatar : user.avatar;\n\t\t\t\t\tdata.user.discriminator = data.user.discriminator || user.discriminator;\n\t\t\t\t\tdata.user.status = data.status || user.status;\n\t\t\t\t\tdata.user.game = data.game !== undefined ? data.game : user.game;\n\t\t\t\t\tdata.user.bot = data.user.bot !== undefined ? data.user.bot : user.bot;\n\n\t\t\t\t\tvar presenceUser = new User(data.user, client);\n\n\t\t\t\t\tif (!presenceUser.equalsStrict(user)) {\n\t\t\t\t\t\tclient.emit(\"presence\", user, presenceUser);\n\t\t\t\t\t\tthis.users.update(user, presenceUser);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"presence update but user/server not in cache\");\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase PacketType.USER_UPDATE:\n\n\t\t\t\tvar user = this.users.get(\"id\", data.id);\n\n\t\t\t\tif (user) {\n\n\t\t\t\t\tdata.username = data.username || user.username;\n\t\t\t\t\tdata.id = data.id || user.id;\n\t\t\t\t\tdata.avatar = data.avatar || user.avatar;\n\t\t\t\t\tdata.discriminator = data.discriminator || user.discriminator;\n\t\t\t\t\tthis.email = data.email || this.email;\n\n\t\t\t\t\tvar presenceUser = new User(data, client);\n\n\t\t\t\t\tclient.emit(\"presence\", user, presenceUser);\n\t\t\t\t\tthis.users.update(user, presenceUser);\n\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"user update but user not in cache (this should never happen)\");\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase PacketType.TYPING:\n\n\t\t\t\tvar user = this.users.get(\"id\", data.user_id);\n\t\t\t\tvar channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n\n\t\t\t\tif (user && channel) {\n\t\t\t\t\tif (user.typing.since) {\n\t\t\t\t\t\tuser.typing.since = Date.now();\n\t\t\t\t\t\tuser.typing.channel = channel;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tuser.typing.since = Date.now();\n\t\t\t\t\t\tuser.typing.channel = channel;\n\t\t\t\t\t\tclient.emit(\"userTypingStarted\", user, channel);\n\t\t\t\t\t}\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (Date.now() - user.typing.since > 5500) {\n\t\t\t\t\t\t\t// they haven't typed since\n\t\t\t\t\t\t\tuser.typing.since = null;\n\t\t\t\t\t\t\tuser.typing.channel = null;\n\t\t\t\t\t\t\tclient.emit(\"userTypingStopped\", user, channel);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 6000);\n\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"user typing but user or channel not existant in cache\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PacketType.SERVER_BAN_ADD:\n\t\t\t\tvar user = this.users.get(\"id\", data.user.id);\n\t\t\t\tvar server = this.servers.get(\"id\", data.guild_id);\n\n\t\t\t\tif (user && server) {\n\t\t\t\t\tclient.emit(\"userBanned\", user, server);\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"user banned but user/server not in cache.\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PacketType.SERVER_BAN_REMOVE:\n\t\t\t\tvar user = this.users.get(\"id\", data.user.id);\n\t\t\t\tvar server = this.servers.get(\"id\", data.guild_id);\n\n\t\t\t\tif (user && server) {\n\t\t\t\t\tclient.emit(\"userUnbanned\", user, server);\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"user unbanned but user/server not in cache.\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PacketType.USER_NOTE_UPDATE:\n\t\t\t\tif(this.user.bot) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar user = this.users.get(\"id\", data.id);\n\t\t\t\tvar oldNote = user.note;\n\t\t\t\tvar note = data.note || null;\n\n\t\t\t\t// user in cache\n\t\t\t\tif(user) {\n\t\t\t\t\tvar updatedUser = user;\n\t\t\t\t\tupdatedUser.note = note;\n\n\t\t\t\t\tclient.emit(\"noteUpdated\", user, oldNote);\n\n\t\t\t\t\tthis.users.update(user, updatedUser);\n\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"note updated but user not in cache\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PacketType.VOICE_STATE_UPDATE:\n\t\t\t\tvar user = this.users.get(\"id\", data.user_id);\n\t\t\t\tvar server = this.servers.get(\"id\", data.guild_id);\n\t\t\t\tvar connection = this.voiceConnections.get(\"server\", server);\n\n\t\t\t\tif (user && server) {\n\n\t\t\t\t\tif (data.channel_id) {\n\t\t\t\t\t\t// in voice channel\n\t\t\t\t\t\tvar channel = this.channels.get(\"id\", data.channel_id);\n\t\t\t\t\t\tif (channel && channel.type === 2) {\n\t\t\t\t\t\t\tserver.eventVoiceStateUpdate(channel, user, data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclient.emit(\"warn\", \"voice state channel not in cache\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// not in voice channel\n\t\t\t\t\t\tclient.emit(\"voiceLeave\", server.eventVoiceLeave(user), user);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"voice state update but user or server not in cache\");\n\t\t\t\t}\n\n\t\t\t\tif (user && user.id === this.user.id) { // only for detecting self user movements for connections.\n\t\t\t\t\tvar connection = this.voiceConnections.get(\"server\", server);\n\t\t\t\t\t// existing connection, perhaps channel moved\n\t\t\t\t\tif (connection && connection.voiceChannel && connection.voiceChannel.id !== data.channel_id) {\n\t\t\t\t\t\t// moved, update info\n\t\t\t\t\t\tconnection.voiceChannel = this.channels.get(\"id\", data.channel_id);\n\t\t\t\t\t\tclient.emit(\"voiceMoved\", connection.voiceChannel); // Moved to a new channel\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase PacketType.SERVER_MEMBERS_CHUNK:\n\n\t\t\t\tvar server = this.servers.get(\"id\", data.guild_id);\n\n\t\t\t\tif (server) {\n\n\t\t\t\t\tvar testtime = Date.now();\n\n\t\t\t\t\tfor (var user of data.members) {\n\t\t\t\t\t\tserver.memberMap[user.user.id] = {\n\t\t\t\t\t\t\troles: user.roles,\n\t\t\t\t\t\t\tmute: user.mute,\n\t\t\t\t\t\t\tselfMute: false,\n\t\t\t\t\t\t\tdeaf: user.deaf,\n\t\t\t\t\t\t\tselfDeaf: false,\n\t\t\t\t\t\t\tjoinedAt: Date.parse(user.joined_at),\n\t\t\t\t\t\t\tnick: user.nick || null\n\t\t\t\t\t\t};\n\t\t\t\t\t\tserver.members.add(this.users.add(new User(user.user, client)));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.forceFetchCount.hasOwnProperty(server.id)) {\n\t\t\t\t\t\tif (this.forceFetchCount[server.id] <= 1) {\n\t\t\t\t\t\t\tdelete this.forceFetchCount[server.id];\n\t\t\t\t\t\t\tthis.restartServerCreateTimeout();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.forceFetchCount[server.id]--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tclient.emit(\"debug\", (Date.now() - testtime) + \"ms for \" + data.members.length + \" user chunk for server with id \" + server.id);\n\n\t\t\t\t} else {\n\t\t\t\t\tclient.emit(\"warn\", \"chunk update received but server not in cache\");\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase PacketType.FRIEND_ADD:\n\t\t\t\tif (this.user.bot) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (data.type === 1) { // accepted/got accepted a friend request\n\t\t\t\t\tvar inUser = this.incoming_friend_requests.get(\"id\", data.id);\n\t\t\t\t\tif (inUser) {\n\t\t\t\t\t\t// client accepted another user\n\t\t\t\t\t\tthis.incoming_friend_requests.remove(this.friends.add(new User(data.user, client)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar outUser = this.outgoing_friend_requests.get(\"id\", data.id);\n\t\t\t\t\tif (outUser) {\n\t\t\t\t\t\t// another user accepted the client\n\t\t\t\t\t\tthis.outgoing_friend_requests.remove(this.friends.add(new User(data.user, client)));\n\t\t\t\t\t\tclient.emit(\"friendRequestAccepted\", outUser);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else if (data.type === 2) {\n\t\t\t\t\t// client received block\n\t\t\t\t\tthis.blocked_users.add(new User(data.user, client));\n\t\t\t\t} else if (data.type === 3) {\n\t\t\t\t\t// client received friend request\n\t\t\t\t\tclient.emit(\"friendRequestReceived\", this.incoming_friend_requests.add(new User(data.user, client)));\n\t\t\t\t} else if (data.type === 4) {\n\t\t\t\t\t// client sent friend request\n\t\t\t\t\tthis.outgoing_friend_requests.add(new User(data.user, client));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PacketType.FRIEND_REMOVE:\n\t\t\t\tif (this.user.bot) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar user = this.friends.get(\"id\", data.id);\n\t\t\t\tif (user) {\n\t\t\t\t\tthis.friends.remove(user);\n\t\t\t\t\tclient.emit(\"friendRemoved\", user);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuser = this.blocked_users.get(\"id\", data.id);\n\t\t\t\tif (user) { // they rejected friend request\n\t\t\t\t\tthis.blocked_users.remove(user);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuser = this.incoming_friend_requests.get(\"id\", data.id);\n\t\t\t\tif (user) { // they rejected outgoing friend request OR client user manually deleted incoming thru web client/other clients\n\t\t\t\t\tvar rejectedUser = this.outgoing_friend_requests.get(\"id\", user.id);\n\t\t\t\t\tif (rejectedUser) {\n\t\t\t\t\t\t// other person rejected outgoing\n\t\t\t\t\t\tclient.emit(\"friendRequestRejected\", this.outgoing_friend_requests.remove(rejectedUser));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// incoming deleted manually\n\t\t\t\t\tthis.incoming_friend_requests.remove(user);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tuser = this.outgoing_friend_requests.get(\"id\", data.id);\n\t\t\t\tif (user) { // client cancelled incoming friend request OR client user manually deleted outgoing thru web client/other clients\n\t\t\t\t\tvar incomingCancel = this.incoming_friend_requests.get(\"id\", user.id);\n\t\t\t\t\tif (incomingCancel) {\n\t\t\t\t\t\t// client cancelled incoming\n\t\t\t\t\t\tthis.incoming_friend_requests.remove(user);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// outgoing deleted manually\n\t\t\t\t\tthis.outgoing_friend_requests.remove(user);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase PacketType.SERVER_SYNC:// (╯°□°）╯︵ ┻━┻ thx Discord devs\n                var guild = this.servers.get(data.id);\n\t\t\t\tdata.members.forEach((dataUser) => {\n\t\t\t\t\tguild.memberMap[dataUser.user.id] = {\n\t\t\t\t\t\troles: dataUser.roles,\n\t\t\t\t\t\tmute: dataUser.mute,\n\t\t\t\t\t\tselfMute: dataUser.self_mute,\n\t\t\t\t\t\tdeaf: dataUser.deaf,\n\t\t\t\t\t\tselfDeaf: dataUser.self_deaf,\n\t\t\t\t\t\tjoinedAt: Date.parse(dataUser.joined_at),\n\t\t\t\t\t\tnick: dataUser.nick || null\n\t\t\t\t\t};\n\t\t\t\t\tguild.members.add(client.internal.users.add(new User(dataUser.user, client)));\n\t\t\t\t});\n\t\t\t\tfor (var presence of data.presences) {\n\t\t\t\t\tvar user = client.internal.users.get(\"id\", presence.user.id);\n\t\t\t\t\tif(user) {\n\t\t\t\t\t\tuser.status = presence.status;\n\t\t\t\t\t\tuser.game = presence.game;\n\t\t\t\t\t}\n\t\t\t\t}\n                if(guild.pendingVoiceStates && guild.pendingVoiceStates.length > 0) {\n\t\t\t\t\tfor (var voiceState of guild.pendingVoiceStates) {\n\t\t\t\t\t\tlet user = guild.members.get(\"id\", voiceState.user_id);\n\t\t\t\t\t\tif (user) {\n\t\t\t\t\t\t\tguild.memberMap[user.id] = guild.memberMap[user.id] || {};\n\t\t\t\t\t\t\tguild.memberMap[user.id].mute = voiceState.mute || guild.memberMap[user.id].mute;\n\t\t\t\t\t\t\tguild.memberMap[user.id].selfMute = voiceState.self_mute === undefined ? guild.memberMap[user.id].selfMute : voiceState.self_mute;\n\t\t\t\t\t\t\tguild.memberMap[user.id].deaf = voiceState.deaf || guild.memberMap[user.id].deaf;\n\t\t\t\t\t\t\tguild.memberMap[user.id].selfDeaf = voiceState.self_deaf === undefined ? guild.memberMap[user.id].selfDeaf : voiceState.self_deaf;\n\t\t\t\t\t\t\tlet channel = guild.channels.get(\"id\", voiceState.channel_id);\n\t\t\t\t\t\t\tif (channel) {\n\t\t\t\t\t\t\t\tguild.eventVoiceJoin(user, channel);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tguild.client.emit(\"warn\", \"channel doesn't exist even though GUILD_SYNC expects them to\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tguild.client.emit(\"warn\", \"user doesn't exist even though GUILD_SYNC expects them to\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n                }\n                guild.pendingVoiceStates = null;\n                this.unsyncedGuilds--;\n                this.restartServerCreateTimeout();\n                break;\n\t\t\tdefault:\n\t\t\t\tclient.emit(\"unknown\", packet);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tresume() {\n\t\tvar data = {\n\t\t\top: 6,\n\t\t\td: {\n\t            token: this.token,\n\t            session_id: this.sessionID,\n\t            seq: this.sequence\n\t\t\t}\n\t\t};\n\n\t\tthis.sendWS(data);\n\t}\n\n\tidentify() {\n\t\tvar data = {\n\t\t\top: 2,\n\t\t\td: {\n\t\t\t\ttoken: this.token,\n\t\t\t\tv: GATEWAY_VERSION,\n\t\t\t\tcompress: this.client.options.compress,\n\t\t\t\tlarge_threshold : this.client.options.largeThreshold,\n\t\t\t\tproperties: {\n\t\t\t\t\t\"$os\": process.platform,\n\t\t\t\t\t\"$browser\": \"discord.js\",\n\t\t\t\t\t\"$device\": \"discord.js\",\n\t\t\t\t\t\"$referrer\": \"\",\n\t\t\t\t\t\"$referring_domain\": \"\"\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tif (this.client.options.shard) {\n\t\t\tdata.d.shard = this.client.options.shard;\n\t\t}\n\n\t\tthis.sendWS(data);\n\t}\n\n\theartbeat() {\n\t\tconsole.log(\"heartbeat called, value \" + this.heartbeatAcked);\n\t  if (!this.heartbeatAcked) this.disconnected(true);\n\t  console.log(\"set it to false\");\n    this.heartbeatAcked = false;\n\t\tthis.sendWS({ op: 1, d: Date.now() });\n\t}\n}\n"]}
+>>>>>>> Stashed changes
Index: lib/Client/InternalClient.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/Client/InternalClient.js	(revision 06517bfced82109600a92b614d27d36ac0316e46)
+++ lib/Client/InternalClient.js	(revision )
@@ -113,6 +113,7 @@
 }
 
 class InternalClient {
+<<<<<<< Updated upstream
   constructor(discordClient) {
     this.setupCalled = false;
     this.setup(discordClient);
@@ -2604,6 +2605,2436 @@
     this.heartbeatAcked = false;
     this.sendWS({ op: 1, d: Date.now() });
   }
+=======
+	constructor(discordClient) {
+		this.setup(discordClient);
+	}
+
+	apiRequest(method, url, useAuth, data, file) {
+		var resolve, reject;
+		var promise = new Promise((res, rej) => {
+			resolve = res;
+			reject = rej;
+		});
+		var buckets = [];
+		var match = url.match(/\/channels\/([0-9]+)\/messages(\/[0-9]+)?$/);
+		if (match) {
+			if (method === "del" && (match[1] = this.channels.get("id", match[1]) || this.private_channels.get("id", match[1]))) {
+				buckets = ["dmsg:" + (match[1].server || {}).id];
+			} else if (this.user.bot) {
+				if (method === "post" || method === "patch") {
+					if (this.private_channels.get("id", match[1])) {
+						buckets = ["bot:msg:dm", "bot:msg:global"];
+					} else if (match[1] = this.channels.get("id", match[1])) {
+						buckets = ["bot:msg:guild:" + match[1].server.id, "bot:msg:global"];
+					}
+				}
+			} else {
+				buckets = ["msg"];
+			}
+		} else if (method === "patch") {
+			if (url === "/users/@me" && this.user && data.username && data.username !== this.user.username) {
+				buckets = ["username"];
+			} else if (match = url.match(/\/guilds\/([0-9]+)\/members\/[0-9]+$/)) {
+				buckets = ["guild_member:" + match[1]];
+			} else if (match = url.match(/\/guilds\/([0-9]+)\/members\/@me\/nick$/)) {
+				buckets = ["guild_member_nick:" + match[1]];
+			}
+		}
+
+		var self = this;
+
+		var actualCall = function () {
+			var startTime = Date.now();
+			var ret = _superagent2.default[method](url);
+			if (useAuth) {
+				ret.set("authorization", self.token);
+			}
+			if (file) {
+				ret.attach("file", file.file, file.name);
+				if (data) {
+					for (var i in data) {
+						if (data[i] !== undefined) {
+							ret.field(i, data[i]);
+						}
+					}
+				}
+			} else if (data) {
+				ret.send(data);
+			}
+			ret.set('User-Agent', self.userAgentInfo.full);
+			ret.end((error, data) => {
+				if (error) {
+					if (data && data.status === 429) {
+						self.client.emit("debug", "Encountered 429 at " + url + " | " + self.client.options.shard + " | Buckets" + buckets + " | " + (Date.now() - startTime) + "ms latency");
+					}
+					reject(error);
+				} else {
+					resolve(data.body);
+				}
+			});
+		};
+		var waitFor = 1;
+		var i = 0;
+		var done = function () {
+			if (++i === waitFor) {
+				actualCall();
+			}
+		};
+		for (var bucket of buckets) {
+			++waitFor;
+			this.buckets[bucket].queue(done);
+		}
+		done();
+		return promise;
+	}
+
+	setup(discordClient) {
+		discordClient = discordClient || this.client;
+		this.client = discordClient;
+		this.state = _ConnectionState2.default.IDLE;
+		this.websocket = null;
+		this.userAgent = {
+			url: 'https://github.com/hydrabolt/discord.js',
+			version: require('../../package.json').version
+		};
+
+		if (this.client.options.compress) {
+			zlib = require("zlib");
+		}
+
+		// creates 4 caches with discriminators based on ID
+		this.users = new _Cache2.default();
+		this.friends = new _Cache2.default();
+		this.blocked_users = new _Cache2.default();
+		this.outgoing_friend_requests = new _Cache2.default();
+		this.incoming_friend_requests = new _Cache2.default();
+		this.channels = new _Cache2.default();
+		this.servers = new _Cache2.default();
+		this.unavailableServers = new _Cache2.default();
+		this.private_channels = new _Cache2.default();
+		this.autoReconnectInterval = 1000;
+		this.unsyncedGuilds = 0;
+		this.guildSyncQueue = [];
+		this.guildSyncQueueLength = 1;
+
+		this.intervals = {
+			typing: [],
+			kai: null,
+			misc: []
+		};
+
+		this.voiceConnections = new _Cache2.default();
+		this.resolver = new _Resolver2.default(this);
+		this.readyTime = null;
+		this.messageAwaits = {};
+		this.buckets = {
+			"bot:msg:dm": new _Bucket2.default(5, 5000),
+			"bot:msg:global": new _Bucket2.default(50, 10000),
+			"msg": new _Bucket2.default(10, 10000),
+			"dmsg:undefined": new _Bucket2.default(5, 1000),
+			"username": new _Bucket2.default(2, 3600000)
+		};
+
+		if (!this.tokenCacher) {
+			this.tokenCacher = new _TokenCacher2.default(this.client);
+			this.tokenCacher.init(0);
+		}
+	}
+
+	cleanIntervals() {
+		for (let interval of this.intervals.typing.concat(this.intervals.misc).concat(this.intervals.kai)) {
+			if (interval) {
+				clearInterval(interval);
+			}
+		}
+	}
+
+	disconnected(autoReconnect = false) {
+
+		this.cleanIntervals();
+
+		this.voiceConnections.forEach(vc => {
+			this.leaveVoiceChannel(vc);
+		});
+
+		if (autoReconnect) {
+			this.autoReconnectInterval = Math.min(this.autoReconnectInterval * (Math.random() + 1), 60000);
+			setTimeout(() => {
+				if (!this.email && !this.token) {
+					return;
+				}
+
+				// Check whether the email is set (if not, only a token has been used for login)
+				this.loginWithToken(this.token, this.email, this.password).catch(() => this.disconnected(true));
+			}, this.autoReconnectInterval);
+		}
+
+		this.client.emit("disconnected");
+	}
+
+	get uptime() {
+		return this.readyTime ? Date.now() - this.readyTime : null;
+	}
+
+	set userAgent(info) {
+		info.full = `DiscordBot (${ info.url }, ${ info.version })`;
+		this.userAgentInfo = info;
+	}
+
+	get userAgent() {
+		return this.userAgentInfo;
+	}
+
+	//def leaveVoiceChannel
+	leaveVoiceChannel(chann) {
+		if (this.user.bot) {
+			var leave = connection => {
+				return new Promise((resolve, reject) => {
+					connection.destroy();
+					resolve();
+				});
+			};
+
+			if (chann instanceof _VoiceChannel2.default) {
+				return this.resolver.resolveChannel(chann).then(channel => {
+					if (!channel) {
+						return Promise.reject(new Error("voice channel does not exist"));
+					}
+
+					if (channel.type !== 2) {
+						return Promise.reject(new Error("channel is not a voice channel!"));
+					}
+
+					var connection = this.voiceConnections.get("voiceChannel", channel);
+					if (!connection) {
+						return Promise.reject(new Error("not connected to that voice channel"));
+					}
+					return leave(connection);
+				});
+			} else if (chann instanceof _VoiceConnection2.default) {
+				return leave(chann);
+			} else {
+				return Promise.reject(new Error("invalid voice channel/connection to leave"));
+			}
+		} else {
+			// preserve old functionality for non-bots
+			if (this.voiceConnections[0]) {
+				this.voiceConnections[0].destroy();
+			}
+			return Promise.resolve();
+		}
+	}
+
+	//def awaitResponse
+	awaitResponse(msg) {
+		return new Promise((resolve, reject) => {
+
+			msg = this.resolver.resolveMessage(msg);
+
+			if (!msg) {
+				reject(new Error("message undefined"));
+				return;
+			}
+
+			var awaitID = msg.channel.id + msg.author.id;
+
+			if (!this.messageAwaits[awaitID]) {
+				this.messageAwaits[awaitID] = [];
+			}
+
+			this.messageAwaits[awaitID].push(resolve);
+		});
+	}
+
+	//def joinVoiceChannel
+	joinVoiceChannel(chann) {
+		return this.resolver.resolveChannel(chann).then(channel => {
+			if (!channel) {
+				return Promise.reject(new Error("voice channel does not exist"));
+			}
+
+			if (channel.type !== 2) {
+				return Promise.reject(new Error("channel is not a voice channel!"));
+			}
+
+			var joinSendWS = () => {
+				this.sendWS({
+					op: 4,
+					d: {
+						"guild_id": channel.server.id,
+						"channel_id": channel.id,
+						"self_mute": false,
+						"self_deaf": false
+					}
+				});
+			};
+
+			var joinVoice = () => {
+				return new Promise((resolve, reject) => {
+					var session = this.sessionID,
+					    token,
+					    server = channel.server,
+					    endpoint;
+
+					var timeout = null;
+
+					var check = data => {
+						if (data.t === "VOICE_SERVER_UPDATE") {
+							if (data.d.guild_id !== server.id) return; // ensure it is the right server
+							token = data.d.token;
+							endpoint = data.d.endpoint;
+							if (!token || !endpoint) return;
+							/* var chan = new VoiceConnection(
+       	channel, this.client, session, token, server, endpoint
+       );
+       this.voiceConnections.add(chan);
+       	chan.on("ready", () => resolve(chan));
+       chan.on("error", reject);
+       chan.on("close", reject); */
+
+							resolve({ channel, client: this.client, session, token, server, endpoint });
+
+							if (timeout) {
+								clearTimeout(timeout);
+							}
+							this.client.removeListener("raw", check);
+						}
+					};
+
+					timeout = setTimeout(() => {
+						this.client.removeListener("raw", check);
+						reject(new Error("No voice server details within 10 seconds"));
+					}, 10000);
+
+					this.client.on("raw", check);
+					joinSendWS();
+				});
+			};
+
+			var existingServerConn = this.voiceConnections.get("server", channel.server); // same server connection
+			if (existingServerConn) {
+				joinSendWS(); // Just needs to update by sending via WS, movement in cache will be handled by global handler
+				return Promise.resolve(existingServerConn);
+			}
+
+			if (!this.user.bot && this.voiceConnections.length > 0) {
+				// nonbot, one voiceconn only, just like last time just disconnect
+				return this.leaveVoiceChannel().then(joinVoice);
+			}
+
+			return joinVoice();
+		});
+	}
+
+	// Backwards-compatible utility getter method for the first voice connection
+	// Thanks to #q (@qeled) for suggesting this
+	get voiceConnection() {
+		return this.voiceConnections[0];
+	}
+
+	getGuildMembers(serverID, chunkCount) {
+		this.forceFetchCount[serverID] = chunkCount;
+		if (this.forceFetchLength + 3 + serverID.length > 4000) {
+			// 4096 max, '{"op":8,"d":{"guild_id":[],"query":"","limit":0}}'.length = 49 plus some leeway
+			this.requestGuildMembers(this.forceFetchQueue);
+			this.forceFetchQueue = [serverID];
+			this.forceFetchLength = 1 + serverID.length + 3;
+		} else {
+			this.forceFetchQueue.push(serverID);
+			this.forceFetchLength += serverID.length + 3;
+		}
+	}
+
+	requestGuildMembers(serverID, query, limit) {
+		this.sendWS({ op: 8,
+			d: {
+				guild_id: serverID,
+				query: query || "",
+				limit: limit || 0
+			}
+		});
+	}
+
+	syncGuild(guildID) {
+		if (this.guildSyncQueueLength + 3 + guildID.length > 4050) {
+			// 4096 max, '{"op":12,"d":[]}'.length = 16 plus some leeway
+			this.sendWS({ op: 12, d: this.guildSyncQueue });
+			this.guildSyncQueue = [guildID];
+			this.guildSyncQueueLength = 1 + guildID.length + 3;
+		} else {
+			this.guildSyncQueue.push(guildID);
+			this.guildSyncQueueLength += guildID.length + 3;
+		}
+	}
+
+	checkReady() {
+		if (!this.readyTime) {
+			if (this.guildSyncQueue.length > 0) {
+				this.sendWS({ op: 12, d: this.guildSyncQueue });
+				this.guildSyncQueue = [];
+				this.guildSyncQueueLength = 1;
+				return;
+			}
+			if (this.unsyncedGuilds > 0) {
+				return;
+			}
+			if (this.forceFetchQueue.length > 0) {
+				this.requestGuildMembers(this.forceFetchQueue);
+				this.forceFetchQueue = [];
+				this.forceFetchLength = 1;
+			} else {
+				for (var key in this.forceFetchCount) {
+					if (this.forceFetchCount.hasOwnProperty(key)) {
+						return;
+					}
+				}
+				this.readyTime = Date.now();
+				this.client.emit("ready");
+			}
+		}
+	}
+
+	restartServerCreateTimeout() {
+		if (this.guildCreateTimeout) {
+			clearTimeout(this.guildCreateTimeout);
+			this.guildCreateTimeout = null;
+		}
+		if (!this.readyTime) {
+			this.guildCreateTimeout = setTimeout(() => {
+				this.checkReady();
+			}, this.client.options.guildCreateTimeout);
+		}
+	}
+
+	// def createServer
+	createServer(name, region = "london") {
+		name = this.resolver.resolveString(name);
+
+		return this.apiRequest('post', _Constants.Endpoints.SERVERS, true, { name, region }).then(res => {
+			// valid server, wait until it is cached
+			return waitFor(() => this.servers.get("id", res.id));
+		});
+	}
+
+	//def joinServer
+	joinServer(invite) {
+		invite = this.resolver.resolveInviteID(invite);
+		if (!invite) {
+			return Promise.reject(new Error("Not a valid invite"));
+		}
+
+		return this.apiRequest("post", _Constants.Endpoints.INVITE(invite), true).then(res => {
+			// valid server, wait until it is received via ws and cached
+			return waitFor(() => this.servers.get("id", res.guild.id));
+		});
+	}
+
+	//def updateServer
+	updateServer(server, options) {
+		var server = this.resolver.resolveServer(server);
+		if (!server) {
+			return Promise.reject(new Error("server did not resolve"));
+		}
+
+		var newOptions = {
+			name: options.name || server.name,
+			region: options.region || server.region
+		};
+
+		if (options.icon) {
+			newOptions.icon = this.resolver.resolveToBase64(options.icon);
+		}
+		if (options.splash) {
+			newOptions.splash = this.resolver.resolveToBase64(options.splash);
+		}
+		if (options.owner) {
+			var user = this.resolver.resolveUser(options.owner);
+			if (!user) {
+				return Promise.reject(new Error("owner could not be resolved"));
+			}
+			options.owner_id = user.id;
+		}
+		if (options.verificationLevel) {
+			options.verification_level = user.verificationLevel;
+		}
+		if (options.afkChannel) {
+			var channel = this.resolver.resolveUser(options.afkChannel);
+			if (!channel) {
+				return Promise.reject(new Error("afkChannel could not be resolved"));
+			}
+			options.afk_channel_id = channel.id;
+		}
+		if (options.afkTimeout) {
+			options.afk_timeout = user.afkTimeout;
+		}
+
+		return this.apiRequest("patch", _Constants.Endpoints.SERVER(server.id), true, options).then(res => {
+			// wait until the name and region are updated
+			return waitFor(() => this.servers.get("name", res.name) ? this.servers.get("name", res.name).region === res.region ? this.servers.get("id", res.id) : false : false);
+		});
+	}
+
+	//def leaveServer
+	leaveServer(srv) {
+		var server = this.resolver.resolveServer(srv);
+		if (!server) {
+			return Promise.reject(new Error("server did not resolve"));
+		}
+
+		return this.apiRequest("del", _Constants.Endpoints.ME_SERVER(server.id), true);
+	}
+
+	//def deleteServer
+	deleteServer(srv) {
+		var server = this.resolver.resolveServer(srv);
+		if (!server) {
+			return Promise.reject(new Error("server did not resolve"));
+		}
+
+		return this.apiRequest("del", _Constants.Endpoints.SERVER(server.id), true);
+	}
+
+	// def loginWithToken
+	// email and password are optional
+	loginWithToken(token, email, password) {
+		this.setup();
+
+		this.state = _ConnectionState2.default.LOGGED_IN;
+		this.token = token;
+		this.email = email;
+		this.password = password;
+
+		var self = this;
+		return this.getGateway().then(url => {
+			self.token = self.client.options.bot && !self.token.startsWith("Bot ") ? `Bot ${ self.token }` : self.token;
+			self.createWS(url);
+			return self.token;
+		});
+	}
+
+	// def login
+	login(email, password) {
+		var client = this.client;
+
+		if (!this.tokenCacher.done) {
+			return new Promise((resolve, reject) => {
+				setTimeout(() => {
+					this.login(email, password).then(resolve).catch(reject);
+				}, 20);
+			});
+		} else {
+			var tk = this.tokenCacher.getToken(email, password);
+			if (tk) {
+				this.client.emit("debug", "bypassed direct API login, used cached token");
+				return this.loginWithToken(tk, email, password);
+			}
+		}
+
+		if (this.state !== _ConnectionState2.default.DISCONNECTED && this.state !== _ConnectionState2.default.IDLE) {
+			return Promise.reject(new Error("already logging in/logged in/ready!"));
+		}
+
+		this.state = _ConnectionState2.default.LOGGING_IN;
+
+		return this.apiRequest("post", _Constants.Endpoints.LOGIN, false, {
+			email,
+			password
+		}).then(res => {
+			this.client.emit("debug", "direct API login, cached token was unavailable");
+			var token = res.token;
+			this.tokenCacher.setToken(email, password, token);
+			return this.loginWithToken(token, email, password);
+		}, error => {
+			this.websocket = null;
+			throw error;
+		}).catch(error => {
+			this.websocket = null;
+			this.state = _ConnectionState2.default.DISCONNECTED;
+			client.emit("disconnected");
+			throw error;
+		});
+	}
+
+	// def logout
+	logout() {
+		if (this.state === _ConnectionState2.default.DISCONNECTED || this.state === _ConnectionState2.default.IDLE) {
+			return Promise.reject(new Error("Client is not logged in!"));
+		}
+
+		var disconnect = () => {
+			if (this.websocket) {
+				this.websocket.close(1000);
+				this.websocket = null;
+			}
+			this.token = null;
+			this.email = null;
+			this.password = null;
+			this.state = _ConnectionState2.default.DISCONNECTED;
+			return Promise.resolve();
+		};
+
+		if (!this.user.bot) {
+			return this.apiRequest("post", _Constants.Endpoints.LOGOUT, true).then(disconnect);
+		} else {
+			return disconnect();
+		}
+	}
+
+	// def startPM
+	startPM(resUser) {
+		var user = this.resolver.resolveUser(resUser);
+		if (!user) {
+			return Promise.reject(new Error("Unable to resolve resUser to a User"));
+		}
+		// start the PM
+		return this.apiRequest("post", _Constants.Endpoints.ME_CHANNELS, true, {
+			recipient_id: user.id
+		}).then(res => {
+			return this.private_channels.add(new _PMChannel2.default(res, this.client));
+		});
+	}
+
+	// def getGateway
+	getGateway() {
+		if (this.gatewayURL) {
+			return Promise.resolve(this.gatewayURL);
+		}
+		return this.apiRequest("get", _Constants.Endpoints.GATEWAY, true).then(res => this.gatewayURL = res.url);
+	}
+
+	// def sendMessage
+	sendMessage(where, _content, options = {}) {
+		if (options.file) {
+			if (typeof options.file !== "object") {
+				options.file = {
+					file: options.file
+				};
+			}
+			if (!options.file.name) {
+				if (options.file.file instanceof String || typeof options.file.file === "string") {
+					options.file.name = require("path").basename(options.file.file);
+				} else if (options.file.file.path) {
+					// fs.createReadStream()'s have .path that give the path. Not sure about other streams though.
+					options.file.name = require("path").basename(options.file.file.path);
+				} else {
+					options.file.name = "default.png"; // Just have to go with default filenames.
+				}
+			}
+		}
+
+		return this.resolver.resolveChannel(where).then(destination => {
+			var content = this.resolver.resolveString(_content);
+
+			if (this.client.options.disableEveryone || options.disableEveryone) {
+				content = content.replace(/(@)(everyone|here)/g, '$1\u200b$2');
+			}
+
+			if (options.file) {
+				return this.resolver.resolveFile(options.file.file).then(file => this.apiRequest("post", _Constants.Endpoints.CHANNEL_MESSAGES(destination.id), true, {
+					content: content,
+					tts: options.tts,
+					nonce: options.nonce
+				}, {
+					name: options.file.name,
+					file: file
+				}).then(res => destination.messages.add(new _Message2.default(res, destination, this.client))));
+			} else {
+				return this.apiRequest("post", _Constants.Endpoints.CHANNEL_MESSAGES(destination.id), true, {
+					content: content,
+					tts: options.tts,
+					nonce: options.nonce
+				}).then(res => destination.messages.add(new _Message2.default(res, destination, this.client)));
+			}
+		});
+	}
+
+	// def sendFile
+	sendFile(where, _file, name, content) {
+		if (!name) {
+			if (_file instanceof String || typeof _file === "string") {
+				name = require("path").basename(_file);
+			} else if (_file && _file.path) {
+				// fs.createReadStream()'s have .path that give the path. Not sure about other streams though.
+				name = require("path").basename(_file.path);
+			} else {
+				name = "default.png"; // Just have to go with default filenames.
+			}
+		}
+
+		if (content) {
+			content = {
+				content: this.resolver.resolveString(content)
+			};
+			if (this.client.options.disableEveryone) {
+				content.content = content.content.replace(/(@)(everyone|here)/g, '$1\u200b$2');
+			}
+		}
+
+		return this.resolver.resolveChannel(where).then(channel => this.resolver.resolveFile(_file).then(file => this.apiRequest("post", _Constants.Endpoints.CHANNEL_MESSAGES(channel.id), true, content, {
+			name,
+			file
+		}).then(res => channel.messages.add(new _Message2.default(res, channel, this.client)))));
+	}
+
+	// def deleteMessage
+	deleteMessage(_message, options = {}) {
+
+		var message = this.resolver.resolveMessage(_message);
+		if (!message) {
+			return Promise.reject(new Error("Supplied message did not resolve to a message!"));
+		}
+
+		var chain = options.wait ? delay(options.wait) : Promise.resolve();
+		return chain.then(() => this.apiRequest("del", _Constants.Endpoints.CHANNEL_MESSAGE(message.channel.id, message.id), true)).then(() => message.channel.messages.remove(message));
+	}
+
+	// def deleteMessages
+	deleteMessages(_messages) {
+		if (!_messages instanceof Array) return Promise.reject(new Error("Messages provided must be in an array"));
+		if (_messages.length < 1) return Promise.reject(new Error("You must provide at least one message to delete"));else if (_messages.length === 1) return this.deleteMessage(_messages[0]);
+
+		var messages = [];
+		var channel;
+		for (var _message of _messages) {
+			var message = this.resolver.resolveMessage(_message);
+			if (!message) return Promise.reject(new Error("Something other than a message could not be resolved in the array..."));
+			if (!message.server) return Promise.reject(new Error("You can only bulk delete messages on guild channels"));
+
+			// ensure same channel
+			if (!channel) {
+				channel = message.channel;
+			} else {
+				if (message.channel.id !== channel.id) return Promise.reject(new Error("You can only bulk delete messages from the same channel at one time..."));
+			}
+
+			messages.push(message);
+		}
+
+		return this.apiRequest("post", `${ _Constants.Endpoints.CHANNEL_MESSAGES(channel.id) }/bulk_delete`, true, {
+			messages: messages.map(m => m.id)
+		}).then(() => messages.forEach(m => channel.messages.remove(m)));
+	}
+
+	// def updateMessage
+	updateMessage(msg, _content, options = {}) {
+
+		var message = this.resolver.resolveMessage(msg);
+
+		if (!message) {
+			return Promise.reject(new Error("Supplied message did not resolve to a message!"));
+		}
+
+		var content = this.resolver.resolveString(_content);
+
+		return this.apiRequest("patch", _Constants.Endpoints.CHANNEL_MESSAGE(message.channel.id, message.id), true, {
+			content: content,
+			tts: options.tts
+		}).then(res => message.channel.messages.update(message, new _Message2.default(res, message.channel, this.client)));
+	}
+
+	// def getChannelLogs
+	getChannelLogs(_channel, limit = 50, options = {}) {
+		return this.resolver.resolveChannel(_channel).then(channel => {
+			var qsObject = { limit };
+			if (options.before) {
+				const res = this.resolver.resolveMessage(options.before);
+				if (res) {
+					qsObject.before = res.id;
+				}
+			}
+			if (options.after) {
+				const res = this.resolver.resolveMessage(options.after);
+				if (res) {
+					qsObject.after = res.id;
+				}
+			}
+			if (options.around) {
+				const res = this.resolver.resolveMessage(options.around);
+				if (res) {
+					qsObject.around = res.id;
+				}
+			}
+
+			return this.apiRequest("get", `${ _Constants.Endpoints.CHANNEL_MESSAGES(channel.id) }?${ _querystring2.default.stringify(qsObject) }`, true).then(res => res.map(msg => channel.messages.add(new _Message2.default(msg, channel, this.client))));
+		});
+	}
+
+	// def getMessage
+	getMessage(_channel, messageID) {
+		return this.resolver.resolveChannel(_channel).then(channel => {
+			if (!this.user.bot) {
+				return Promise.reject(new Error("Only OAuth bot accounts can use this function"));
+			}
+
+			if (!(channel instanceof _TextChannel2.default || channel instanceof _PMChannel2.default)) {
+				return Promise.reject(new Error("Provided channel is not a Text or PMChannel"));
+			}
+
+			var msg = channel.messages.get("id", messageID);
+			if (msg) {
+				return Promise.resolve(msg);
+			}
+
+			return this.apiRequest("get", `${ _Constants.Endpoints.CHANNEL_MESSAGES(channel.id) }/${ messageID }`, true).then(res => channel.messages.add(new _Message2.default(res, channel, this.client)));
+		});
+	}
+
+	// def pinMessage
+	pinMessage(msg) {
+		var message = this.resolver.resolveMessage(msg);
+
+		if (!message) {
+			return Promise.reject(new Error("Supplied message did not resolve to a message"));
+		}
+
+		return this.apiRequest("put", `${ _Constants.Endpoints.CHANNEL_PIN(msg.channel.id, msg.id) }`, true);
+	}
+
+	// def unpinMessage
+	unpinMessage(msg) {
+		var message = this.resolver.resolveMessage(msg);
+
+		if (!message) {
+			return Promise.reject(new Error("Supplied message did not resolve to a message"));
+		}
+
+		if (!message.pinned) {
+			return Promise.reject(new Error("Supplied message is not pinned"));
+		}
+
+		return this.apiRequest("del", `${ _Constants.Endpoints.CHANNEL_PIN(msg.channel.id, msg.id) }`, true);
+	}
+
+	// def getPinnedMessages
+	getPinnedMessages(_channel) {
+		return this.resolver.resolveChannel(_channel).then(channel => {
+			return this.apiRequest("get", `${ _Constants.Endpoints.CHANNEL_PINS(channel.id) }`, true).then(res => res.map(msg => channel.messages.add(new _Message2.default(msg, channel, this.client))));
+		});
+	}
+
+	// def getBans
+	getBans(server) {
+		server = this.resolver.resolveServer(server);
+
+		return this.apiRequest("get", _Constants.Endpoints.SERVER_BANS(server.id), true).then(res => res.map(ban => this.users.add(new _User2.default(ban.user, this.client))));
+	}
+
+	// def createChannel
+	createChannel(server, name, type = 0) {
+
+		server = this.resolver.resolveServer(server);
+
+		return this.apiRequest("post", _Constants.Endpoints.SERVER_CHANNELS(server.id), true, {
+			name,
+			type
+		}).then(res => {
+			var channel;
+			if (res.type === 0) {
+				channel = new _TextChannel2.default(res, this.client, server);
+			} else {
+				channel = new _VoiceChannel2.default(res, this.client, server);
+			}
+			return server.channels.add(this.channels.add(channel));
+		});
+	}
+
+	// def deleteChannel
+	deleteChannel(_channel) {
+
+		return this.resolver.resolveChannel(_channel).then(channel => this.apiRequest("del", _Constants.Endpoints.CHANNEL(channel.id), true).then(() => {
+			if (channel.server) {
+				channel.server.channels.remove(channel);
+				this.channels.remove(channel);
+			} else {
+				this.private_channels.remove(channel);
+			}
+		}));
+	}
+
+	// def banMember
+	banMember(user, server, length = 1) {
+		let resolvedUser = this.resolver.resolveUser(user);
+		server = this.resolver.resolveServer(server);
+
+		if (resolvedUser === null && typeof user === "string") {
+			user = { id: user };
+		} else {
+			user = resolvedUser;
+		}
+
+		return this.apiRequest("put", `${ _Constants.Endpoints.SERVER_BANS(server.id) }/${ user.id }?delete-message-days=${ length }`, true);
+	}
+
+	// def unbanMember
+	unbanMember(user, server) {
+
+		server = this.resolver.resolveServer(server);
+		let resolvedUser = this.resolver.resolveUser(user);
+
+		if (resolvedUser === null && typeof user === "string") {
+			user = { id: user };
+		} else {
+			user = resolvedUser;
+		}
+
+		return this.apiRequest("del", `${ _Constants.Endpoints.SERVER_BANS(server.id) }/${ user.id }`, true);
+	}
+
+	// def kickMember
+	kickMember(user, server) {
+		user = this.resolver.resolveUser(user);
+		server = this.resolver.resolveServer(server);
+
+		return this.apiRequest("del", `${ _Constants.Endpoints.SERVER_MEMBERS(server.id) }/${ user.id }`, true);
+	}
+
+	// def moveMember
+	moveMember(user, channel) {
+		user = this.resolver.resolveUser(user);
+		return this.resolver.resolveChannel(channel).then(channel => {
+			var server = channel.server;
+
+			// Make sure `channel` is a voice channel
+			if (channel.type !== 2) {
+				throw new Error("Can't moveMember into a non-voice channel");
+			} else {
+				return this.apiRequest("patch", `${ _Constants.Endpoints.SERVER_MEMBERS(server.id) }/${ user.id }`, true, { channel_id: channel.id }).then(res => {
+					user.voiceChannel = channel;
+					return res;
+				});
+			}
+		});
+	}
+
+	// def muteMember
+	muteMember(user, server) {
+		user = this.resolver.resolveUser(user);
+		server = this.resolver.resolveServer(server);
+		return this.apiRequest("patch", `${ _Constants.Endpoints.SERVER_MEMBERS(server.id) }/${ user.id }`, true, { mute: true });
+	}
+
+	// def unmuteMember
+	unmuteMember(user, server) {
+		user = this.resolver.resolveUser(user);
+		server = this.resolver.resolveServer(server);
+		return this.apiRequest("patch", `${ _Constants.Endpoints.SERVER_MEMBERS(server.id) }/${ user.id }`, true, { mute: false });
+	}
+
+	// def deafenMember
+	deafenMember(user, server) {
+		user = this.resolver.resolveUser(user);
+		server = this.resolver.resolveServer(server);
+		return this.apiRequest("patch", `${ _Constants.Endpoints.SERVER_MEMBERS(server.id) }/${ user.id }`, true, { deaf: true });
+	}
+
+	// def undeafenMember
+	undeafenMember(user, server) {
+		user = this.resolver.resolveUser(user);
+		server = this.resolver.resolveServer(server);
+		return this.apiRequest("patch", `${ _Constants.Endpoints.SERVER_MEMBERS(server.id) }/${ user.id }`, true, { deaf: false });
+	}
+
+	// def setNickname
+	setNickname(server, nick, user) {
+		nick = nick || "";
+		user = this.resolver.resolveUser(user);
+		server = this.resolver.resolveServer(server);
+		return this.apiRequest("patch", `${ _Constants.Endpoints.SERVER_MEMBERS(server.id) }/${ user.id === this.user.id ? "@me/nick" : user.id }`, true, { nick: nick });
+	}
+
+	//def setNote
+	setNote(user, note) {
+		user = this.resolver.resolveUser(user);
+		note = note || "";
+
+		if (!user) {
+			return Promise.reject(new Error("Failed to resolve user"));
+		}
+
+		return this.apiRequest("put", `${ _Constants.Endpoints.ME_NOTES }/${ user.id }`, true, { note: note });
+	}
+
+	// def createRole
+	createRole(server, data) {
+		server = this.resolver.resolveServer(server);
+
+		return this.apiRequest("post", _Constants.Endpoints.SERVER_ROLES(server.id), true).then(res => {
+			var role = server.roles.add(new _Role2.default(res, server, this.client));
+
+			if (data) {
+				return this.updateRole(role, data);
+			}
+			return role;
+		});
+	}
+	// def updateRole
+	updateRole(role, data) {
+
+		role = this.resolver.resolveRole(role);
+		var server = this.resolver.resolveServer(role.server);
+
+		var newData = {
+			color: "color" in data ? data.color : role.color,
+			hoist: "hoist" in data ? data.hoist : role.hoist,
+			name: "name" in data ? data.name : role.name,
+			position: "position" in data ? data.position : role.position,
+			permissions: "permissions" in data ? data.permissions : role.permissions,
+			mentionable: "mentionable" in data ? data.mentionable : role.mentionable
+		};
+
+		if (data.permissions) {
+			newData.permissions = 0;
+			for (var perm of data.permissions) {
+				if (perm instanceof String || typeof perm === "string") {
+					newData.permissions |= _Constants.Permissions[perm] || 0;
+				} else {
+					newData.permissions |= perm;
+				}
+			}
+		}
+
+		return this.apiRequest("patch", `${ _Constants.Endpoints.SERVER_ROLES(server.id) }/${ role.id }`, true, newData).then(res => {
+			return server.roles.update(role, new _Role2.default(res, server, this.client));
+		});
+	}
+
+	// def deleteRole
+	deleteRole(role) {
+		if (role.server.id === role.id) {
+			return Promise.reject(new Error("Stop trying to delete the @everyone role. It is futile"));
+		} else {
+			return this.apiRequest("del", `${ _Constants.Endpoints.SERVER_ROLES(role.server.id) }/${ role.id }`, true);
+		}
+	}
+
+	//def addMemberToRole
+	addMemberToRole(member, roles) {
+		member = this.resolver.resolveUser(member);
+
+		if (!member) {
+			return Promise.reject(new Error("user not found"));
+		}
+
+		if (!Array.isArray(roles) || roles.length === 0) {
+			roles = this.resolver.resolveRole(roles);
+			if (roles) {
+				roles = [roles];
+			} else {
+				return Promise.reject(new Error("invalid array of roles"));
+			}
+		} else {
+			roles = roles.map(r => this.resolver.resolveRole(r));
+		}
+
+		if (roles.some(role => !role.server.memberMap[member.id])) {
+			return Promise.reject(new Error("Role does not exist on same server as member"));
+		}
+
+		var roleIDs = roles[0].server.memberMap[member.id].roles.map(r => r && r.id || r);
+
+		for (var i = 0; i < roles.length; i++) {
+			if (!~roleIDs.indexOf(roles[i].id)) {
+				roleIDs.push(roles[i].id);
+			};
+		};
+
+		return this.apiRequest("patch", `${ _Constants.Endpoints.SERVER_MEMBERS(roles[0].server.id) }/${ member.id }`, true, {
+			roles: roleIDs
+		});
+	}
+
+	memberHasRole(member, role) {
+		role = this.resolver.resolveRole(role);
+		member = this.resolver.resolveUser(member);
+
+		if (!role) {
+			throw new Error("invalid role");
+		}
+		if (!member) {
+			throw new Error("user not found");
+		}
+
+		var roledata = role.server.rolesOf(member);
+		if (roledata) {
+			for (var r of roledata) {
+				if (r.id == role.id) {
+					return true;
+				}
+			}
+		}
+		return false;
+	}
+
+	//def removeMemberFromRole
+	removeMemberFromRole(member, roles) {
+		member = this.resolver.resolveUser(member);
+
+		if (!member) {
+			return Promise.reject(new Error("user not found"));
+		}
+
+		if (!Array.isArray(roles) || roles.length === 0) {
+			roles = this.resolver.resolveRole(roles);
+			if (roles) {
+				roles = [roles];
+			} else {
+				return Promise.reject(new Error("invalid array of roles"));
+			}
+		} else {
+			roles = roles.map(r => this.resolver.resolveRole(r));
+		}
+
+		var roleIDs = roles[0].server.memberMap[member.id].roles.map(r => r && r.id || r);
+
+		for (var role of roles) {
+			if (!role.server.memberMap[member.id]) {
+				return Promise.reject(new Error("member not in server"));
+			}
+			for (var item in roleIDs) {
+				if (roleIDs[item] === role.id) {
+					roleIDs.splice(item, 1);
+					break;
+				}
+			}
+		}
+
+		return this.apiRequest("patch", `${ _Constants.Endpoints.SERVER_MEMBERS(roles[0].server.id) }/${ member.id }`, true, {
+			roles: roleIDs
+		});
+	}
+
+	// def createInvite
+	createInvite(chanServ, options) {
+		return this.resolver.resolveChannel(chanServ).then(channel => {
+			if (!options) {
+				options = {
+					validate: null
+				};
+			} else {
+				options.max_age = options.maxAge || 0;
+				options.max_uses = options.maxUses || 0;
+				options.temporary = options.temporary || false;
+				options.xkcdpass = options.xkcd || false;
+			}
+
+			return this.apiRequest("post", _Constants.Endpoints.CHANNEL_INVITES(channel.id), true, options).then(res => new _Invite2.default(res, this.channels.get("id", res.channel.id), this.client));
+		});
+	}
+
+	//def deleteInvite
+	deleteInvite(invite) {
+		invite = this.resolver.resolveInviteID(invite);
+		if (!invite) {
+			throw new Error("Not a valid invite");
+		}
+		return this.apiRequest("del", _Constants.Endpoints.INVITE(invite), true);
+	}
+
+	//def getInvite
+	getInvite(invite) {
+		invite = this.resolver.resolveInviteID(invite);
+		if (!invite) {
+			return Promise.reject(new Error("Not a valid invite"));
+		}
+
+		return this.apiRequest("get", _Constants.Endpoints.INVITE(invite), true).then(res => {
+			if (!this.channels.has("id", res.channel.id)) {
+				return new _Invite2.default(res, null, this.client);
+			}
+			return this.apiRequest("post", _Constants.Endpoints.CHANNEL_INVITES(res.channel.id), true, { validate: invite }).then(res2 => new _Invite2.default(res2, this.channels.get("id", res.channel.id), this.client));
+		});
+	}
+
+	//def getInvites
+	getInvites(channel) {
+		if (!(channel instanceof _Channel2.default)) {
+			var server = this.resolver.resolveServer(channel);
+			if (server) {
+				return this.apiRequest("get", _Constants.Endpoints.SERVER_INVITES(server.id), true).then(res => {
+					return res.map(data => new _Invite2.default(data, this.channels.get("id", data.channel.id), this.client));
+				});
+			}
+		}
+		return this.resolver.resolveChannel(channel).then(channel => {
+			return this.apiRequest("get", _Constants.Endpoints.CHANNEL_INVITES(channel.id), true).then(res => {
+				return res.map(data => new _Invite2.default(data, this.channels.get("id", data.channel.id), this.client));
+			});
+		});
+	}
+
+	//def overwritePermissions
+	overwritePermissions(channel, role, updated) {
+		return this.resolver.resolveChannel(channel).then(channel => {
+			if (!channel instanceof _ServerChannel2.default) {
+				return Promise.reject(new Error("Not a server channel"));
+			}
+
+			var data = {
+				allow: 0,
+				deny: 0
+			};
+
+			if (role instanceof String || typeof role === "string") {
+				role = this.resolver.resolveUser(role) || this.resolver.resolveRole(role);
+			}
+
+			if (role instanceof _User2.default) {
+				data.id = role.id;
+				data.type = "member";
+			} else if (role instanceof _Role2.default) {
+				data.id = role.id;
+				data.type = "role";
+			} else {
+				return Promise.reject(new Error("Role could not be resolved"));
+			}
+
+			var previousOverwrite = channel.permissionOverwrites.get("id", data.id);
+
+			if (previousOverwrite) {
+				data.allow |= previousOverwrite.allow;
+				data.deny |= previousOverwrite.deny;
+			}
+
+			for (var perm in updated) {
+				if (updated[perm] === true) {
+					data.allow |= _Constants.Permissions[perm] || 0;
+					data.deny &= ~(_Constants.Permissions[perm] || 0);
+				} else if (updated[perm] === false) {
+					data.allow &= ~(_Constants.Permissions[perm] || 0);
+					data.deny |= _Constants.Permissions[perm] || 0;
+				} else {
+					data.allow &= ~(_Constants.Permissions[perm] || 0);
+					data.deny &= ~(_Constants.Permissions[perm] || 0);
+				}
+			}
+
+			return this.apiRequest("put", `${ _Constants.Endpoints.CHANNEL_PERMISSIONS(channel.id) }/${ data.id }`, true, data);
+		});
+	}
+
+	//def setStatus
+	setStatus(idleStatus, game) {
+
+		if (idleStatus === "online" || idleStatus === "here" || idleStatus === "available") {
+			this.idleStatus = null;
+		} else if (idleStatus === "idle" || idleStatus === "away") {
+			this.idleStatus = Date.now();
+		} else {
+			this.idleStatus = this.idleStatus || null; //undefined
+		}
+
+		// convert undefined and empty string to null
+		if (typeof game === "string" && !game.length) game = null;
+
+		this.game = game === null ? null : !game ? this.game || null : typeof game === "string" ? { name: game } : game;
+
+		var packet = {
+			op: 3,
+			d: {
+				idle_since: this.idleStatus,
+				game: this.game
+			}
+		};
+
+		this.sendWS(packet);
+
+		this.user.status = this.idleStatus ? "idle" : "online";
+		this.user.game = this.game;
+
+		return Promise.resolve();
+	}
+
+	//def sendTyping
+	sendTyping(channel) {
+		return this.resolver.resolveChannel(channel).then(channel => this.apiRequest("post", _Constants.Endpoints.CHANNEL(channel.id) + "/typing", true));
+	}
+
+	//def startTyping
+	startTyping(channel) {
+		return this.resolver.resolveChannel(channel).then(channel => {
+
+			if (this.intervals.typing[channel.id]) {
+				// typing interval already exists, leave it alone
+				throw new Error("Already typing in that channel");
+			}
+
+			this.intervals.typing[channel.id] = setInterval(() => this.sendTyping(channel).catch(error => this.client.emit("error", error)), 4000);
+
+			return this.sendTyping(channel);
+		});
+	}
+
+	//def stopTyping
+	stopTyping(channel) {
+		return this.resolver.resolveChannel(channel).then(channel => {
+
+			if (!this.intervals.typing[channel.id]) {
+				// typing interval doesn"t exist
+				throw new Error("Not typing in that channel");
+			}
+
+			clearInterval(this.intervals.typing[channel.id]);
+			this.intervals.typing[channel.id] = false;
+		});
+	}
+
+	//def updateDetails
+	updateDetails(data) {
+		if (!this.user.bot && !(this.email || data.email)) {
+			throw new Error("Must provide email since a token was used to login");
+		}
+
+		let options = {};
+
+		if (data.username) {
+			options.username = data.username;
+		} else {
+			options.username = this.user.username;
+		}
+
+		if (data.avatar) {
+			options.avatar = this.resolver.resolveToBase64(data.avatar);
+		}
+
+		if (this.email || data.email) {
+			options.email = data.email || this.email;
+			options.new_password = data.newPassword || null;
+			options.password = data.password || this.password;
+		}
+
+		return this.apiRequest("patch", _Constants.Endpoints.ME, true, options);
+	}
+
+	//def setAvatar
+	setAvatar(avatar) {
+		return this.updateDetails({ avatar });
+	}
+
+	//def setUsername
+	setUsername(username) {
+		return this.updateDetails({ username });
+	}
+
+	//def setChannelTopic
+	setChannelTopic(channel, topic = "") {
+		topic = topic || "";
+
+		return this.updateChannel(channel, { topic: topic });
+	}
+
+	//def setChannelName
+	setChannelName(channel, name) {
+		name = name || "unnamed-channel";
+
+		return this.updateChannel(channel, { name: name });
+	}
+
+	//def setChannelPosition
+	setChannelPosition(channel, position) {
+		position = position || 0;
+
+		return this.updateChannel(channel, { position: position });
+	}
+
+	//def setChannelUserLimit
+	setChannelUserLimit(channel, limit) {
+		limit = limit || 0; // default 0 = no limit
+
+		return this.updateChannel(channel, { userLimit: limit });
+	}
+
+	//def setChannelBitrate
+	setChannelBitrate(channel, kbitrate) {
+		kbitrate = kbitrate || 64; // default 64kbps
+
+		return this.updateChannel(channel, { bitrate: kbitrate });
+	}
+
+	//def updateChannel
+	updateChannel(channel, data) {
+		return this.resolver.resolveChannel(channel).then(channel => {
+			if (!channel) {
+				return Promise.reject(new Error("Failed to resolve channel"));
+			}
+
+			data = {
+				name: data.name || channel.name,
+				topic: data.topic || channel.topic,
+				position: data.position ? data.position : channel.position,
+				user_limit: data.userLimit ? data.userLimit : channel.userLimit,
+				bitrate: data.bitrate ? data.bitrate : channel.bitrate ? channel.bitrate : undefined
+			};
+
+			if (data.position < 0) {
+				return Promise.reject(new Error("Position cannot be less than 0"));
+			}
+
+			if (data.user_limit < 0 || data.user_limit > 99) {
+				return Promise.reject(new Error("User limit must be between 0-99"));
+			}
+
+			if (data.kbitrate < 8 || data.kbitrate > 96) {
+				return Promise.reject(new Error("Bitrate must be between 8-96kbps"));
+			}
+
+			if (data.bitrate) {
+				data.bitrate *= 1000; // convert to bits before sending
+			}
+
+			return this.apiRequest("patch", _Constants.Endpoints.CHANNEL(channel.id), true, data).then(res => {
+				channel.name = data.name;
+				channel.topic = data.topic;
+				channel.position = data.position;
+				channel.userLimit = data.user_limit;
+				channel.bitrate = Math.ceil(data.bitrate / 1000);
+				channel._bitrate = data.bitrate;
+			});
+		});
+	}
+
+	//def addFriend
+	addFriend(user) {
+		if (this.user.bot) return Promise.reject(new Error("user is a bot, bot's do not have friends support"));
+
+		var id;
+		if (user instanceof String || typeof user === "string") id = user;else if (user instanceof _User2.default) {
+			user = this.resolver.resolveUser(user);
+			id = user.id;
+		} else {
+			if (user.username && user.discriminator) // add by username and discriminator (pass in an object)
+				return this.apiRequest("put", _Constants.Endpoints.FRIENDS, true, user);else return Promise.reject("invalid user");
+		}
+
+		return this.apiRequest("put", `${ _Constants.Endpoints.FRIENDS }/${ id }`, true, {});
+	}
+
+	//def removeFriend
+	removeFriend(user) {
+		if (this.user.bot) return Promise.reject(new Error("user is a bot, bot's do not have friends support"));
+
+		user = this.resolver.resolveUser(user);
+
+		return this.apiRequest("delete", `${ _Constants.Endpoints.FRIENDS }/${ user.id }`, true);
+	}
+
+	getServerWebhooks(server) {
+		server = this.resolver.resolveServer(server);
+
+		if (!server) {
+			return Promise.reject(new Error("Failed to resolve server"));
+		}
+
+		return this.apiRequest("get", _Constants.Endpoints.SERVER_WEBHOOKS(server.id), true).then(res => res.map(webhook => {
+			let channel = this.channels.get("id", webhook.channel_id);
+			return channel.webhooks.add(new _Webhook2.default(webhook, server, channel, this.users.get("id", webhook.user.id)));
+		}));
+	}
+
+	getChannelWebhooks(channel) {
+		return this.resolver.resolveChannel(channel).then(channel => {
+			if (!channel) {
+				return Promise.reject(new Error("Failed to resolve channel"));
+			}
+
+			return this.apiRequest("get", _Constants.Endpoints.CHANNEL_WEBHOOKS(channel.id), true).then(res => res.map(webhook => channel.webhooks.add(new _Webhook2.default(webhook, this.servers.get("id", webhook.guild_id), channel, this.users.get("id", webhook.user.id)))));
+		});
+	}
+
+	editWebhook(webhook, options = {}) {
+		return this.resolver.resolveWebhook(webhook).then(webhook => {
+			if (!webhook) {
+				return Promise.reject(new Error(" Failed to resolve webhook"));
+			}
+
+			if (options.hasOwnProperty("avatar")) {
+				options.avatar = this.resolver.resolveToBase64(options.avatar);
+			}
+
+			return this.apiRequest("patch", _Constants.Endpoints.WEBHOOK(webhook.id), true, options).then(res => {
+				webhook.name = res.name;
+				webhook.avatar = res.hasOwnProperty('avatar') ? res.avatar : webhook.avatar;
+			});
+		});
+	}
+
+	createWebhook(channel, options = {}) {
+		return this.resolver.resolveChannel(channel).then(destination => {
+			if (!channel) {
+				return Promise.reject(new Error(" Failed to resolve channel"));
+			}
+
+			if (options.hasOwnProperty("avatar")) {
+				options.avatar = this.resolver.resolveToBase64(options.avatar);
+			}
+
+			return this.apiRequest("post", _Constants.Endpoints.CHANNEL_WEBHOOKS(destination.id), true, options).then(webhook => channel.webhooks.add(new _Webhook2.default(webhook, this.servers.get("id", webhook.guild_id), channel, this.users.get("id", webhook.user.id))));
+		});
+	}
+
+	deleteWebhook(webhook) {
+		return this.resolver.resolveWebhook(webhook).then(webhook => {
+			if (!webhook) {
+				return Promise.reject(new Error(" Failed to resolve webhook"));
+			}
+
+			return this.apiRequest("delete", _Constants.Endpoints.WEBHOOK(webhook.id), true).then(() => {
+				webhook.channel.webhooks.remove(webhook);
+			});
+		});
+	}
+
+	sendWebhookMessage(webhook, _content, options = {}) {
+		return this.resolver.resolveWebhook(webhook).then(destination => {
+			var content = this.resolver.resolveString(_content);
+
+			if (this.client.options.disableEveryone || options.disableEveryone) {
+				content = content.replace(/(@)(everyone|here)/g, '$1\u200b$2');
+			}
+
+			if (!options.hasOwnProperty("username")) {
+				options.username = this.user.username;
+			}
+
+			let slack;
+			if (options.hasOwnProperty("slack")) {
+				slack = options.slack;
+				delete options["slack"];
+			}
+
+			options.content = _content;
+
+			return this.apiRequest("post", `${ _Constants.Endpoints.WEBHOOK_MESSAGE(destination.id, destination.token) }${ slack ? "/slack" : "" }?wait=true`, true, options);
+		});
+	}
+
+	//def getOAuthApplication
+	getOAuthApplication(appID) {
+		appID = appID || "@me";
+		return this.apiRequest("get", _Constants.Endpoints.OAUTH2_APPLICATION(appID), true);
+	}
+
+	//def ack
+	ack(msg) {
+		msg = this.resolver.resolveMessage(msg);
+
+		if (!msg) {
+			Promise.reject(new Error("Message does not exist"));
+		}
+
+		return this.apiRequest("post", _Constants.Endpoints.CHANNEL_MESSAGE(msg.channel.id, msg.id) + "/ack", true);
+	}
+
+	sendWS(object) {
+		if (this.websocket) {
+			this.websocket.send(JSON.stringify(object));
+		}
+	}
+
+	createWS(url) {
+		if (this.websocket) {
+			return false;
+		}
+		if (!url.endsWith("/")) {
+			url += "/";
+		}
+		url += "?encoding=json&v=" + GATEWAY_VERSION;
+
+		this.websocket = new _ws2.default(url);
+
+		this.websocket.onopen = () => {};
+
+		this.websocket.onclose = event => {
+			this.websocket = null;
+			this.state = _ConnectionState2.default.DISCONNECTED;
+			if (event && event.code) {
+				this.client.emit("warn", "WS close: " + event.code);
+				var err;
+				if (event.code === 4001) {
+					err = new Error("Gateway received invalid OP code");
+				} else if (event.code === 4005) {
+					err = new Error("Gateway received invalid message");
+				} else if (event.code === 4003) {
+					err = new Error("Not authenticated");
+				} else if (event.code === 4004) {
+					err = new Error("Authentication failed");
+				} else if (event.code === 4005) {
+					err = new Error("Already authenticated");
+				}if (event.code === 4006 || event.code === 4009) {
+					err = new Error("Invalid session");
+				} else if (event.code === 4007) {
+					this.sequence = 0;
+					err = new Error("Invalid sequence number");
+				} else if (event.code === 4008) {
+					err = new Error("Gateway connection was ratelimited");
+				} else if (event.code === 4010) {
+					err = new Error("Invalid shard key");
+				}
+				if (err) {
+					this.client.emit("error", err);
+				}
+			}
+			this.disconnected(this.client.options.autoReconnect);
+		};
+
+		this.websocket.onerror = e => {
+			this.client.emit("error", e);
+			this.websocket = null;
+			this.state = _ConnectionState2.default.DISCONNECTED;
+			this.disconnected(this.client.options.autoReconnect);
+		};
+
+		this.websocket.onmessage = e => {
+			if (e.data instanceof Buffer) {
+				if (!zlib) zlib = require("zlib");
+				e.data = zlib.inflateSync(e.data).toString();
+			}
+
+			var packet;
+			try {
+				packet = JSON.parse(e.data);
+			} catch (e) {
+				this.client.emit("error", e);
+				return;
+			}
+
+			this.client.emit("raw", packet);
+
+			if (packet.s) {
+				this.sequence = packet.s;
+			}
+
+			switch (packet.op) {
+				case 0:
+					this.processPacket(packet);
+					break;
+				case 1:
+					console.log("set it to true 1");
+					this.heartbeatAcked = true;
+					this.heartbeat();
+					break;
+				case 7:
+					this.disconnected(true);
+					break;
+				case 9:
+					this.sessionID = null;
+					this.sequence = 0;
+					this.identify();
+					break;
+				case 10:
+					if (this.sessionID) {
+						this.resume();
+					} else {
+						this.identify();
+					}
+					console.log("set it to true 10 1");
+					this.heartbeatAcked = true; // start off without assuming we didn't get a missed heartbeat acknowledge right away;
+					this.heartbeat();
+					console.log("set it to true 10 2");
+					this.heartbeatAcked = true;
+					this.intervals.kai = setInterval(() => this.heartbeat(), packet.d.heartbeat_interval);
+					break;
+				case 11:
+					console.log("set heartbeatAcked to true because heartbeat was acked.");
+					this.heartbeatAcked = true;
+					break;
+				default:
+					this.client.emit("unknown", packet);
+					break;
+			}
+		};
+	}
+
+	processPacket(packet) {
+		var client = this.client;
+		var data = packet.d;
+		switch (packet.t) {
+			case _Constants.PacketType.RESUME:
+			case _Constants.PacketType.READY:
+				this.autoReconnectInterval = 1000;
+				this.state = _ConnectionState2.default.READY;
+
+				if (packet.t === _Constants.PacketType.RESUME) {
+					break;
+				}
+
+				this.sessionID = data.session_id;
+				var startTime = Date.now();
+
+				this.user = this.users.add(new _User2.default(data.user, client));
+
+				this.forceFetchCount = {};
+				this.forceFetchQueue = [];
+				this.forceFetchLength = 1;
+
+				data.guilds.forEach(server => {
+					if (!server.unavailable) {
+						server = this.servers.add(new _Server2.default(server, client));
+						if (client.options.bot === false) {
+							this.unsyncedGuilds++;
+							this.syncGuild(server.id);
+						}
+						if (this.client.options.forceFetchUsers && server.members && server.members.length < server.memberCount) {
+							this.getGuildMembers(server.id, Math.ceil(server.memberCount / 1000));
+						}
+					} else {
+						client.emit("debug", "server " + server.id + " was unavailable, could not create (ready)");
+						this.unavailableServers.add(server);
+					}
+				});
+				data.private_channels.forEach(pm => {
+					this.private_channels.add(new _PMChannel2.default(pm, client));
+				});
+				if (!data.user.bot) {
+					// bots dont have friends
+					data.relationships.forEach(friend => {
+						if (friend.type === 1) {
+							// is a friend
+							this.friends.add(new _User2.default(friend.user, client));
+						} else if (friend.type === 2) {
+							// incoming friend requests
+							this.blocked_users.add(new _User2.default(friend.user, client));
+						} else if (friend.type === 3) {
+							// incoming friend requests
+							this.incoming_friend_requests.add(new _User2.default(friend.user, client));
+						} else if (friend.type === 4) {
+							// outgoing friend requests
+							this.outgoing_friend_requests.add(new _User2.default(friend.user, client));
+						} else {
+							client.emit("warn", "unknown friend type " + friend.type);
+						}
+					});
+				} else {
+					this.friends = null;
+					this.blocked_users = null;
+					this.incoming_friend_requests = null;
+					this.outgoing_friend_requests = null;
+				}
+
+				// add notes to users
+				if (data.notes) {
+					for (note in data.notes) {
+						var user = this.users.get("id", note);
+						if (user) {
+							var newUser = user;
+							newUser.note = data.notes[note];
+
+							this.users.update(user, newUser);
+						} else {
+							client.emit("warn", "note in ready packet but user not cached");
+						}
+					}
+				}
+
+				client.emit("debug", `ready packet took ${ Date.now() - startTime }ms to process`);
+				client.emit("debug", `ready with ${ this.servers.length } servers, ${ this.unavailableServers.length } unavailable servers, ${ this.channels.length } channels and ${ this.users.length } users cached.`);
+
+				this.restartServerCreateTimeout();
+
+				break;
+
+			case _Constants.PacketType.MESSAGE_CREATE:
+				// format: https://discordapi.readthedocs.org/en/latest/reference/channels/messages.html#message-format
+				var channel = this.channels.get("id", data.channel_id) || this.private_channels.get("id", data.channel_id);
+				if (channel) {
+					var msg = channel.messages.add(new _Message2.default(data, channel, client));
+					channel.lastMessageID = msg.id;
+
+					if (this.messageAwaits[channel.id + msg.author.id]) {
+						this.messageAwaits[channel.id + msg.author.id].map(fn => fn(msg));
+						this.messageAwaits[channel.id + msg.author.id] = null;
+						client.emit("message", msg, true); //2nd param is isAwaitedMessage
+					} else {
+						client.emit("message", msg);
+					}
+				} else {
+					client.emit("warn", "message created but channel is not cached");
+				}
+				break;
+			case _Constants.PacketType.MESSAGE_DELETE:
+				var channel = this.channels.get("id", data.channel_id) || this.private_channels.get("id", data.channel_id);
+				if (channel) {
+					// potentially blank
+					var msg = channel.messages.get("id", data.id);
+					client.emit("messageDeleted", msg, channel);
+					if (msg) {
+						channel.messages.remove(msg);
+					} else {
+						client.emit("debug", "message was deleted but message is not cached");
+					}
+				} else {
+					client.emit("warn", "message was deleted but channel is not cached");
+				}
+				break;
+			case _Constants.PacketType.MESSAGE_DELETE_BULK:
+				var channel = this.channels.get("id", data.channel_id) || this.private_channels.get("id", data.channel_id);
+				if (channel) {
+					data.ids.forEach(id => {
+						// potentially blank
+						var msg = channel.messages.get("id", id);
+						client.emit("messageDeleted", msg, channel);
+						if (msg) {
+							channel.messages.remove(msg);
+						} else {
+							client.emit("debug", "message was deleted but message is not cached");
+						}
+					});
+				} else {
+					client.emit("warn", "message was deleted but channel is not cached");
+				}
+				break;
+			case _Constants.PacketType.MESSAGE_UPDATE:
+				// format https://discordapi.readthedocs.org/en/latest/reference/channels/messages.html#message-format
+				var channel = this.channels.get("id", data.channel_id) || this.private_channels.get("id", data.channel_id);
+				if (channel) {
+					// potentially blank
+					var msg = channel.messages.get("id", data.id);
+
+					if (msg) {
+						// old message exists
+						data.nonce = data.nonce !== undefined ? data.nonce : msg.nonce;
+						data.attachments = data.attachments !== undefined ? data.attachments : msg.attachments;
+						data.tts = data.tts !== undefined ? data.tts : msg.tts;
+						data.embeds = data.embeds !== undefined ? data.embeds : msg.embeds;
+						data.timestamp = data.timestamp !== undefined ? data.timestamp : msg.timestamp;
+						data.mention_everyone = data.mention_everyone !== undefined ? data.mention_everyone : msg.everyoneMentioned;
+						data.content = data.content !== undefined ? data.content : msg.content;
+						data.mentions = data.mentions !== undefined ? data.mentions : msg.mentions;
+						data.author = data.author !== undefined ? data.author : msg.author;
+						msg = new _Message2.default(msg, channel, client);
+					} else if (!data.author || !data.content) {
+						break;
+					}
+					var nmsg = new _Message2.default(data, channel, client);
+					client.emit("messageUpdated", msg, nmsg);
+					if (msg) {
+						channel.messages.update(msg, nmsg);
+					}
+				} else {
+					client.emit("warn", "message was updated but channel is not cached");
+				}
+				break;
+			case _Constants.PacketType.SERVER_CREATE:
+				var server = this.servers.get("id", data.id);
+				if (!server) {
+					if (!data.unavailable) {
+						server = this.servers.add(new _Server2.default(data, client));
+						if (client.options.bot === false) {
+							this.unsyncedGuilds++;
+							this.syncGuild(server.id);
+						}
+						if (client.readyTime) {
+							client.emit("serverCreated", server);
+						}
+						if (this.client.options.forceFetchUsers && server.large && server.members.length < server.memberCount) {
+							this.getGuildMembers(server.id, Math.ceil(server.memberCount / 1000));
+						}
+						var unavailable = this.unavailableServers.get("id", server.id);
+						if (unavailable) {
+							this.unavailableServers.remove(unavailable);
+						}
+						this.restartServerCreateTimeout();
+					} else {
+						client.emit("debug", "server was unavailable, could not create");
+					}
+				}
+				break;
+			case _Constants.PacketType.SERVER_DELETE:
+				var server = this.servers.get("id", data.id);
+				if (server) {
+					if (!data.unavailable) {
+						client.emit("serverDeleted", server);
+
+						for (var channel of server.channels) {
+							this.channels.remove(channel);
+						}
+
+						this.servers.remove(server);
+
+						for (var user of server.members) {
+							var found = false;
+							for (var s of this.servers) {
+								if (s.members.get("id", user.id)) {
+									found = true;
+									break;
+								}
+							}
+							if (!found) {
+								this.users.remove(user);
+							}
+						}
+					} else {
+						client.emit("debug", "server was unavailable, could not update");
+					}
+					this.buckets["bot:msg:guild:" + packet.d.id] = this.buckets["dmsg:" + packet.d.id] = this.buckets["bdmsg:" + packet.d.id] = this.buckets["guild_member:" + packet.d.id] = this.buckets["guild_member_nick:" + packet.d.id] = undefined;
+				} else {
+					client.emit("warn", "server was deleted but it was not in the cache");
+				}
+				break;
+			case _Constants.PacketType.SERVER_UPDATE:
+				var server = this.servers.get("id", data.id);
+				if (server) {
+					// server exists
+					data.members = data.members || [];
+					data.channels = data.channels || [];
+					var newserver = new _Server2.default(data, client);
+					newserver.members = server.members;
+					newserver.memberMap = server.memberMap;
+					newserver.channels = server.channels;
+					if (newserver.equalsStrict(server)) {
+						// already the same don't do anything
+						client.emit("debug", "received server update but server already updated");
+					} else {
+						client.emit("serverUpdated", new _Server2.default(server, client), newserver);
+						this.servers.update(server, newserver);
+					}
+				} else if (!server) {
+					client.emit("warn", "server was updated but it was not in the cache");
+				}
+				break;
+			case _Constants.PacketType.CHANNEL_CREATE:
+
+				var channel = this.channels.get("id", data.id);
+
+				if (!channel) {
+
+					var server = this.servers.get("id", data.guild_id);
+					if (server) {
+						var chan = null;
+						if (data.type === 0) {
+							chan = this.channels.add(new _TextChannel2.default(data, client, server));
+						} else {
+							chan = this.channels.add(new _VoiceChannel2.default(data, client, server));
+						}
+						client.emit("channelCreated", server.channels.add(chan));
+					} else if (data.is_private) {
+						client.emit("channelCreated", this.private_channels.add(new _PMChannel2.default(data, client)));
+					} else {
+						client.emit("warn", "channel created but server does not exist");
+					}
+				} else {
+					client.emit("warn", "channel created but already in cache");
+				}
+
+				break;
+			case _Constants.PacketType.CHANNEL_DELETE:
+				var channel = this.channels.get("id", data.id) || this.private_channels.get("id", data.id);
+				if (channel) {
+
+					if (channel.server) {
+						// accounts for PMs
+						channel.server.channels.remove(channel);
+						this.channels.remove(channel);
+					} else {
+						this.private_channels.remove(channel);
+					}
+
+					client.emit("channelDeleted", channel);
+				} else {
+					client.emit("warn", "channel deleted but already out of cache?");
+				}
+				break;
+			case _Constants.PacketType.CHANNEL_UPDATE:
+				var channel = this.channels.get("id", data.id) || this.private_channels.get("id", data.id);
+				if (channel) {
+
+					if (channel instanceof _PMChannel2.default) {
+						//PM CHANNEL
+						client.emit("channelUpdated", new _PMChannel2.default(channel, client), this.private_channels.update(channel, new _PMChannel2.default(data, client)));
+					} else {
+						if (channel.server) {
+							if (channel.type === 0) {
+								//TEXT CHANNEL
+								var chan = new _TextChannel2.default(data, client, channel.server);
+								chan.messages = channel.messages;
+								client.emit("channelUpdated", channel, chan);
+								channel.server.channels.update(channel, chan);
+								this.channels.update(channel, chan);
+							} else {
+								//VOICE CHANNEL
+								data.members = channel.members;
+								var chan = new _VoiceChannel2.default(data, client, channel.server);
+								client.emit("channelUpdated", channel, chan);
+								channel.server.channels.update(channel, chan);
+								this.channels.update(channel, chan);
+							}
+						} else {
+							client.emit("warn", "channel updated but server non-existant");
+						}
+					}
+				} else {
+					client.emit("warn", "channel updated but not in cache");
+				}
+				break;
+			case _Constants.PacketType.SERVER_ROLE_CREATE:
+				var server = this.servers.get("id", data.guild_id);
+				if (server) {
+					client.emit("serverRoleCreated", server.roles.add(new _Role2.default(data.role, server, client)), server);
+				} else {
+					client.emit("warn", "server role made but server not in cache");
+				}
+				break;
+			case _Constants.PacketType.SERVER_ROLE_DELETE:
+				var server = this.servers.get("id", data.guild_id);
+				if (server) {
+					var role = server.roles.get("id", data.role_id);
+					if (role) {
+						server.roles.remove(role);
+						client.emit("serverRoleDeleted", role);
+					} else {
+						client.emit("warn", "server role deleted but role not in cache");
+					}
+				} else {
+					client.emit("warn", "server role deleted but server not in cache");
+				}
+				break;
+			case _Constants.PacketType.SERVER_ROLE_UPDATE:
+				var server = this.servers.get("id", data.guild_id);
+				if (server) {
+					var role = server.roles.get("id", data.role.id);
+					if (role) {
+						var newRole = new _Role2.default(data.role, server, client);
+						client.emit("serverRoleUpdated", new _Role2.default(role, server, client), newRole);
+						server.roles.update(role, newRole);
+					} else {
+						client.emit("warn", "server role updated but role not in cache");
+					}
+				} else {
+					client.emit("warn", "server role updated but server not in cache");
+				}
+				break;
+			case _Constants.PacketType.SERVER_MEMBER_ADD:
+				var server = this.servers.get("id", data.guild_id);
+				if (server) {
+
+					server.memberMap[data.user.id] = {
+						roles: data.roles,
+						mute: false,
+						selfMute: false,
+						deaf: false,
+						selfDeaf: false,
+						joinedAt: Date.parse(data.joined_at),
+						nick: data.nick || null
+					};
+
+					server.memberCount++;
+
+					client.emit("serverNewMember", server, server.members.add(this.users.add(new _User2.default(data.user, client))));
+				} else {
+					client.emit("warn", "server member added but server doesn't exist in cache");
+				}
+				break;
+			case _Constants.PacketType.SERVER_MEMBER_REMOVE:
+				var server = this.servers.get("id", data.guild_id);
+				if (server) {
+					var user = this.users.get("id", data.user.id);
+					if (user) {
+						client.emit("serverMemberRemoved", server, user);
+						server.memberMap[data.user.id] = null;
+						server.members.remove(user);
+						server.memberCount--;
+					} else {
+						client.emit("warn", "server member removed but user doesn't exist in cache");
+					}
+				} else {
+					client.emit("warn", "server member removed but server doesn't exist in cache");
+				}
+				break;
+			case _Constants.PacketType.SERVER_MEMBER_UPDATE:
+				var server = this.servers.get("id", data.guild_id);
+				if (server) {
+					var user = this.users.add(new _User2.default(data.user, client));
+					if (user) {
+						var oldMember = null;
+						if (server.memberMap[data.user.id]) {
+							oldMember = {
+								roles: server.memberMap[data.user.id].roles,
+								mute: server.memberMap[data.user.id].mute,
+								selfMute: server.memberMap[data.user.id].selfMute,
+								deaf: server.memberMap[data.user.id].deaf,
+								selfDeaf: server.memberMap[data.user.id].selfDeaf,
+								nick: server.memberMap[data.user.id].nick
+							};
+						} else {
+							server.memberMap[data.user.id] = {};
+						}
+						server.memberMap[data.user.id].roles = data.roles ? data.roles : server.memberMap[data.user.id].roles;
+						server.memberMap[data.user.id].mute = data.mute || server.memberMap[data.user.id].mute;
+						server.memberMap[data.user.id].selfMute = data.self_mute === undefined ? server.memberMap[data.user.id].selfMute : data.self_mute;
+						server.memberMap[data.user.id].deaf = data.deaf || server.memberMap[data.user.id].deaf;
+						server.memberMap[data.user.id].selfDeaf = data.self_deaf === undefined ? server.memberMap[data.user.id].selfDeaf : data.self_deaf;
+						server.memberMap[data.user.id].nick = data.nick === undefined ? server.memberMap[data.user.id].nick : data.nick || null;
+						client.emit("serverMemberUpdated", server, user, oldMember);
+					} else {
+						client.emit("warn", "server member removed but user doesn't exist in cache");
+					}
+				} else {
+					client.emit("warn", "server member updated but server doesn't exist in cache");
+				}
+				break;
+			case _Constants.PacketType.PRESENCE_UPDATE:
+
+				var user = this.users.add(new _User2.default(data.user, client));
+				var server = this.servers.get("id", data.guild_id);
+
+				if (user && server) {
+
+					server.members.add(user);
+
+					data.user.username = data.user.username || user.username;
+					data.user.id = data.user.id || user.id;
+					data.user.avatar = data.user.avatar !== undefined ? data.user.avatar : user.avatar;
+					data.user.discriminator = data.user.discriminator || user.discriminator;
+					data.user.status = data.status || user.status;
+					data.user.game = data.game !== undefined ? data.game : user.game;
+					data.user.bot = data.user.bot !== undefined ? data.user.bot : user.bot;
+
+					var presenceUser = new _User2.default(data.user, client);
+
+					if (!presenceUser.equalsStrict(user)) {
+						client.emit("presence", user, presenceUser);
+						this.users.update(user, presenceUser);
+					}
+				} else {
+					client.emit("warn", "presence update but user/server not in cache");
+				}
+
+				break;
+			case _Constants.PacketType.USER_UPDATE:
+
+				var user = this.users.get("id", data.id);
+
+				if (user) {
+
+					data.username = data.username || user.username;
+					data.id = data.id || user.id;
+					data.avatar = data.avatar || user.avatar;
+					data.discriminator = data.discriminator || user.discriminator;
+					this.email = data.email || this.email;
+
+					var presenceUser = new _User2.default(data, client);
+
+					client.emit("presence", user, presenceUser);
+					this.users.update(user, presenceUser);
+				} else {
+					client.emit("warn", "user update but user not in cache (this should never happen)");
+				}
+
+				break;
+			case _Constants.PacketType.TYPING:
+
+				var user = this.users.get("id", data.user_id);
+				var channel = this.channels.get("id", data.channel_id) || this.private_channels.get("id", data.channel_id);
+
+				if (user && channel) {
+					if (user.typing.since) {
+						user.typing.since = Date.now();
+						user.typing.channel = channel;
+					} else {
+						user.typing.since = Date.now();
+						user.typing.channel = channel;
+						client.emit("userTypingStarted", user, channel);
+					}
+					setTimeout(() => {
+						if (Date.now() - user.typing.since > 5500) {
+							// they haven't typed since
+							user.typing.since = null;
+							user.typing.channel = null;
+							client.emit("userTypingStopped", user, channel);
+						}
+					}, 6000);
+				} else {
+					client.emit("warn", "user typing but user or channel not existant in cache");
+				}
+				break;
+			case _Constants.PacketType.SERVER_BAN_ADD:
+				var user = this.users.get("id", data.user.id);
+				var server = this.servers.get("id", data.guild_id);
+
+				if (user && server) {
+					client.emit("userBanned", user, server);
+				} else {
+					client.emit("warn", "user banned but user/server not in cache.");
+				}
+				break;
+			case _Constants.PacketType.SERVER_BAN_REMOVE:
+				var user = this.users.get("id", data.user.id);
+				var server = this.servers.get("id", data.guild_id);
+
+				if (user && server) {
+					client.emit("userUnbanned", user, server);
+				} else {
+					client.emit("warn", "user unbanned but user/server not in cache.");
+				}
+				break;
+			case _Constants.PacketType.USER_NOTE_UPDATE:
+				if (this.user.bot) {
+					return;
+				}
+				var user = this.users.get("id", data.id);
+				var oldNote = user.note;
+				var note = data.note || null;
+
+				// user in cache
+				if (user) {
+					var updatedUser = user;
+					updatedUser.note = note;
+
+					client.emit("noteUpdated", user, oldNote);
+
+					this.users.update(user, updatedUser);
+				} else {
+					client.emit("warn", "note updated but user not in cache");
+				}
+				break;
+			case _Constants.PacketType.VOICE_STATE_UPDATE:
+				var user = this.users.get("id", data.user_id);
+				var server = this.servers.get("id", data.guild_id);
+				var connection = this.voiceConnections.get("server", server);
+
+				if (user && server) {
+
+					if (data.channel_id) {
+						// in voice channel
+						var channel = this.channels.get("id", data.channel_id);
+						if (channel && channel.type === 2) {
+							server.eventVoiceStateUpdate(channel, user, data);
+						} else {
+							client.emit("warn", "voice state channel not in cache");
+						}
+					} else {
+						// not in voice channel
+						client.emit("voiceLeave", server.eventVoiceLeave(user), user);
+					}
+				} else {
+					client.emit("warn", "voice state update but user or server not in cache");
+				}
+
+				if (user && user.id === this.user.id) {
+					// only for detecting self user movements for connections.
+					var connection = this.voiceConnections.get("server", server);
+					// existing connection, perhaps channel moved
+					if (connection && connection.voiceChannel && connection.voiceChannel.id !== data.channel_id) {
+						// moved, update info
+						connection.voiceChannel = this.channels.get("id", data.channel_id);
+						client.emit("voiceMoved", connection.voiceChannel); // Moved to a new channel
+					}
+				}
+
+				break;
+			case _Constants.PacketType.SERVER_MEMBERS_CHUNK:
+
+				var server = this.servers.get("id", data.guild_id);
+
+				if (server) {
+
+					var testtime = Date.now();
+
+					for (var user of data.members) {
+						server.memberMap[user.user.id] = {
+							roles: user.roles,
+							mute: user.mute,
+							selfMute: false,
+							deaf: user.deaf,
+							selfDeaf: false,
+							joinedAt: Date.parse(user.joined_at),
+							nick: user.nick || null
+						};
+						server.members.add(this.users.add(new _User2.default(user.user, client)));
+					}
+
+					if (this.forceFetchCount.hasOwnProperty(server.id)) {
+						if (this.forceFetchCount[server.id] <= 1) {
+							delete this.forceFetchCount[server.id];
+							this.restartServerCreateTimeout();
+						} else {
+							this.forceFetchCount[server.id]--;
+						}
+					}
+
+					client.emit("debug", Date.now() - testtime + "ms for " + data.members.length + " user chunk for server with id " + server.id);
+				} else {
+					client.emit("warn", "chunk update received but server not in cache");
+				}
+
+				break;
+			case _Constants.PacketType.FRIEND_ADD:
+				if (this.user.bot) {
+					return;
+				}
+				if (data.type === 1) {
+					// accepted/got accepted a friend request
+					var inUser = this.incoming_friend_requests.get("id", data.id);
+					if (inUser) {
+						// client accepted another user
+						this.incoming_friend_requests.remove(this.friends.add(new _User2.default(data.user, client)));
+						return;
+					}
+
+					var outUser = this.outgoing_friend_requests.get("id", data.id);
+					if (outUser) {
+						// another user accepted the client
+						this.outgoing_friend_requests.remove(this.friends.add(new _User2.default(data.user, client)));
+						client.emit("friendRequestAccepted", outUser);
+						return;
+					}
+				} else if (data.type === 2) {
+					// client received block
+					this.blocked_users.add(new _User2.default(data.user, client));
+				} else if (data.type === 3) {
+					// client received friend request
+					client.emit("friendRequestReceived", this.incoming_friend_requests.add(new _User2.default(data.user, client)));
+				} else if (data.type === 4) {
+					// client sent friend request
+					this.outgoing_friend_requests.add(new _User2.default(data.user, client));
+				}
+				break;
+			case _Constants.PacketType.FRIEND_REMOVE:
+				if (this.user.bot) {
+					return;
+				}
+				var user = this.friends.get("id", data.id);
+				if (user) {
+					this.friends.remove(user);
+					client.emit("friendRemoved", user);
+					return;
+				}
+
+				user = this.blocked_users.get("id", data.id);
+				if (user) {
+					// they rejected friend request
+					this.blocked_users.remove(user);
+					return;
+				}
+
+				user = this.incoming_friend_requests.get("id", data.id);
+				if (user) {
+					// they rejected outgoing friend request OR client user manually deleted incoming thru web client/other clients
+					var rejectedUser = this.outgoing_friend_requests.get("id", user.id);
+					if (rejectedUser) {
+						// other person rejected outgoing
+						client.emit("friendRequestRejected", this.outgoing_friend_requests.remove(rejectedUser));
+						return;
+					}
+
+					// incoming deleted manually
+					this.incoming_friend_requests.remove(user);
+					return;
+				}
+
+				user = this.outgoing_friend_requests.get("id", data.id);
+				if (user) {
+					// client cancelled incoming friend request OR client user manually deleted outgoing thru web client/other clients
+					var incomingCancel = this.incoming_friend_requests.get("id", user.id);
+					if (incomingCancel) {
+						// client cancelled incoming
+						this.incoming_friend_requests.remove(user);
+						return;
+					}
+
+					// outgoing deleted manually
+					this.outgoing_friend_requests.remove(user);
+					return;
+				}
+				break;
+			case _Constants.PacketType.SERVER_SYNC:
+				// (╯°□°）╯︵ ┻━┻ thx Discord devs
+				var guild = this.servers.get(data.id);
+				data.members.forEach(dataUser => {
+					guild.memberMap[dataUser.user.id] = {
+						roles: dataUser.roles,
+						mute: dataUser.mute,
+						selfMute: dataUser.self_mute,
+						deaf: dataUser.deaf,
+						selfDeaf: dataUser.self_deaf,
+						joinedAt: Date.parse(dataUser.joined_at),
+						nick: dataUser.nick || null
+					};
+					guild.members.add(client.internal.users.add(new _User2.default(dataUser.user, client)));
+				});
+				for (var presence of data.presences) {
+					var user = client.internal.users.get("id", presence.user.id);
+					if (user) {
+						user.status = presence.status;
+						user.game = presence.game;
+					}
+				}
+				if (guild.pendingVoiceStates && guild.pendingVoiceStates.length > 0) {
+					for (var voiceState of guild.pendingVoiceStates) {
+						let user = guild.members.get("id", voiceState.user_id);
+						if (user) {
+							guild.memberMap[user.id] = guild.memberMap[user.id] || {};
+							guild.memberMap[user.id].mute = voiceState.mute || guild.memberMap[user.id].mute;
+							guild.memberMap[user.id].selfMute = voiceState.self_mute === undefined ? guild.memberMap[user.id].selfMute : voiceState.self_mute;
+							guild.memberMap[user.id].deaf = voiceState.deaf || guild.memberMap[user.id].deaf;
+							guild.memberMap[user.id].selfDeaf = voiceState.self_deaf === undefined ? guild.memberMap[user.id].selfDeaf : voiceState.self_deaf;
+							let channel = guild.channels.get("id", voiceState.channel_id);
+							if (channel) {
+								guild.eventVoiceJoin(user, channel);
+							} else {
+								guild.client.emit("warn", "channel doesn't exist even though GUILD_SYNC expects them to");
+							}
+						} else {
+							guild.client.emit("warn", "user doesn't exist even though GUILD_SYNC expects them to");
+						}
+					}
+				}
+				guild.pendingVoiceStates = null;
+				this.unsyncedGuilds--;
+				this.restartServerCreateTimeout();
+				break;
+			default:
+				client.emit("unknown", packet);
+				break;
+		}
+	}
+
+	resume() {
+		var data = {
+			op: 6,
+			d: {
+				token: this.token,
+				session_id: this.sessionID,
+				seq: this.sequence
+			}
+		};
+
+		this.sendWS(data);
+	}
+
+	identify() {
+		var data = {
+			op: 2,
+			d: {
+				token: this.token,
+				v: GATEWAY_VERSION,
+				compress: this.client.options.compress,
+				large_threshold: this.client.options.largeThreshold,
+				properties: {
+					"$os": process.platform,
+					"$browser": "discord.js",
+					"$device": "discord.js",
+					"$referrer": "",
+					"$referring_domain": ""
+				}
+			}
+		};
+
+		if (this.client.options.shard) {
+			data.d.shard = this.client.options.shard;
+		}
+
+		this.sendWS(data);
+	}
+
+	heartbeat() {
+		console.log("heartbeat called, value " + this.heartbeatAcked);
+		if (!this.heartbeatAcked) this.disconnected(true);
+		console.log("set it to false");
+		this.heartbeatAcked = false;
+		this.sendWS({ op: 1, d: Date.now() });
+	}
+>>>>>>> Stashed changes
 }
 exports.default = InternalClient;
 //# sourceMappingURL=InternalClient.js.map
Index: src/Client/InternalClient.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Client/InternalClient.js	(revision 06517bfced82109600a92b614d27d36ac0316e46)
+++ src/Client/InternalClient.js	(revision )
@@ -1936,6 +1936,7 @@
           }
         }
 
+<<<<<<< Updated upstream
         client.emit("debug", `ready packet took ${Date.now() - startTime}ms to process`);
         client.emit("debug", `ready with ${this.servers.length} servers, ${this.unavailableServers.length} unavailable servers, ${this.channels.length} channels and ${this.users.length} users cached.`);
 
@@ -2680,4 +2681,843 @@
     this.heartbeatAcked = false;
     this.sendWS({op: 1, d: Date.now()});
   }
+=======
+			switch(packet.op) {
+				case 0:
+					this.processPacket(packet);
+					break;
+				case 1:
+					console.log("set it to true 1");
+          this.heartbeatAcked = true;
+					this.heartbeat();
+					break;
+				case 7:
+					this.disconnected(true);
+					break;
+				case 9:
+					this.sessionID = null;
+					this.sequence = 0;
+					this.identify();
+					break;
+				case 10:
+					if(this.sessionID) {
+						this.resume();
+					} else {
+						this.identify();
+					}
+					console.log("set it to true 10 1");
+					this.heartbeatAcked = true; // start off without assuming we didn't get a missed heartbeat acknowledge right away;
+					this.heartbeat();
+					console.log("set it to true 10 2");
+					this.heartbeatAcked = true;
+					this.intervals.kai = setInterval(() => this.heartbeat(), packet.d.heartbeat_interval);
+					break;
+				case 11:
+					console.log("set heartbeatAcked to true because heartbeat was acked.");
+					this.heartbeatAcked = true;
+					break;
+				default:
+					this.client.emit("unknown", packet);
+					break;
+			}
+		};
+	}
+
+	processPacket(packet) {
+		var client = this.client;
+		var data = packet.d;
+		switch (packet.t) {
+			case PacketType.RESUME:
+			case PacketType.READY:
+				this.autoReconnectInterval = 1000;
+				this.state = ConnectionState.READY;
+
+				if(packet.t === PacketType.RESUME) {
+					break;
+				}
+
+				this.sessionID = data.session_id;
+				var startTime = Date.now();
+
+				this.user = this.users.add(new User(data.user, client));
+
+				this.forceFetchCount = {};
+				this.forceFetchQueue = [];
+				this.forceFetchLength = 1;
+
+				data.guilds.forEach(server => {
+					if (!server.unavailable) {
+						server = this.servers.add(new Server(server, client));
+	                    if(client.options.bot === false) {
+	                        this.unsyncedGuilds++;
+	                        this.syncGuild(server.id);
+	                    }
+						if (this.client.options.forceFetchUsers && server.members && server.members.length < server.memberCount) {
+							this.getGuildMembers(server.id, Math.ceil(server.memberCount / 1000));
+						}
+					} else {
+						client.emit("debug", "server " + server.id + " was unavailable, could not create (ready)");
+						this.unavailableServers.add(server);
+					}
+				});
+				data.private_channels.forEach(pm => {
+					this.private_channels.add(new PMChannel(pm, client));
+				});
+				if (!data.user.bot) { // bots dont have friends
+					data.relationships.forEach(friend => {
+						if (friend.type === 1) { // is a friend
+							this.friends.add(new User(friend.user, client));
+						} else if (friend.type === 2) { // incoming friend requests
+							this.blocked_users.add(new User(friend.user, client));
+						} else if (friend.type === 3) { // incoming friend requests
+							this.incoming_friend_requests.add(new User(friend.user, client));
+						} else if (friend.type === 4) { // outgoing friend requests
+							this.outgoing_friend_requests.add(new User(friend.user, client));
+						} else {
+							client.emit("warn", "unknown friend type " + friend.type);
+						}
+					});
+				} else {
+					this.friends = null;
+					this.blocked_users = null;
+					this.incoming_friend_requests = null;
+					this.outgoing_friend_requests = null;
+				}
+
+				// add notes to users
+				if(data.notes) {
+					for(note in data.notes) {
+						var user = this.users.get("id", note);
+						if(user) {
+							var newUser = user;
+							newUser.note = data.notes[note];
+
+							this.users.update(user, newUser);
+						} else {
+							client.emit("warn", "note in ready packet but user not cached");
+						}
+					}
+				}
+
+				client.emit("debug", `ready packet took ${Date.now() - startTime}ms to process`);
+				client.emit("debug", `ready with ${this.servers.length} servers, ${this.unavailableServers.length} unavailable servers, ${this.channels.length} channels and ${this.users.length} users cached.`);
+
+				this.restartServerCreateTimeout();
+
+				break;
+
+			case PacketType.MESSAGE_CREATE:
+				// format: https://discordapi.readthedocs.org/en/latest/reference/channels/messages.html#message-format
+				var channel = this.channels.get("id", data.channel_id) || this.private_channels.get("id", data.channel_id);
+				if (channel) {
+					var msg = channel.messages.add(new Message(data, channel, client));
+					channel.lastMessageID = msg.id;
+
+					if (this.messageAwaits[channel.id + msg.author.id]) {
+						this.messageAwaits[channel.id + msg.author.id].map( fn => fn(msg) );
+						this.messageAwaits[channel.id + msg.author.id] = null;
+						client.emit("message", msg, true); //2nd param is isAwaitedMessage
+					} else {
+						client.emit("message", msg);
+					}
+				} else {
+					client.emit("warn", "message created but channel is not cached");
+				}
+				break;
+			case PacketType.MESSAGE_DELETE:
+				var channel = this.channels.get("id", data.channel_id) || this.private_channels.get("id", data.channel_id);
+				if (channel) {
+					// potentially blank
+					var msg = channel.messages.get("id", data.id);
+					client.emit("messageDeleted", msg, channel);
+					if (msg) {
+						channel.messages.remove(msg);
+					} else {
+						client.emit("debug", "message was deleted but message is not cached");
+					}
+				} else {
+					client.emit("warn", "message was deleted but channel is not cached");
+				}
+				break;
+			case PacketType.MESSAGE_DELETE_BULK:
+				var channel = this.channels.get("id", data.channel_id) || this.private_channels.get("id", data.channel_id);
+				if (channel) {
+					data.ids.forEach((id) => {
+						// potentially blank
+						var msg = channel.messages.get("id", id);
+						client.emit("messageDeleted", msg, channel);
+						if (msg) {
+							channel.messages.remove(msg);
+						} else {
+							client.emit("debug", "message was deleted but message is not cached");
+						}
+					});
+				} else {
+					client.emit("warn", "message was deleted but channel is not cached");
+				}
+				break;
+			case PacketType.MESSAGE_UPDATE:
+				// format https://discordapi.readthedocs.org/en/latest/reference/channels/messages.html#message-format
+				var channel = this.channels.get("id", data.channel_id) || this.private_channels.get("id", data.channel_id);
+				if (channel) {
+					// potentially blank
+					var msg = channel.messages.get("id", data.id);
+
+					if (msg) {
+						// old message exists
+						data.nonce = data.nonce !== undefined ? data.nonce : msg.nonce;
+						data.attachments = data.attachments !== undefined ? data.attachments : msg.attachments;
+						data.tts = data.tts !== undefined ? data.tts : msg.tts;
+						data.embeds = data.embeds !== undefined ? data.embeds : msg.embeds;
+						data.timestamp = data.timestamp !== undefined ? data.timestamp : msg.timestamp;
+						data.mention_everyone = data.mention_everyone !== undefined ? data.mention_everyone : msg.everyoneMentioned;
+						data.content = data.content !== undefined ? data.content : msg.content;
+						data.mentions = data.mentions !== undefined ? data.mentions : msg.mentions;
+						data.author = data.author !== undefined ? data.author : msg.author;
+						msg = new Message(msg, channel, client);
+					} else if (!data.author || !data.content) {
+						break;
+					}
+					var nmsg = new Message(data, channel, client);
+					client.emit("messageUpdated", msg, nmsg);
+					if (msg) {
+						channel.messages.update(msg, nmsg);
+					}
+				} else {
+					client.emit("warn", "message was updated but channel is not cached");
+				}
+				break;
+			case PacketType.SERVER_CREATE:
+				var server = this.servers.get("id", data.id);
+				if (!server) {
+					if (!data.unavailable) {
+						server = this.servers.add(new Server(data, client));
+	                    if(client.options.bot === false) {
+	                        this.unsyncedGuilds++;
+	                        this.syncGuild(server.id);
+	                    }
+						if (client.readyTime) {
+							client.emit("serverCreated", server);
+						}
+						if (this.client.options.forceFetchUsers && server.large && server.members.length < server.memberCount) {
+							this.getGuildMembers(server.id, Math.ceil(server.memberCount / 1000));
+						}
+						var unavailable = this.unavailableServers.get("id", server.id);
+						if (unavailable) {
+							this.unavailableServers.remove(unavailable);
+						}
+						this.restartServerCreateTimeout();
+					} else {
+						client.emit("debug", "server was unavailable, could not create");
+					}
+				}
+				break;
+			case PacketType.SERVER_DELETE:
+				var server = this.servers.get("id", data.id);
+				if (server) {
+					if (!data.unavailable) {
+						client.emit("serverDeleted", server);
+
+						for (var channel of server.channels) {
+							this.channels.remove(channel);
+						}
+
+						this.servers.remove(server);
+
+						for (var user of server.members) {
+							var found = false;
+							for (var s of this.servers) {
+								if (s.members.get("id", user.id)) {
+									found = true;
+									break;
+								}
+							}
+							if (!found) {
+								this.users.remove(user);
+							}
+						}
+					} else {
+						client.emit("debug", "server was unavailable, could not update");
+					}
+                	this.buckets["bot:msg:guild:" + packet.d.id] =
+	                    this.buckets["dmsg:" + packet.d.id] =
+	                    this.buckets["bdmsg:" + packet.d.id] =
+	                    this.buckets["guild_member:" + packet.d.id] =
+	                    this.buckets["guild_member_nick:" + packet.d.id] = undefined;
+				} else {
+					client.emit("warn", "server was deleted but it was not in the cache");
+				}
+				break;
+			case PacketType.SERVER_UPDATE:
+				var server = this.servers.get("id", data.id);
+				if (server) {
+					// server exists
+					data.members = data.members || [];
+					data.channels = data.channels || [];
+					var newserver = new Server(data, client);
+					newserver.members = server.members;
+					newserver.memberMap = server.memberMap;
+					newserver.channels = server.channels;
+					if (newserver.equalsStrict(server)) {
+						// already the same don't do anything
+						client.emit("debug", "received server update but server already updated");
+					} else {
+						client.emit("serverUpdated", new Server(server, client), newserver);
+						this.servers.update(server, newserver);
+					}
+				} else if (!server) {
+					client.emit("warn", "server was updated but it was not in the cache");
+				}
+				break;
+			case PacketType.CHANNEL_CREATE:
+
+				var channel = this.channels.get("id", data.id);
+
+				if (!channel) {
+
+					var server = this.servers.get("id", data.guild_id);
+					if (server) {
+						var chan = null;
+						if (data.type === 0) {
+							chan = this.channels.add(new TextChannel(data, client, server));
+						} else {
+							chan = this.channels.add(new VoiceChannel(data, client, server));
+						}
+						client.emit("channelCreated", server.channels.add(chan));
+					} else if (data.is_private) {
+						client.emit("channelCreated", this.private_channels.add(new PMChannel(data, client)));
+					} else {
+						client.emit("warn", "channel created but server does not exist");
+					}
+
+				} else {
+					client.emit("warn", "channel created but already in cache");
+				}
+
+				break;
+			case PacketType.CHANNEL_DELETE:
+				var channel = this.channels.get("id", data.id) || this.private_channels.get("id", data.id);
+				if (channel) {
+
+					if (channel.server) { // accounts for PMs
+						channel.server.channels.remove(channel);
+						this.channels.remove(channel);
+					} else {
+						this.private_channels.remove(channel);
+					}
+
+					client.emit("channelDeleted", channel);
+
+				} else {
+					client.emit("warn", "channel deleted but already out of cache?");
+				}
+				break;
+			case PacketType.CHANNEL_UPDATE:
+				var channel = this.channels.get("id", data.id) || this.private_channels.get("id", data.id);
+				if (channel) {
+
+					if (channel instanceof PMChannel) {
+						//PM CHANNEL
+						client.emit("channelUpdated", new PMChannel(channel, client),
+							this.private_channels.update(channel, new PMChannel(data, client)));
+					} else {
+						if (channel.server) {
+							if (channel.type === 0) {
+								//TEXT CHANNEL
+								var chan = new TextChannel(data, client, channel.server);
+								chan.messages = channel.messages;
+								client.emit("channelUpdated", channel, chan);
+								channel.server.channels.update(channel, chan);
+								this.channels.update(channel, chan);
+							} else {
+								//VOICE CHANNEL
+								data.members = channel.members;
+								var chan = new VoiceChannel(data, client, channel.server);
+								client.emit("channelUpdated", channel, chan);
+								channel.server.channels.update(channel, chan);
+								this.channels.update(channel, chan);
+							}
+						} else {
+							client.emit("warn", "channel updated but server non-existant");
+						}
+					}
+
+				} else {
+					client.emit("warn", "channel updated but not in cache");
+				}
+				break;
+			case PacketType.SERVER_ROLE_CREATE:
+				var server = this.servers.get("id", data.guild_id);
+				if (server) {
+					client.emit("serverRoleCreated", server.roles.add(new Role(data.role, server, client)), server);
+				} else {
+					client.emit("warn", "server role made but server not in cache");
+				}
+				break;
+			case PacketType.SERVER_ROLE_DELETE:
+				var server = this.servers.get("id", data.guild_id);
+				if (server) {
+					var role = server.roles.get("id", data.role_id);
+					if (role) {
+						server.roles.remove(role);
+						client.emit("serverRoleDeleted", role);
+					} else {
+						client.emit("warn", "server role deleted but role not in cache");
+					}
+				} else {
+					client.emit("warn", "server role deleted but server not in cache");
+				}
+				break;
+			case PacketType.SERVER_ROLE_UPDATE:
+				var server = this.servers.get("id", data.guild_id);
+				if (server) {
+					var role = server.roles.get("id", data.role.id);
+					if (role) {
+						var newRole = new Role(data.role, server, client);
+						client.emit("serverRoleUpdated", new Role(role, server, client), newRole);
+						server.roles.update(role, newRole);
+					} else {
+						client.emit("warn", "server role updated but role not in cache");
+					}
+				} else {
+					client.emit("warn", "server role updated but server not in cache");
+				}
+				break;
+			case PacketType.SERVER_MEMBER_ADD:
+				var server = this.servers.get("id", data.guild_id);
+				if (server) {
+
+					server.memberMap[data.user.id] = {
+						roles: data.roles,
+						mute: false,
+						selfMute: false,
+						deaf: false,
+						selfDeaf: false,
+						joinedAt: Date.parse(data.joined_at),
+						nick: data.nick || null
+					};
+
+					server.memberCount++;
+
+					client.emit(
+						"serverNewMember",
+						server,
+						server.members.add(this.users.add(new User(data.user, client)))
+					);
+
+				} else {
+					client.emit("warn", "server member added but server doesn't exist in cache");
+				}
+				break;
+			case PacketType.SERVER_MEMBER_REMOVE:
+				var server = this.servers.get("id", data.guild_id);
+				if (server) {
+					var user = this.users.get("id", data.user.id);
+					if (user) {
+						client.emit("serverMemberRemoved", server, user);
+						server.memberMap[data.user.id] = null;
+						server.members.remove(user);
+						server.memberCount--;
+					} else {
+						client.emit("warn", "server member removed but user doesn't exist in cache");
+					}
+				} else {
+					client.emit("warn", "server member removed but server doesn't exist in cache");
+				}
+				break;
+			case PacketType.SERVER_MEMBER_UPDATE:
+				var server = this.servers.get("id", data.guild_id);
+				if (server) {
+					var user = this.users.add(new User(data.user, client));
+					if (user) {
+						var oldMember = null;
+						if (server.memberMap[data.user.id]) {
+							oldMember = {
+								roles: server.memberMap[data.user.id].roles,
+								mute: server.memberMap[data.user.id].mute,
+								selfMute: server.memberMap[data.user.id].selfMute,
+								deaf: server.memberMap[data.user.id].deaf,
+								selfDeaf: server.memberMap[data.user.id].selfDeaf,
+								nick: server.memberMap[data.user.id].nick
+							};
+						} else {
+							server.memberMap[data.user.id] = {};
+						}
+						server.memberMap[data.user.id].roles = data.roles ? data.roles : server.memberMap[data.user.id].roles;
+						server.memberMap[data.user.id].mute = data.mute || server.memberMap[data.user.id].mute;
+						server.memberMap[data.user.id].selfMute = data.self_mute === undefined ? server.memberMap[data.user.id].selfMute : data.self_mute;
+						server.memberMap[data.user.id].deaf = data.deaf || server.memberMap[data.user.id].deaf;
+						server.memberMap[data.user.id].selfDeaf = data.self_deaf === undefined ? server.memberMap[data.user.id].selfDeaf : data.self_deaf;
+						server.memberMap[data.user.id].nick = data.nick === undefined ? server.memberMap[data.user.id].nick : data.nick || null;
+						client.emit("serverMemberUpdated", server, user, oldMember);
+					} else {
+						client.emit("warn", "server member removed but user doesn't exist in cache");
+					}
+				} else {
+					client.emit("warn", "server member updated but server doesn't exist in cache");
+				}
+				break;
+			case PacketType.PRESENCE_UPDATE:
+
+				var user = this.users.add(new User(data.user, client));
+				var server = this.servers.get("id", data.guild_id);
+
+				if (user && server) {
+
+					server.members.add(user);
+
+					data.user.username = data.user.username || user.username;
+					data.user.id = data.user.id || user.id;
+					data.user.avatar = data.user.avatar !== undefined ? data.user.avatar : user.avatar;
+					data.user.discriminator = data.user.discriminator || user.discriminator;
+					data.user.status = data.status || user.status;
+					data.user.game = data.game !== undefined ? data.game : user.game;
+					data.user.bot = data.user.bot !== undefined ? data.user.bot : user.bot;
+
+					var presenceUser = new User(data.user, client);
+
+					if (!presenceUser.equalsStrict(user)) {
+						client.emit("presence", user, presenceUser);
+						this.users.update(user, presenceUser);
+					}
+
+				} else {
+					client.emit("warn", "presence update but user/server not in cache");
+				}
+
+				break;
+			case PacketType.USER_UPDATE:
+
+				var user = this.users.get("id", data.id);
+
+				if (user) {
+
+					data.username = data.username || user.username;
+					data.id = data.id || user.id;
+					data.avatar = data.avatar || user.avatar;
+					data.discriminator = data.discriminator || user.discriminator;
+					this.email = data.email || this.email;
+
+					var presenceUser = new User(data, client);
+
+					client.emit("presence", user, presenceUser);
+					this.users.update(user, presenceUser);
+
+				} else {
+					client.emit("warn", "user update but user not in cache (this should never happen)");
+				}
+
+				break;
+			case PacketType.TYPING:
+
+				var user = this.users.get("id", data.user_id);
+				var channel = this.channels.get("id", data.channel_id) || this.private_channels.get("id", data.channel_id);
+
+				if (user && channel) {
+					if (user.typing.since) {
+						user.typing.since = Date.now();
+						user.typing.channel = channel;
+					} else {
+						user.typing.since = Date.now();
+						user.typing.channel = channel;
+						client.emit("userTypingStarted", user, channel);
+					}
+					setTimeout(() => {
+						if (Date.now() - user.typing.since > 5500) {
+							// they haven't typed since
+							user.typing.since = null;
+							user.typing.channel = null;
+							client.emit("userTypingStopped", user, channel);
+						}
+					}, 6000);
+
+				} else {
+					client.emit("warn", "user typing but user or channel not existant in cache");
+				}
+				break;
+			case PacketType.SERVER_BAN_ADD:
+				var user = this.users.get("id", data.user.id);
+				var server = this.servers.get("id", data.guild_id);
+
+				if (user && server) {
+					client.emit("userBanned", user, server);
+				} else {
+					client.emit("warn", "user banned but user/server not in cache.");
+				}
+				break;
+			case PacketType.SERVER_BAN_REMOVE:
+				var user = this.users.get("id", data.user.id);
+				var server = this.servers.get("id", data.guild_id);
+
+				if (user && server) {
+					client.emit("userUnbanned", user, server);
+				} else {
+					client.emit("warn", "user unbanned but user/server not in cache.");
+				}
+				break;
+			case PacketType.USER_NOTE_UPDATE:
+				if(this.user.bot) {
+					return;
+				}
+				var user = this.users.get("id", data.id);
+				var oldNote = user.note;
+				var note = data.note || null;
+
+				// user in cache
+				if(user) {
+					var updatedUser = user;
+					updatedUser.note = note;
+
+					client.emit("noteUpdated", user, oldNote);
+
+					this.users.update(user, updatedUser);
+
+				} else {
+					client.emit("warn", "note updated but user not in cache");
+				}
+				break;
+			case PacketType.VOICE_STATE_UPDATE:
+				var user = this.users.get("id", data.user_id);
+				var server = this.servers.get("id", data.guild_id);
+				var connection = this.voiceConnections.get("server", server);
+
+				if (user && server) {
+
+					if (data.channel_id) {
+						// in voice channel
+						var channel = this.channels.get("id", data.channel_id);
+						if (channel && channel.type === 2) {
+							server.eventVoiceStateUpdate(channel, user, data);
+						} else {
+							client.emit("warn", "voice state channel not in cache");
+						}
+					} else {
+						// not in voice channel
+						client.emit("voiceLeave", server.eventVoiceLeave(user), user);
+					}
+
+				} else {
+					client.emit("warn", "voice state update but user or server not in cache");
+				}
+
+				if (user && user.id === this.user.id) { // only for detecting self user movements for connections.
+					var connection = this.voiceConnections.get("server", server);
+					// existing connection, perhaps channel moved
+					if (connection && connection.voiceChannel && connection.voiceChannel.id !== data.channel_id) {
+						// moved, update info
+						connection.voiceChannel = this.channels.get("id", data.channel_id);
+						client.emit("voiceMoved", connection.voiceChannel); // Moved to a new channel
+					}
+				}
+
+				break;
+			case PacketType.SERVER_MEMBERS_CHUNK:
+
+				var server = this.servers.get("id", data.guild_id);
+
+				if (server) {
+
+					var testtime = Date.now();
+
+					for (var user of data.members) {
+						server.memberMap[user.user.id] = {
+							roles: user.roles,
+							mute: user.mute,
+							selfMute: false,
+							deaf: user.deaf,
+							selfDeaf: false,
+							joinedAt: Date.parse(user.joined_at),
+							nick: user.nick || null
+						};
+						server.members.add(this.users.add(new User(user.user, client)));
+					}
+
+					if (this.forceFetchCount.hasOwnProperty(server.id)) {
+						if (this.forceFetchCount[server.id] <= 1) {
+							delete this.forceFetchCount[server.id];
+							this.restartServerCreateTimeout();
+						} else {
+							this.forceFetchCount[server.id]--;
+						}
+					}
+
+					client.emit("debug", (Date.now() - testtime) + "ms for " + data.members.length + " user chunk for server with id " + server.id);
+
+				} else {
+					client.emit("warn", "chunk update received but server not in cache");
+				}
+
+				break;
+			case PacketType.FRIEND_ADD:
+				if (this.user.bot) {
+					return;
+				}
+				if (data.type === 1) { // accepted/got accepted a friend request
+					var inUser = this.incoming_friend_requests.get("id", data.id);
+					if (inUser) {
+						// client accepted another user
+						this.incoming_friend_requests.remove(this.friends.add(new User(data.user, client)));
+						return;
+					}
+
+					var outUser = this.outgoing_friend_requests.get("id", data.id);
+					if (outUser) {
+						// another user accepted the client
+						this.outgoing_friend_requests.remove(this.friends.add(new User(data.user, client)));
+						client.emit("friendRequestAccepted", outUser);
+						return;
+					}
+				} else if (data.type === 2) {
+					// client received block
+					this.blocked_users.add(new User(data.user, client));
+				} else if (data.type === 3) {
+					// client received friend request
+					client.emit("friendRequestReceived", this.incoming_friend_requests.add(new User(data.user, client)));
+				} else if (data.type === 4) {
+					// client sent friend request
+					this.outgoing_friend_requests.add(new User(data.user, client));
+				}
+				break;
+			case PacketType.FRIEND_REMOVE:
+				if (this.user.bot) {
+					return;
+				}
+				var user = this.friends.get("id", data.id);
+				if (user) {
+					this.friends.remove(user);
+					client.emit("friendRemoved", user);
+					return;
+				}
+
+				user = this.blocked_users.get("id", data.id);
+				if (user) { // they rejected friend request
+					this.blocked_users.remove(user);
+					return;
+				}
+
+				user = this.incoming_friend_requests.get("id", data.id);
+				if (user) { // they rejected outgoing friend request OR client user manually deleted incoming thru web client/other clients
+					var rejectedUser = this.outgoing_friend_requests.get("id", user.id);
+					if (rejectedUser) {
+						// other person rejected outgoing
+						client.emit("friendRequestRejected", this.outgoing_friend_requests.remove(rejectedUser));
+						return;
+					}
+
+					// incoming deleted manually
+					this.incoming_friend_requests.remove(user);
+					return;
+				}
+
+				user = this.outgoing_friend_requests.get("id", data.id);
+				if (user) { // client cancelled incoming friend request OR client user manually deleted outgoing thru web client/other clients
+					var incomingCancel = this.incoming_friend_requests.get("id", user.id);
+					if (incomingCancel) {
+						// client cancelled incoming
+						this.incoming_friend_requests.remove(user);
+						return;
+					}
+
+					// outgoing deleted manually
+					this.outgoing_friend_requests.remove(user);
+					return;
+				}
+				break;
+			case PacketType.SERVER_SYNC:// (╯°□°）╯︵ ┻━┻ thx Discord devs
+                var guild = this.servers.get(data.id);
+				data.members.forEach((dataUser) => {
+					guild.memberMap[dataUser.user.id] = {
+						roles: dataUser.roles,
+						mute: dataUser.mute,
+						selfMute: dataUser.self_mute,
+						deaf: dataUser.deaf,
+						selfDeaf: dataUser.self_deaf,
+						joinedAt: Date.parse(dataUser.joined_at),
+						nick: dataUser.nick || null
+					};
+					guild.members.add(client.internal.users.add(new User(dataUser.user, client)));
+				});
+				for (var presence of data.presences) {
+					var user = client.internal.users.get("id", presence.user.id);
+					if(user) {
+						user.status = presence.status;
+						user.game = presence.game;
+					}
+				}
+                if(guild.pendingVoiceStates && guild.pendingVoiceStates.length > 0) {
+					for (var voiceState of guild.pendingVoiceStates) {
+						let user = guild.members.get("id", voiceState.user_id);
+						if (user) {
+							guild.memberMap[user.id] = guild.memberMap[user.id] || {};
+							guild.memberMap[user.id].mute = voiceState.mute || guild.memberMap[user.id].mute;
+							guild.memberMap[user.id].selfMute = voiceState.self_mute === undefined ? guild.memberMap[user.id].selfMute : voiceState.self_mute;
+							guild.memberMap[user.id].deaf = voiceState.deaf || guild.memberMap[user.id].deaf;
+							guild.memberMap[user.id].selfDeaf = voiceState.self_deaf === undefined ? guild.memberMap[user.id].selfDeaf : voiceState.self_deaf;
+							let channel = guild.channels.get("id", voiceState.channel_id);
+							if (channel) {
+								guild.eventVoiceJoin(user, channel);
+							} else {
+								guild.client.emit("warn", "channel doesn't exist even though GUILD_SYNC expects them to");
+							}
+						} else {
+							guild.client.emit("warn", "user doesn't exist even though GUILD_SYNC expects them to");
+						}
+					}
+                }
+                guild.pendingVoiceStates = null;
+                this.unsyncedGuilds--;
+                this.restartServerCreateTimeout();
+                break;
+			default:
+				client.emit("unknown", packet);
+				break;
+		}
+	}
+
+	resume() {
+		var data = {
+			op: 6,
+			d: {
+	            token: this.token,
+	            session_id: this.sessionID,
+	            seq: this.sequence
+			}
+		};
+
+		this.sendWS(data);
+	}
+
+	identify() {
+		var data = {
+			op: 2,
+			d: {
+				token: this.token,
+				v: GATEWAY_VERSION,
+				compress: this.client.options.compress,
+				large_threshold : this.client.options.largeThreshold,
+				properties: {
+					"$os": process.platform,
+					"$browser": "discord.js",
+					"$device": "discord.js",
+					"$referrer": "",
+					"$referring_domain": ""
+				}
+			}
+		};
+
+		if (this.client.options.shard) {
+			data.d.shard = this.client.options.shard;
+		}
+
+		this.sendWS(data);
+	}
+
+	heartbeat() {
+		console.log("heartbeat called, value " + this.heartbeatAcked);
+	  if (!this.heartbeatAcked) this.disconnected(true);
+	  console.log("set it to false");
+    this.heartbeatAcked = false;
+		this.sendWS({ op: 1, d: Date.now() });
+	}
+>>>>>>> Stashed changes
 }
